
EDL32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000517c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005314  08005314  00015314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800532c  0800532c  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  0800532c  0800532c  0001532c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005334  08005334  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005334  08005334  00015334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005338  08005338  00015338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800533c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000018  08005354  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08005354  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef62  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024f3  00000000  00000000  0002efed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea8  00000000  00000000  000314e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b62  00000000  00000000  00032388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001876a  00000000  00000000  00032eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b5e  00000000  00000000  0004b654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097c8d  00000000  00000000  0005c1b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e9c  00000000  00000000  000f3e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f7cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080052fc 	.word	0x080052fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	080052fc 	.word	0x080052fc

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2uiz>:
 80007a4:	004a      	lsls	r2, r1, #1
 80007a6:	d211      	bcs.n	80007cc <__aeabi_d2uiz+0x28>
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ac:	d211      	bcs.n	80007d2 <__aeabi_d2uiz+0x2e>
 80007ae:	d50d      	bpl.n	80007cc <__aeabi_d2uiz+0x28>
 80007b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d40e      	bmi.n	80007d8 <__aeabi_d2uiz+0x34>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d102      	bne.n	80007de <__aeabi_d2uiz+0x3a>
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	4770      	bx	lr
 80007de:	f04f 0000 	mov.w	r0, #0
 80007e2:	4770      	bx	lr

080007e4 <__aeabi_uldivmod>:
 80007e4:	b953      	cbnz	r3, 80007fc <__aeabi_uldivmod+0x18>
 80007e6:	b94a      	cbnz	r2, 80007fc <__aeabi_uldivmod+0x18>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	bf08      	it	eq
 80007ec:	2800      	cmpeq	r0, #0
 80007ee:	bf1c      	itt	ne
 80007f0:	f04f 31ff 	movne.w	r1, #4294967295
 80007f4:	f04f 30ff 	movne.w	r0, #4294967295
 80007f8:	f000 b970 	b.w	8000adc <__aeabi_idiv0>
 80007fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000800:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000804:	f000 f806 	bl	8000814 <__udivmoddi4>
 8000808:	f8dd e004 	ldr.w	lr, [sp, #4]
 800080c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000810:	b004      	add	sp, #16
 8000812:	4770      	bx	lr

08000814 <__udivmoddi4>:
 8000814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000818:	9e08      	ldr	r6, [sp, #32]
 800081a:	460d      	mov	r5, r1
 800081c:	4604      	mov	r4, r0
 800081e:	460f      	mov	r7, r1
 8000820:	2b00      	cmp	r3, #0
 8000822:	d14a      	bne.n	80008ba <__udivmoddi4+0xa6>
 8000824:	428a      	cmp	r2, r1
 8000826:	4694      	mov	ip, r2
 8000828:	d965      	bls.n	80008f6 <__udivmoddi4+0xe2>
 800082a:	fab2 f382 	clz	r3, r2
 800082e:	b143      	cbz	r3, 8000842 <__udivmoddi4+0x2e>
 8000830:	fa02 fc03 	lsl.w	ip, r2, r3
 8000834:	f1c3 0220 	rsb	r2, r3, #32
 8000838:	409f      	lsls	r7, r3
 800083a:	fa20 f202 	lsr.w	r2, r0, r2
 800083e:	4317      	orrs	r7, r2
 8000840:	409c      	lsls	r4, r3
 8000842:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000846:	fa1f f58c 	uxth.w	r5, ip
 800084a:	fbb7 f1fe 	udiv	r1, r7, lr
 800084e:	0c22      	lsrs	r2, r4, #16
 8000850:	fb0e 7711 	mls	r7, lr, r1, r7
 8000854:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000858:	fb01 f005 	mul.w	r0, r1, r5
 800085c:	4290      	cmp	r0, r2
 800085e:	d90a      	bls.n	8000876 <__udivmoddi4+0x62>
 8000860:	eb1c 0202 	adds.w	r2, ip, r2
 8000864:	f101 37ff 	add.w	r7, r1, #4294967295
 8000868:	f080 811c 	bcs.w	8000aa4 <__udivmoddi4+0x290>
 800086c:	4290      	cmp	r0, r2
 800086e:	f240 8119 	bls.w	8000aa4 <__udivmoddi4+0x290>
 8000872:	3902      	subs	r1, #2
 8000874:	4462      	add	r2, ip
 8000876:	1a12      	subs	r2, r2, r0
 8000878:	b2a4      	uxth	r4, r4
 800087a:	fbb2 f0fe 	udiv	r0, r2, lr
 800087e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000882:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000886:	fb00 f505 	mul.w	r5, r0, r5
 800088a:	42a5      	cmp	r5, r4
 800088c:	d90a      	bls.n	80008a4 <__udivmoddi4+0x90>
 800088e:	eb1c 0404 	adds.w	r4, ip, r4
 8000892:	f100 32ff 	add.w	r2, r0, #4294967295
 8000896:	f080 8107 	bcs.w	8000aa8 <__udivmoddi4+0x294>
 800089a:	42a5      	cmp	r5, r4
 800089c:	f240 8104 	bls.w	8000aa8 <__udivmoddi4+0x294>
 80008a0:	4464      	add	r4, ip
 80008a2:	3802      	subs	r0, #2
 80008a4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008a8:	1b64      	subs	r4, r4, r5
 80008aa:	2100      	movs	r1, #0
 80008ac:	b11e      	cbz	r6, 80008b6 <__udivmoddi4+0xa2>
 80008ae:	40dc      	lsrs	r4, r3
 80008b0:	2300      	movs	r3, #0
 80008b2:	e9c6 4300 	strd	r4, r3, [r6]
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d908      	bls.n	80008d0 <__udivmoddi4+0xbc>
 80008be:	2e00      	cmp	r6, #0
 80008c0:	f000 80ed 	beq.w	8000a9e <__udivmoddi4+0x28a>
 80008c4:	2100      	movs	r1, #0
 80008c6:	e9c6 0500 	strd	r0, r5, [r6]
 80008ca:	4608      	mov	r0, r1
 80008cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d0:	fab3 f183 	clz	r1, r3
 80008d4:	2900      	cmp	r1, #0
 80008d6:	d149      	bne.n	800096c <__udivmoddi4+0x158>
 80008d8:	42ab      	cmp	r3, r5
 80008da:	d302      	bcc.n	80008e2 <__udivmoddi4+0xce>
 80008dc:	4282      	cmp	r2, r0
 80008de:	f200 80f8 	bhi.w	8000ad2 <__udivmoddi4+0x2be>
 80008e2:	1a84      	subs	r4, r0, r2
 80008e4:	eb65 0203 	sbc.w	r2, r5, r3
 80008e8:	2001      	movs	r0, #1
 80008ea:	4617      	mov	r7, r2
 80008ec:	2e00      	cmp	r6, #0
 80008ee:	d0e2      	beq.n	80008b6 <__udivmoddi4+0xa2>
 80008f0:	e9c6 4700 	strd	r4, r7, [r6]
 80008f4:	e7df      	b.n	80008b6 <__udivmoddi4+0xa2>
 80008f6:	b902      	cbnz	r2, 80008fa <__udivmoddi4+0xe6>
 80008f8:	deff      	udf	#255	; 0xff
 80008fa:	fab2 f382 	clz	r3, r2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	f040 8090 	bne.w	8000a24 <__udivmoddi4+0x210>
 8000904:	1a8a      	subs	r2, r1, r2
 8000906:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800090a:	fa1f fe8c 	uxth.w	lr, ip
 800090e:	2101      	movs	r1, #1
 8000910:	fbb2 f5f7 	udiv	r5, r2, r7
 8000914:	fb07 2015 	mls	r0, r7, r5, r2
 8000918:	0c22      	lsrs	r2, r4, #16
 800091a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800091e:	fb0e f005 	mul.w	r0, lr, r5
 8000922:	4290      	cmp	r0, r2
 8000924:	d908      	bls.n	8000938 <__udivmoddi4+0x124>
 8000926:	eb1c 0202 	adds.w	r2, ip, r2
 800092a:	f105 38ff 	add.w	r8, r5, #4294967295
 800092e:	d202      	bcs.n	8000936 <__udivmoddi4+0x122>
 8000930:	4290      	cmp	r0, r2
 8000932:	f200 80cb 	bhi.w	8000acc <__udivmoddi4+0x2b8>
 8000936:	4645      	mov	r5, r8
 8000938:	1a12      	subs	r2, r2, r0
 800093a:	b2a4      	uxth	r4, r4
 800093c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000940:	fb07 2210 	mls	r2, r7, r0, r2
 8000944:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000948:	fb0e fe00 	mul.w	lr, lr, r0
 800094c:	45a6      	cmp	lr, r4
 800094e:	d908      	bls.n	8000962 <__udivmoddi4+0x14e>
 8000950:	eb1c 0404 	adds.w	r4, ip, r4
 8000954:	f100 32ff 	add.w	r2, r0, #4294967295
 8000958:	d202      	bcs.n	8000960 <__udivmoddi4+0x14c>
 800095a:	45a6      	cmp	lr, r4
 800095c:	f200 80bb 	bhi.w	8000ad6 <__udivmoddi4+0x2c2>
 8000960:	4610      	mov	r0, r2
 8000962:	eba4 040e 	sub.w	r4, r4, lr
 8000966:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800096a:	e79f      	b.n	80008ac <__udivmoddi4+0x98>
 800096c:	f1c1 0720 	rsb	r7, r1, #32
 8000970:	408b      	lsls	r3, r1
 8000972:	fa22 fc07 	lsr.w	ip, r2, r7
 8000976:	ea4c 0c03 	orr.w	ip, ip, r3
 800097a:	fa05 f401 	lsl.w	r4, r5, r1
 800097e:	fa20 f307 	lsr.w	r3, r0, r7
 8000982:	40fd      	lsrs	r5, r7
 8000984:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000988:	4323      	orrs	r3, r4
 800098a:	fbb5 f8f9 	udiv	r8, r5, r9
 800098e:	fa1f fe8c 	uxth.w	lr, ip
 8000992:	fb09 5518 	mls	r5, r9, r8, r5
 8000996:	0c1c      	lsrs	r4, r3, #16
 8000998:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800099c:	fb08 f50e 	mul.w	r5, r8, lr
 80009a0:	42a5      	cmp	r5, r4
 80009a2:	fa02 f201 	lsl.w	r2, r2, r1
 80009a6:	fa00 f001 	lsl.w	r0, r0, r1
 80009aa:	d90b      	bls.n	80009c4 <__udivmoddi4+0x1b0>
 80009ac:	eb1c 0404 	adds.w	r4, ip, r4
 80009b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80009b4:	f080 8088 	bcs.w	8000ac8 <__udivmoddi4+0x2b4>
 80009b8:	42a5      	cmp	r5, r4
 80009ba:	f240 8085 	bls.w	8000ac8 <__udivmoddi4+0x2b4>
 80009be:	f1a8 0802 	sub.w	r8, r8, #2
 80009c2:	4464      	add	r4, ip
 80009c4:	1b64      	subs	r4, r4, r5
 80009c6:	b29d      	uxth	r5, r3
 80009c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80009cc:	fb09 4413 	mls	r4, r9, r3, r4
 80009d0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009d4:	fb03 fe0e 	mul.w	lr, r3, lr
 80009d8:	45a6      	cmp	lr, r4
 80009da:	d908      	bls.n	80009ee <__udivmoddi4+0x1da>
 80009dc:	eb1c 0404 	adds.w	r4, ip, r4
 80009e0:	f103 35ff 	add.w	r5, r3, #4294967295
 80009e4:	d26c      	bcs.n	8000ac0 <__udivmoddi4+0x2ac>
 80009e6:	45a6      	cmp	lr, r4
 80009e8:	d96a      	bls.n	8000ac0 <__udivmoddi4+0x2ac>
 80009ea:	3b02      	subs	r3, #2
 80009ec:	4464      	add	r4, ip
 80009ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009f2:	fba3 9502 	umull	r9, r5, r3, r2
 80009f6:	eba4 040e 	sub.w	r4, r4, lr
 80009fa:	42ac      	cmp	r4, r5
 80009fc:	46c8      	mov	r8, r9
 80009fe:	46ae      	mov	lr, r5
 8000a00:	d356      	bcc.n	8000ab0 <__udivmoddi4+0x29c>
 8000a02:	d053      	beq.n	8000aac <__udivmoddi4+0x298>
 8000a04:	b156      	cbz	r6, 8000a1c <__udivmoddi4+0x208>
 8000a06:	ebb0 0208 	subs.w	r2, r0, r8
 8000a0a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a12:	40ca      	lsrs	r2, r1
 8000a14:	40cc      	lsrs	r4, r1
 8000a16:	4317      	orrs	r7, r2
 8000a18:	e9c6 7400 	strd	r7, r4, [r6]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	2100      	movs	r1, #0
 8000a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a24:	f1c3 0120 	rsb	r1, r3, #32
 8000a28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a2c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a30:	fa25 f101 	lsr.w	r1, r5, r1
 8000a34:	409d      	lsls	r5, r3
 8000a36:	432a      	orrs	r2, r5
 8000a38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a3c:	fa1f fe8c 	uxth.w	lr, ip
 8000a40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a44:	fb07 1510 	mls	r5, r7, r0, r1
 8000a48:	0c11      	lsrs	r1, r2, #16
 8000a4a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a4e:	fb00 f50e 	mul.w	r5, r0, lr
 8000a52:	428d      	cmp	r5, r1
 8000a54:	fa04 f403 	lsl.w	r4, r4, r3
 8000a58:	d908      	bls.n	8000a6c <__udivmoddi4+0x258>
 8000a5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000a5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a62:	d22f      	bcs.n	8000ac4 <__udivmoddi4+0x2b0>
 8000a64:	428d      	cmp	r5, r1
 8000a66:	d92d      	bls.n	8000ac4 <__udivmoddi4+0x2b0>
 8000a68:	3802      	subs	r0, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	1b49      	subs	r1, r1, r5
 8000a6e:	b292      	uxth	r2, r2
 8000a70:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a74:	fb07 1115 	mls	r1, r7, r5, r1
 8000a78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a7c:	fb05 f10e 	mul.w	r1, r5, lr
 8000a80:	4291      	cmp	r1, r2
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x282>
 8000a84:	eb1c 0202 	adds.w	r2, ip, r2
 8000a88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a8c:	d216      	bcs.n	8000abc <__udivmoddi4+0x2a8>
 8000a8e:	4291      	cmp	r1, r2
 8000a90:	d914      	bls.n	8000abc <__udivmoddi4+0x2a8>
 8000a92:	3d02      	subs	r5, #2
 8000a94:	4462      	add	r2, ip
 8000a96:	1a52      	subs	r2, r2, r1
 8000a98:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a9c:	e738      	b.n	8000910 <__udivmoddi4+0xfc>
 8000a9e:	4631      	mov	r1, r6
 8000aa0:	4630      	mov	r0, r6
 8000aa2:	e708      	b.n	80008b6 <__udivmoddi4+0xa2>
 8000aa4:	4639      	mov	r1, r7
 8000aa6:	e6e6      	b.n	8000876 <__udivmoddi4+0x62>
 8000aa8:	4610      	mov	r0, r2
 8000aaa:	e6fb      	b.n	80008a4 <__udivmoddi4+0x90>
 8000aac:	4548      	cmp	r0, r9
 8000aae:	d2a9      	bcs.n	8000a04 <__udivmoddi4+0x1f0>
 8000ab0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ab4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	e7a3      	b.n	8000a04 <__udivmoddi4+0x1f0>
 8000abc:	4645      	mov	r5, r8
 8000abe:	e7ea      	b.n	8000a96 <__udivmoddi4+0x282>
 8000ac0:	462b      	mov	r3, r5
 8000ac2:	e794      	b.n	80009ee <__udivmoddi4+0x1da>
 8000ac4:	4640      	mov	r0, r8
 8000ac6:	e7d1      	b.n	8000a6c <__udivmoddi4+0x258>
 8000ac8:	46d0      	mov	r8, sl
 8000aca:	e77b      	b.n	80009c4 <__udivmoddi4+0x1b0>
 8000acc:	3d02      	subs	r5, #2
 8000ace:	4462      	add	r2, ip
 8000ad0:	e732      	b.n	8000938 <__udivmoddi4+0x124>
 8000ad2:	4608      	mov	r0, r1
 8000ad4:	e70a      	b.n	80008ec <__udivmoddi4+0xd8>
 8000ad6:	4464      	add	r4, ip
 8000ad8:	3802      	subs	r0, #2
 8000ada:	e742      	b.n	8000962 <__udivmoddi4+0x14e>

08000adc <__aeabi_idiv0>:
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <iBus_Check_CHKSUM>:


#include "FS-iA6B.h"

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8000aec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000af0:	81fb      	strh	r3, [r7, #14]

	for(int i=0;i<len-2;i++)
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	e00a      	b.n	8000b0e <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	89fa      	ldrh	r2, [r7, #14]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<len-2;i++)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	78fb      	ldrb	r3, [r7, #3]
 8000b10:	3b02      	subs	r3, #2
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dbef      	blt.n	8000af8 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8)==data[31]);
 8000b18:	89fb      	ldrh	r3, [r7, #14]
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	321e      	adds	r2, #30
 8000b20:	7812      	ldrb	r2, [r2, #0]
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d10a      	bne.n	8000b3c <iBus_Check_CHKSUM+0x5c>
 8000b26:	89fb      	ldrh	r3, [r7, #14]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	331f      	adds	r3, #31
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d101      	bne.n	8000b3c <iBus_Check_CHKSUM+0x5c>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e000      	b.n	8000b3e <iBus_Check_CHKSUM+0x5e>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	b2db      	uxtb	r3, r3
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <__NVIC_GetPriorityGrouping+0x18>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	f003 0307 	and.w	r3, r3, #7
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	db0b      	blt.n	8000b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	f003 021f 	and.w	r2, r3, #31
 8000b80:	4907      	ldr	r1, [pc, #28]	; (8000ba0 <__NVIC_EnableIRQ+0x38>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	095b      	lsrs	r3, r3, #5
 8000b88:	2001      	movs	r0, #1
 8000b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000e100 	.word	0xe000e100

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db0a      	blt.n	8000bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	490c      	ldr	r1, [pc, #48]	; (8000bf0 <__NVIC_SetPriority+0x4c>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bcc:	e00a      	b.n	8000be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4908      	ldr	r1, [pc, #32]	; (8000bf4 <__NVIC_SetPriority+0x50>)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	3b04      	subs	r3, #4
 8000bdc:	0112      	lsls	r2, r2, #4
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	440b      	add	r3, r1
 8000be2:	761a      	strb	r2, [r3, #24]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000e100 	.word	0xe000e100
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	; 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f1c3 0307 	rsb	r3, r3, #7
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	bf28      	it	cs
 8000c16:	2304      	movcs	r3, #4
 8000c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d902      	bls.n	8000c28 <NVIC_EncodePriority+0x30>
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3b03      	subs	r3, #3
 8000c26:	e000      	b.n	8000c2a <NVIC_EncodePriority+0x32>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43da      	mvns	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	4313      	orrs	r3, r2
         );
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	; 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	60da      	str	r2, [r3, #12]
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	615a      	str	r2, [r3, #20]
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b089      	sub	sp, #36	; 0x24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	330c      	adds	r3, #12
 8000cb6:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	e853 3f00 	ldrex	r3, [r3]
 8000cbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	f043 0320 	orr.w	r3, r3, #32
 8000cc6:	61fb      	str	r3, [r7, #28]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	330c      	adds	r3, #12
 8000ccc:	69fa      	ldr	r2, [r7, #28]
 8000cce:	61ba      	str	r2, [r7, #24]
 8000cd0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000cd2:	6979      	ldr	r1, [r7, #20]
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	e841 2300 	strex	r3, r2, [r1]
 8000cda:	613b      	str	r3, [r7, #16]
   return(result);
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1e7      	bne.n	8000cb2 <LL_USART_EnableIT_RXNE+0x8>
}
 8000ce2:	bf00      	nop
 8000ce4:	bf00      	nop
 8000ce6:	3724      	adds	r7, #36	; 0x24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cfc:	4907      	ldr	r1, [pc, #28]	; (8000d1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	40023800 	.word	0x40023800

08000d20 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d2c:	4907      	ldr	r1, [pc, #28]	; (8000d4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	40023800 	.word	0x40023800

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b5b0      	push	{r4, r5, r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d54:	f000 fe32 	bl	80019bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d58:	f000 fa2c 	bl	80011b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5c:	f000 fbca 	bl	80014f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d60:	f000 fb3e 	bl	80013e0 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000d64:	f000 fb9c 	bl	80014a0 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000d68:	f000 fa8e 	bl	8001288 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  LL_USART_EnableIT_RXNE(USART2);
 8000d6c:	484b      	ldr	r0, [pc, #300]	; (8000e9c <main+0x14c>)
 8000d6e:	f7ff ff9c 	bl	8000caa <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART6);
 8000d72:	484b      	ldr	r0, [pc, #300]	; (8000ea0 <main+0x150>)
 8000d74:	f7ff ff99 	bl	8000caa <LL_USART_EnableIT_RXNE>


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);   // Output PWM Generation
 8000d78:	2100      	movs	r1, #0
 8000d7a:	484a      	ldr	r0, [pc, #296]	; (8000ea4 <main+0x154>)
 8000d7c:	f001 feec 	bl	8002b58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);   // Output PWM Generation
 8000d80:	2104      	movs	r1, #4
 8000d82:	4848      	ldr	r0, [pc, #288]	; (8000ea4 <main+0x154>)
 8000d84:	f001 fee8 	bl	8002b58 <HAL_TIM_PWM_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if(ibus_rx_cplt_flag == 1)
 8000d88:	4b47      	ldr	r3, [pc, #284]	; (8000ea8 <main+0x158>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d17a      	bne.n	8000e86 <main+0x136>
	  {
		  ibus_rx_cplt_flag = 0;
 8000d90:	4b45      	ldr	r3, [pc, #276]	; (8000ea8 <main+0x158>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
		  if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 8000d96:	2120      	movs	r1, #32
 8000d98:	4844      	ldr	r0, [pc, #272]	; (8000eac <main+0x15c>)
 8000d9a:	f7ff fea1 	bl	8000ae0 <iBus_Check_CHKSUM>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d170      	bne.n	8000e86 <main+0x136>
		  {
		  	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000da4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da8:	4841      	ldr	r0, [pc, #260]	; (8000eb0 <main+0x160>)
 8000daa:	f001 f9ba 	bl	8002122 <HAL_GPIO_TogglePin>
			  	rxValues[0] = (ibus_rx_buf[2] | ibus_rx_buf[3]<<8);
 8000dae:	4b3f      	ldr	r3, [pc, #252]	; (8000eac <main+0x15c>)
 8000db0:	789b      	ldrb	r3, [r3, #2]
 8000db2:	b21a      	sxth	r2, r3
 8000db4:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <main+0x15c>)
 8000db6:	78db      	ldrb	r3, [r3, #3]
 8000db8:	021b      	lsls	r3, r3, #8
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	4b3c      	ldr	r3, [pc, #240]	; (8000eb4 <main+0x164>)
 8000dc4:	801a      	strh	r2, [r3, #0]
			  	rxValues[1] = (ibus_rx_buf[4] | ibus_rx_buf[5]<<8);
 8000dc6:	4b39      	ldr	r3, [pc, #228]	; (8000eac <main+0x15c>)
 8000dc8:	791b      	ldrb	r3, [r3, #4]
 8000dca:	b21a      	sxth	r2, r3
 8000dcc:	4b37      	ldr	r3, [pc, #220]	; (8000eac <main+0x15c>)
 8000dce:	795b      	ldrb	r3, [r3, #5]
 8000dd0:	021b      	lsls	r3, r3, #8
 8000dd2:	b21b      	sxth	r3, r3
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	b21b      	sxth	r3, r3
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	4b36      	ldr	r3, [pc, #216]	; (8000eb4 <main+0x164>)
 8000ddc:	805a      	strh	r2, [r3, #2]
			  	rxValues[2] = (ibus_rx_buf[6] | ibus_rx_buf[7]<<8);
 8000dde:	4b33      	ldr	r3, [pc, #204]	; (8000eac <main+0x15c>)
 8000de0:	799b      	ldrb	r3, [r3, #6]
 8000de2:	b21a      	sxth	r2, r3
 8000de4:	4b31      	ldr	r3, [pc, #196]	; (8000eac <main+0x15c>)
 8000de6:	79db      	ldrb	r3, [r3, #7]
 8000de8:	021b      	lsls	r3, r3, #8
 8000dea:	b21b      	sxth	r3, r3
 8000dec:	4313      	orrs	r3, r2
 8000dee:	b21b      	sxth	r3, r3
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	4b30      	ldr	r3, [pc, #192]	; (8000eb4 <main+0x164>)
 8000df4:	809a      	strh	r2, [r3, #4]
			  	rxValues[3] = (ibus_rx_buf[8] | ibus_rx_buf[9]<<8);
 8000df6:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <main+0x15c>)
 8000df8:	7a1b      	ldrb	r3, [r3, #8]
 8000dfa:	b21a      	sxth	r2, r3
 8000dfc:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <main+0x15c>)
 8000dfe:	7a5b      	ldrb	r3, [r3, #9]
 8000e00:	021b      	lsls	r3, r3, #8
 8000e02:	b21b      	sxth	r3, r3
 8000e04:	4313      	orrs	r3, r2
 8000e06:	b21b      	sxth	r3, r3
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <main+0x164>)
 8000e0c:	80da      	strh	r2, [r3, #6]
			  	rxValues[4] = (ibus_rx_buf[10] | ibus_rx_buf[11]<<8);
 8000e0e:	4b27      	ldr	r3, [pc, #156]	; (8000eac <main+0x15c>)
 8000e10:	7a9b      	ldrb	r3, [r3, #10]
 8000e12:	b21a      	sxth	r2, r3
 8000e14:	4b25      	ldr	r3, [pc, #148]	; (8000eac <main+0x15c>)
 8000e16:	7adb      	ldrb	r3, [r3, #11]
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <main+0x164>)
 8000e24:	811a      	strh	r2, [r3, #8]
			  	rxValues[5] = (ibus_rx_buf[12] | ibus_rx_buf[13]<<8);
 8000e26:	4b21      	ldr	r3, [pc, #132]	; (8000eac <main+0x15c>)
 8000e28:	7b1b      	ldrb	r3, [r3, #12]
 8000e2a:	b21a      	sxth	r2, r3
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <main+0x15c>)
 8000e2e:	7b5b      	ldrb	r3, [r3, #13]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	b21b      	sxth	r3, r3
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <main+0x164>)
 8000e3c:	815a      	strh	r2, [r3, #10]
			  	rxValues[6] = (ibus_rx_buf[14] | ibus_rx_buf[15]<<8);
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <main+0x15c>)
 8000e40:	7b9b      	ldrb	r3, [r3, #14]
 8000e42:	b21a      	sxth	r2, r3
 8000e44:	4b19      	ldr	r3, [pc, #100]	; (8000eac <main+0x15c>)
 8000e46:	7bdb      	ldrb	r3, [r3, #15]
 8000e48:	021b      	lsls	r3, r3, #8
 8000e4a:	b21b      	sxth	r3, r3
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <main+0x164>)
 8000e54:	819a      	strh	r2, [r3, #12]
			  	rxValues[7] = (ibus_rx_buf[18] | ibus_rx_buf[19]<<8);
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <main+0x15c>)
 8000e58:	7c9b      	ldrb	r3, [r3, #18]
 8000e5a:	b21a      	sxth	r2, r3
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <main+0x15c>)
 8000e5e:	7cdb      	ldrb	r3, [r3, #19]
 8000e60:	021b      	lsls	r3, r3, #8
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	4313      	orrs	r3, r2
 8000e66:	b21b      	sxth	r3, r3
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <main+0x164>)
 8000e6c:	81da      	strh	r2, [r3, #14]
//						(1000 <= rxValues[5] && rxValues[5] <= 2000)&&
//						(1000 <= rxValues[6] && rxValues[6] <= 2000)&&
//						(1000 <= rxValues[7] && rxValues[7] <= 2000)))
//			  	{continue;}

			  	if(rxValues[7] < 1500){HAL_UART_Transmit(&huart6, ibus_rx_buf, 32, 100);}
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <main+0x164>)
 8000e70:	89db      	ldrh	r3, [r3, #14]
 8000e72:	f240 52db 	movw	r2, #1499	; 0x5db
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d805      	bhi.n	8000e86 <main+0x136>
 8000e7a:	2364      	movs	r3, #100	; 0x64
 8000e7c:	2220      	movs	r2, #32
 8000e7e:	490b      	ldr	r1, [pc, #44]	; (8000eac <main+0x15c>)
 8000e80:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <main+0x168>)
 8000e82:	f002 fc8b 	bl	800379c <HAL_UART_Transmit>

		  }

	  }

	  if(rxValues[6] > 1500){ LED = 1;}
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <main+0x164>)
 8000e88:	899b      	ldrh	r3, [r3, #12]
 8000e8a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d916      	bls.n	8000ec0 <main+0x170>
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <main+0x16c>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	801a      	strh	r2, [r3, #0]
 8000e98:	e015      	b.n	8000ec6 <main+0x176>
 8000e9a:	bf00      	nop
 8000e9c:	40004400 	.word	0x40004400
 8000ea0:	40011400 	.word	0x40011400
 8000ea4:	20000034 	.word	0x20000034
 8000ea8:	20000114 	.word	0x20000114
 8000eac:	200000f4 	.word	0x200000f4
 8000eb0:	40020800 	.word	0x40020800
 8000eb4:	200000c4 	.word	0x200000c4
 8000eb8:	2000007c 	.word	0x2000007c
 8000ebc:	200000d4 	.word	0x200000d4
	  else {LED = 0;}
 8000ec0:	4ba9      	ldr	r3, [pc, #676]	; (8001168 <main+0x418>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	801a      	strh	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, LED);
 8000ec6:	4ba8      	ldr	r3, [pc, #672]	; (8001168 <main+0x418>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	461a      	mov	r2, r3
 8000ece:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed2:	48a6      	ldr	r0, [pc, #664]	; (800116c <main+0x41c>)
 8000ed4:	f001 f90c 	bl	80020f0 <HAL_GPIO_WritePin>

	  if(rxValues[7] < 1500){continue;}
 8000ed8:	4ba5      	ldr	r3, [pc, #660]	; (8001170 <main+0x420>)
 8000eda:	89db      	ldrh	r3, [r3, #14]
 8000edc:	f240 52db 	movw	r2, #1499	; 0x5db
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	f240 8137 	bls.w	8001154 <main+0x404>

	  speed = rxValues[2];
 8000ee6:	4ba2      	ldr	r3, [pc, #648]	; (8001170 <main+0x420>)
 8000ee8:	889b      	ldrh	r3, [r3, #4]
 8000eea:	b21a      	sxth	r2, r3
 8000eec:	4ba1      	ldr	r3, [pc, #644]	; (8001174 <main+0x424>)
 8000eee:	801a      	strh	r2, [r3, #0]
	  steering = rxValues[0];
 8000ef0:	4b9f      	ldr	r3, [pc, #636]	; (8001170 <main+0x420>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	b21a      	sxth	r2, r3
 8000ef6:	4ba0      	ldr	r3, [pc, #640]	; (8001178 <main+0x428>)
 8000ef8:	801a      	strh	r2, [r3, #0]
//	  movingSum = movingSum/window_size;
//	  window_index = (window_index + 1)%window_size;
//	  speed = movingSum;

	  //smoothing
	  smoothing = speed*0.20 + smoothingPrev*0.80;
 8000efa:	4b9e      	ldr	r3, [pc, #632]	; (8001174 <main+0x424>)
 8000efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fbe5 	bl	80006d0 <__aeabi_i2d>
 8000f06:	a394      	add	r3, pc, #592	; (adr r3, 8001158 <main+0x408>)
 8000f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0c:	f7ff f964 	bl	80001d8 <__aeabi_dmul>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	4614      	mov	r4, r2
 8000f16:	461d      	mov	r5, r3
 8000f18:	4b98      	ldr	r3, [pc, #608]	; (800117c <main+0x42c>)
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fbd7 	bl	80006d0 <__aeabi_i2d>
 8000f22:	a38f      	add	r3, pc, #572	; (adr r3, 8001160 <main+0x410>)
 8000f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f28:	f7ff f956 	bl	80001d8 <__aeabi_dmul>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4620      	mov	r0, r4
 8000f32:	4629      	mov	r1, r5
 8000f34:	f7ff fa80 	bl	8000438 <__adddf3>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f7ff fc30 	bl	80007a4 <__aeabi_d2uiz>
 8000f44:	4603      	mov	r3, r0
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	4b8d      	ldr	r3, [pc, #564]	; (8001180 <main+0x430>)
 8000f4a:	801a      	strh	r2, [r3, #0]
	  smoothingPrev = smoothing;
 8000f4c:	4b8c      	ldr	r3, [pc, #560]	; (8001180 <main+0x430>)
 8000f4e:	881a      	ldrh	r2, [r3, #0]
 8000f50:	4b8a      	ldr	r3, [pc, #552]	; (800117c <main+0x42c>)
 8000f52:	801a      	strh	r2, [r3, #0]
	  speed = smoothing;
 8000f54:	4b8a      	ldr	r3, [pc, #552]	; (8001180 <main+0x430>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	b21a      	sxth	r2, r3
 8000f5a:	4b86      	ldr	r3, [pc, #536]	; (8001174 <main+0x424>)
 8000f5c:	801a      	strh	r2, [r3, #0]

	  smoothing1 = steering*0.20 + smoothingPrev1*0.80;
 8000f5e:	4b86      	ldr	r3, [pc, #536]	; (8001178 <main+0x428>)
 8000f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fbb3 	bl	80006d0 <__aeabi_i2d>
 8000f6a:	a37b      	add	r3, pc, #492	; (adr r3, 8001158 <main+0x408>)
 8000f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f70:	f7ff f932 	bl	80001d8 <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4614      	mov	r4, r2
 8000f7a:	461d      	mov	r5, r3
 8000f7c:	4b81      	ldr	r3, [pc, #516]	; (8001184 <main+0x434>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fba5 	bl	80006d0 <__aeabi_i2d>
 8000f86:	a376      	add	r3, pc, #472	; (adr r3, 8001160 <main+0x410>)
 8000f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8c:	f7ff f924 	bl	80001d8 <__aeabi_dmul>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4620      	mov	r0, r4
 8000f96:	4629      	mov	r1, r5
 8000f98:	f7ff fa4e 	bl	8000438 <__adddf3>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f7ff fbfe 	bl	80007a4 <__aeabi_d2uiz>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	4b76      	ldr	r3, [pc, #472]	; (8001188 <main+0x438>)
 8000fae:	801a      	strh	r2, [r3, #0]
	  smoothingPrev1 = smoothing1;
 8000fb0:	4b75      	ldr	r3, [pc, #468]	; (8001188 <main+0x438>)
 8000fb2:	881a      	ldrh	r2, [r3, #0]
 8000fb4:	4b73      	ldr	r3, [pc, #460]	; (8001184 <main+0x434>)
 8000fb6:	801a      	strh	r2, [r3, #0]
	  steering = smoothing1;
 8000fb8:	4b73      	ldr	r3, [pc, #460]	; (8001188 <main+0x438>)
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	4b6e      	ldr	r3, [pc, #440]	; (8001178 <main+0x428>)
 8000fc0:	801a      	strh	r2, [r3, #0]
//
	  speed = speed - 1500;
 8000fc2:	4b6c      	ldr	r3, [pc, #432]	; (8001174 <main+0x424>)
 8000fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	4b68      	ldr	r3, [pc, #416]	; (8001174 <main+0x424>)
 8000fd4:	801a      	strh	r2, [r3, #0]
	  steering = steering - 1500;
 8000fd6:	4b68      	ldr	r3, [pc, #416]	; (8001178 <main+0x428>)
 8000fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	4b64      	ldr	r3, [pc, #400]	; (8001178 <main+0x428>)
 8000fe8:	801a      	strh	r2, [r3, #0]
	  if (speed > -50 && speed < 50){speed = 0;}
 8000fea:	4b62      	ldr	r3, [pc, #392]	; (8001174 <main+0x424>)
 8000fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff0:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8000ff4:	db07      	blt.n	8001006 <main+0x2b6>
 8000ff6:	4b5f      	ldr	r3, [pc, #380]	; (8001174 <main+0x424>)
 8000ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffc:	2b31      	cmp	r3, #49	; 0x31
 8000ffe:	dc02      	bgt.n	8001006 <main+0x2b6>
 8001000:	4b5c      	ldr	r3, [pc, #368]	; (8001174 <main+0x424>)
 8001002:	2200      	movs	r2, #0
 8001004:	801a      	strh	r2, [r3, #0]
	  if (steering > -50 && steering < 50){steering = 0;}
 8001006:	4b5c      	ldr	r3, [pc, #368]	; (8001178 <main+0x428>)
 8001008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100c:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8001010:	db07      	blt.n	8001022 <main+0x2d2>
 8001012:	4b59      	ldr	r3, [pc, #356]	; (8001178 <main+0x428>)
 8001014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001018:	2b31      	cmp	r3, #49	; 0x31
 800101a:	dc02      	bgt.n	8001022 <main+0x2d2>
 800101c:	4b56      	ldr	r3, [pc, #344]	; (8001178 <main+0x428>)
 800101e:	2200      	movs	r2, #0
 8001020:	801a      	strh	r2, [r3, #0]
//		  directionR = direction;
//		  directionL = !direction;

		  ////////////////////////////////////////////////

		  directionL = 0;
 8001022:	4b5a      	ldr	r3, [pc, #360]	; (800118c <main+0x43c>)
 8001024:	2200      	movs	r2, #0
 8001026:	801a      	strh	r2, [r3, #0]
		  directionR = 0;
 8001028:	4b59      	ldr	r3, [pc, #356]	; (8001190 <main+0x440>)
 800102a:	2200      	movs	r2, #0
 800102c:	801a      	strh	r2, [r3, #0]



		  speedL = speed - (int16_t)(k*steering/500);
 800102e:	4b51      	ldr	r3, [pc, #324]	; (8001174 <main+0x424>)
 8001030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001034:	b29a      	uxth	r2, r3
 8001036:	4b50      	ldr	r3, [pc, #320]	; (8001178 <main+0x428>)
 8001038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103c:	4619      	mov	r1, r3
 800103e:	4b55      	ldr	r3, [pc, #340]	; (8001194 <main+0x444>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	fb01 f303 	mul.w	r3, r1, r3
 8001046:	4954      	ldr	r1, [pc, #336]	; (8001198 <main+0x448>)
 8001048:	fb81 0103 	smull	r0, r1, r1, r3
 800104c:	1149      	asrs	r1, r1, #5
 800104e:	17db      	asrs	r3, r3, #31
 8001050:	1acb      	subs	r3, r1, r3
 8001052:	b29b      	uxth	r3, r3
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	b29b      	uxth	r3, r3
 8001058:	b21a      	sxth	r2, r3
 800105a:	4b50      	ldr	r3, [pc, #320]	; (800119c <main+0x44c>)
 800105c:	801a      	strh	r2, [r3, #0]
		  speedR = speed + (int16_t)(k*steering/500);
 800105e:	4b46      	ldr	r3, [pc, #280]	; (8001178 <main+0x428>)
 8001060:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001064:	461a      	mov	r2, r3
 8001066:	4b4b      	ldr	r3, [pc, #300]	; (8001194 <main+0x444>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	fb02 f303 	mul.w	r3, r2, r3
 800106e:	4a4a      	ldr	r2, [pc, #296]	; (8001198 <main+0x448>)
 8001070:	fb82 1203 	smull	r1, r2, r2, r3
 8001074:	1152      	asrs	r2, r2, #5
 8001076:	17db      	asrs	r3, r3, #31
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	b29a      	uxth	r2, r3
 800107c:	4b3d      	ldr	r3, [pc, #244]	; (8001174 <main+0x424>)
 800107e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001082:	b29b      	uxth	r3, r3
 8001084:	4413      	add	r3, r2
 8001086:	b29b      	uxth	r3, r3
 8001088:	b21a      	sxth	r2, r3
 800108a:	4b45      	ldr	r3, [pc, #276]	; (80011a0 <main+0x450>)
 800108c:	801a      	strh	r2, [r3, #0]


		  if(speedL < 0){
 800108e:	4b43      	ldr	r3, [pc, #268]	; (800119c <main+0x44c>)
 8001090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001094:	2b00      	cmp	r3, #0
 8001096:	da0b      	bge.n	80010b0 <main+0x360>
			  directionL = 1;
 8001098:	4b3c      	ldr	r3, [pc, #240]	; (800118c <main+0x43c>)
 800109a:	2201      	movs	r2, #1
 800109c:	801a      	strh	r2, [r3, #0]
			  speedL = speedL*-1;
 800109e:	4b3f      	ldr	r3, [pc, #252]	; (800119c <main+0x44c>)
 80010a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	425b      	negs	r3, r3
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	4b3b      	ldr	r3, [pc, #236]	; (800119c <main+0x44c>)
 80010ae:	801a      	strh	r2, [r3, #0]
		  }
		  if(speedR < 0){
 80010b0:	4b3b      	ldr	r3, [pc, #236]	; (80011a0 <main+0x450>)
 80010b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	da0b      	bge.n	80010d2 <main+0x382>
			  directionR = 1;
 80010ba:	4b35      	ldr	r3, [pc, #212]	; (8001190 <main+0x440>)
 80010bc:	2201      	movs	r2, #1
 80010be:	801a      	strh	r2, [r3, #0]
			  speedR = speedR*-1;
 80010c0:	4b37      	ldr	r3, [pc, #220]	; (80011a0 <main+0x450>)
 80010c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	425b      	negs	r3, r3
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	4b34      	ldr	r3, [pc, #208]	; (80011a0 <main+0x450>)
 80010d0:	801a      	strh	r2, [r3, #0]
		  }




	  dutyL = (uint16_t) ((speedL*CounterPeriod)/(500 + k));
 80010d2:	4b32      	ldr	r3, [pc, #200]	; (800119c <main+0x44c>)
 80010d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b32      	ldr	r3, [pc, #200]	; (80011a4 <main+0x454>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	fb03 f202 	mul.w	r2, r3, r2
 80010e2:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <main+0x444>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80010ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <main+0x458>)
 80010f4:	601a      	str	r2, [r3, #0]
	  dutyR = (uint16_t) ((speedR*CounterPeriod)/(500 + k));
 80010f6:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <main+0x450>)
 80010f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b29      	ldr	r3, [pc, #164]	; (80011a4 <main+0x454>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	fb03 f202 	mul.w	r2, r3, r2
 8001106:	4b23      	ldr	r3, [pc, #140]	; (8001194 <main+0x444>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800110e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001112:	b29b      	uxth	r3, r3
 8001114:	461a      	mov	r2, r3
 8001116:	4b25      	ldr	r3, [pc, #148]	; (80011ac <main+0x45c>)
 8001118:	601a      	str	r2, [r3, #0]
	  TIM1->CCR1 = dutyL;
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <main+0x458>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <main+0x460>)
 8001120:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1->CCR2 = dutyR;
 8001122:	4b22      	ldr	r3, [pc, #136]	; (80011ac <main+0x45c>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <main+0x460>)
 8001128:	639a      	str	r2, [r3, #56]	; 0x38
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, directionL);
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <main+0x43c>)
 800112c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	461a      	mov	r2, r3
 8001134:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001138:	480c      	ldr	r0, [pc, #48]	; (800116c <main+0x41c>)
 800113a:	f000 ffd9 	bl	80020f0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, directionR);
 800113e:	4b14      	ldr	r3, [pc, #80]	; (8001190 <main+0x440>)
 8001140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	461a      	mov	r2, r3
 8001148:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800114c:	4807      	ldr	r0, [pc, #28]	; (800116c <main+0x41c>)
 800114e:	f000 ffcf 	bl	80020f0 <HAL_GPIO_WritePin>
 8001152:	e619      	b.n	8000d88 <main+0x38>
	  if(rxValues[7] < 1500){continue;}
 8001154:	bf00      	nop
	  if(ibus_rx_cplt_flag == 1)
 8001156:	e617      	b.n	8000d88 <main+0x38>
 8001158:	9999999a 	.word	0x9999999a
 800115c:	3fc99999 	.word	0x3fc99999
 8001160:	9999999a 	.word	0x9999999a
 8001164:	3fe99999 	.word	0x3fe99999
 8001168:	200000d4 	.word	0x200000d4
 800116c:	40020400 	.word	0x40020400
 8001170:	200000c4 	.word	0x200000c4
 8001174:	200000e0 	.word	0x200000e0
 8001178:	200000e6 	.word	0x200000e6
 800117c:	20000002 	.word	0x20000002
 8001180:	200000ec 	.word	0x200000ec
 8001184:	20000004 	.word	0x20000004
 8001188:	200000ee 	.word	0x200000ee
 800118c:	200000e8 	.word	0x200000e8
 8001190:	200000ea 	.word	0x200000ea
 8001194:	20000008 	.word	0x20000008
 8001198:	10624dd3 	.word	0x10624dd3
 800119c:	200000e2 	.word	0x200000e2
 80011a0:	200000e4 	.word	0x200000e4
 80011a4:	20000000 	.word	0x20000000
 80011a8:	200000d8 	.word	0x200000d8
 80011ac:	200000dc 	.word	0x200000dc
 80011b0:	40010000 	.word	0x40010000

080011b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b094      	sub	sp, #80	; 0x50
 80011b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	f107 0320 	add.w	r3, r7, #32
 80011be:	2230      	movs	r2, #48	; 0x30
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f004 f86e 	bl	80052a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	4b28      	ldr	r3, [pc, #160]	; (8001280 <SystemClock_Config+0xcc>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	4a27      	ldr	r2, [pc, #156]	; (8001280 <SystemClock_Config+0xcc>)
 80011e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e6:	6413      	str	r3, [r2, #64]	; 0x40
 80011e8:	4b25      	ldr	r3, [pc, #148]	; (8001280 <SystemClock_Config+0xcc>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	4b22      	ldr	r3, [pc, #136]	; (8001284 <SystemClock_Config+0xd0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001200:	4a20      	ldr	r2, [pc, #128]	; (8001284 <SystemClock_Config+0xd0>)
 8001202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <SystemClock_Config+0xd0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001214:	2302      	movs	r3, #2
 8001216:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001218:	2301      	movs	r3, #1
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800121c:	2310      	movs	r3, #16
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001220:	2302      	movs	r3, #2
 8001222:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001224:	2300      	movs	r3, #0
 8001226:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001228:	2308      	movs	r3, #8
 800122a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800122c:	2348      	movs	r3, #72	; 0x48
 800122e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001230:	2302      	movs	r3, #2
 8001232:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001234:	2304      	movs	r3, #4
 8001236:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001238:	f107 0320 	add.w	r3, r7, #32
 800123c:	4618      	mov	r0, r3
 800123e:	f000 ff8b 	bl	8002158 <HAL_RCC_OscConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001248:	f000 f9cc 	bl	80015e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124c:	230f      	movs	r3, #15
 800124e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001250:	2302      	movs	r3, #2
 8001252:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	2102      	movs	r1, #2
 8001268:	4618      	mov	r0, r3
 800126a:	f001 f9ed 	bl	8002648 <HAL_RCC_ClockConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001274:	f000 f9b6 	bl	80015e4 <Error_Handler>
  }
}
 8001278:	bf00      	nop
 800127a:	3750      	adds	r7, #80	; 0x50
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40023800 	.word	0x40023800
 8001284:	40007000 	.word	0x40007000

08001288 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b096      	sub	sp, #88	; 0x58
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]
 80012b6:	615a      	str	r2, [r3, #20]
 80012b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2220      	movs	r2, #32
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f003 ffef 	bl	80052a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012c6:	4b44      	ldr	r3, [pc, #272]	; (80013d8 <MX_TIM1_Init+0x150>)
 80012c8:	4a44      	ldr	r2, [pc, #272]	; (80013dc <MX_TIM1_Init+0x154>)
 80012ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012cc:	4b42      	ldr	r3, [pc, #264]	; (80013d8 <MX_TIM1_Init+0x150>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d2:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <MX_TIM1_Init+0x150>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7200;
 80012d8:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <MX_TIM1_Init+0x150>)
 80012da:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80012de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b3d      	ldr	r3, [pc, #244]	; (80013d8 <MX_TIM1_Init+0x150>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012e6:	4b3c      	ldr	r3, [pc, #240]	; (80013d8 <MX_TIM1_Init+0x150>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ec:	4b3a      	ldr	r3, [pc, #232]	; (80013d8 <MX_TIM1_Init+0x150>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012f2:	4839      	ldr	r0, [pc, #228]	; (80013d8 <MX_TIM1_Init+0x150>)
 80012f4:	f001 fb88 	bl	8002a08 <HAL_TIM_Base_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012fe:	f000 f971 	bl	80015e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001306:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001308:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800130c:	4619      	mov	r1, r3
 800130e:	4832      	ldr	r0, [pc, #200]	; (80013d8 <MX_TIM1_Init+0x150>)
 8001310:	f001 fd94 	bl	8002e3c <HAL_TIM_ConfigClockSource>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800131a:	f000 f963 	bl	80015e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800131e:	482e      	ldr	r0, [pc, #184]	; (80013d8 <MX_TIM1_Init+0x150>)
 8001320:	f001 fbc1 	bl	8002aa6 <HAL_TIM_PWM_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800132a:	f000 f95b 	bl	80015e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001336:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800133a:	4619      	mov	r1, r3
 800133c:	4826      	ldr	r0, [pc, #152]	; (80013d8 <MX_TIM1_Init+0x150>)
 800133e:	f002 f91d 	bl	800357c <HAL_TIMEx_MasterConfigSynchronization>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001348:	f000 f94c 	bl	80015e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800134c:	2360      	movs	r3, #96	; 0x60
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001354:	2300      	movs	r3, #0
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001358:	2300      	movs	r3, #0
 800135a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136c:	2200      	movs	r2, #0
 800136e:	4619      	mov	r1, r3
 8001370:	4819      	ldr	r0, [pc, #100]	; (80013d8 <MX_TIM1_Init+0x150>)
 8001372:	f001 fca1 	bl	8002cb8 <HAL_TIM_PWM_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800137c:	f000 f932 	bl	80015e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001384:	2204      	movs	r2, #4
 8001386:	4619      	mov	r1, r3
 8001388:	4813      	ldr	r0, [pc, #76]	; (80013d8 <MX_TIM1_Init+0x150>)
 800138a:	f001 fc95 	bl	8002cb8 <HAL_TIM_PWM_ConfigChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001394:	f000 f926 	bl	80015e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	4619      	mov	r1, r3
 80013ba:	4807      	ldr	r0, [pc, #28]	; (80013d8 <MX_TIM1_Init+0x150>)
 80013bc:	f002 f94c 	bl	8003658 <HAL_TIMEx_ConfigBreakDeadTime>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80013c6:	f000 f90d 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  //HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // Primary channel - rising edge
  //HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2); // Primary channel - rising edge
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013ca:	4803      	ldr	r0, [pc, #12]	; (80013d8 <MX_TIM1_Init+0x150>)
 80013cc:	f000 f95a 	bl	8001684 <HAL_TIM_MspPostInit>

}
 80013d0:	bf00      	nop
 80013d2:	3758      	adds	r7, #88	; 0x58
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000034 	.word	0x20000034
 80013dc:	40010000 	.word	0x40010000

080013e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08e      	sub	sp, #56	; 0x38
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80013e6:	f107 031c 	add.w	r3, r7, #28
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	611a      	str	r2, [r3, #16]
 80013f6:	615a      	str	r2, [r3, #20]
 80013f8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
 8001408:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800140a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800140e:	f7ff fc87 	bl	8000d20 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001412:	2001      	movs	r0, #1
 8001414:	f7ff fc6c 	bl	8000cf0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001418:	230c      	movs	r3, #12
 800141a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800141c:	2302      	movs	r3, #2
 800141e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800142c:	2307      	movs	r3, #7
 800142e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	4619      	mov	r1, r3
 8001434:	4818      	ldr	r0, [pc, #96]	; (8001498 <MX_USART2_UART_Init+0xb8>)
 8001436:	f003 faae 	bl	8004996 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800143a:	f7ff fb87 	bl	8000b4c <__NVIC_GetPriorityGrouping>
 800143e:	4603      	mov	r3, r0
 8001440:	2200      	movs	r2, #0
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fbd7 	bl	8000bf8 <NVIC_EncodePriority>
 800144a:	4603      	mov	r3, r0
 800144c:	4619      	mov	r1, r3
 800144e:	2026      	movs	r0, #38	; 0x26
 8001450:	f7ff fba8 	bl	8000ba4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001454:	2026      	movs	r0, #38	; 0x26
 8001456:	f7ff fb87 	bl	8000b68 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800145a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800145e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001468:	2300      	movs	r3, #0
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 800146c:	2304      	movs	r3, #4
 800146e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001470:	2300      	movs	r3, #0
 8001472:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001474:	2300      	movs	r3, #0
 8001476:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	4619      	mov	r1, r3
 800147e:	4807      	ldr	r0, [pc, #28]	; (800149c <MX_USART2_UART_Init+0xbc>)
 8001480:	f003 feac 	bl	80051dc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001484:	4805      	ldr	r0, [pc, #20]	; (800149c <MX_USART2_UART_Init+0xbc>)
 8001486:	f7ff fbfa 	bl	8000c7e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800148a:	4804      	ldr	r0, [pc, #16]	; (800149c <MX_USART2_UART_Init+0xbc>)
 800148c:	f7ff fbe7 	bl	8000c5e <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	3738      	adds	r7, #56	; 0x38
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40020000 	.word	0x40020000
 800149c:	40004400 	.word	0x40004400

080014a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_USART6_UART_Init+0x4c>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <MX_USART6_UART_Init+0x50>)
 80014a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <MX_USART6_UART_Init+0x4c>)
 80014ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_USART6_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_USART6_UART_Init+0x4c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <MX_USART6_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_USART6_UART_Init+0x4c>)
 80014c6:	220c      	movs	r2, #12
 80014c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <MX_USART6_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_USART6_UART_Init+0x4c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_USART6_UART_Init+0x4c>)
 80014d8:	f002 f910 	bl	80036fc <HAL_UART_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80014e2:	f000 f87f 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2000007c 	.word	0x2000007c
 80014f0:	40011400 	.word	0x40011400

080014f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <MX_GPIO_Init+0xe4>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a31      	ldr	r2, [pc, #196]	; (80015d8 <MX_GPIO_Init+0xe4>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b2f      	ldr	r3, [pc, #188]	; (80015d8 <MX_GPIO_Init+0xe4>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <MX_GPIO_Init+0xe4>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a2a      	ldr	r2, [pc, #168]	; (80015d8 <MX_GPIO_Init+0xe4>)
 8001530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <MX_GPIO_Init+0xe4>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <MX_GPIO_Init+0xe4>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a23      	ldr	r2, [pc, #140]	; (80015d8 <MX_GPIO_Init+0xe4>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <MX_GPIO_Init+0xe4>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <MX_GPIO_Init+0xe4>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <MX_GPIO_Init+0xe4>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <MX_GPIO_Init+0xe4>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001580:	4816      	ldr	r0, [pc, #88]	; (80015dc <MX_GPIO_Init+0xe8>)
 8001582:	f000 fdb5 	bl	80020f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 4142 	mov.w	r1, #49664	; 0xc200
 800158c:	4814      	ldr	r0, [pc, #80]	; (80015e0 <MX_GPIO_Init+0xec>)
 800158e:	f000 fdaf 	bl	80020f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001598:	2301      	movs	r3, #1
 800159a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	480c      	ldr	r0, [pc, #48]	; (80015dc <MX_GPIO_Init+0xe8>)
 80015ac:	f000 fc1c 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9;
 80015b0:	f44f 4342 	mov.w	r3, #49664	; 0xc200
 80015b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_GPIO_Init+0xec>)
 80015ca:	f000 fc0d 	bl	8001de8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	; 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020800 	.word	0x40020800
 80015e0:	40020400 	.word	0x40020400

080015e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e8:	b672      	cpsid	i
}
 80015ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ec:	e7fe      	b.n	80015ec <Error_Handler+0x8>
	...

080015f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <HAL_MspInit+0x4c>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	4a0f      	ldr	r2, [pc, #60]	; (800163c <HAL_MspInit+0x4c>)
 8001600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001604:	6453      	str	r3, [r2, #68]	; 0x44
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <HAL_MspInit+0x4c>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_MspInit+0x4c>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <HAL_MspInit+0x4c>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_MspInit+0x4c>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800

08001640 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0b      	ldr	r2, [pc, #44]	; (800167c <HAL_TIM_Base_MspInit+0x3c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d10d      	bne.n	800166e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_TIM_Base_MspInit+0x40>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	4a09      	ldr	r2, [pc, #36]	; (8001680 <HAL_TIM_Base_MspInit+0x40>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6453      	str	r3, [r2, #68]	; 0x44
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <HAL_TIM_Base_MspInit+0x40>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40010000 	.word	0x40010000
 8001680:	40023800 	.word	0x40023800

08001684 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a12      	ldr	r2, [pc, #72]	; (80016ec <HAL_TIM_MspPostInit+0x68>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d11e      	bne.n	80016e4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <HAL_TIM_MspPostInit+0x6c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a10      	ldr	r2, [pc, #64]	; (80016f0 <HAL_TIM_MspPostInit+0x6c>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_TIM_MspPostInit+0x6c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016d4:	2301      	movs	r3, #1
 80016d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	4619      	mov	r1, r3
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <HAL_TIM_MspPostInit+0x70>)
 80016e0:	f000 fb82 	bl	8001de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016e4:	bf00      	nop
 80016e6:	3720      	adds	r7, #32
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40010000 	.word	0x40010000
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40020000 	.word	0x40020000

080016f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	; 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a1d      	ldr	r2, [pc, #116]	; (800178c <HAL_UART_MspInit+0x94>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d134      	bne.n	8001784 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <HAL_UART_MspInit+0x98>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	4a1b      	ldr	r2, [pc, #108]	; (8001790 <HAL_UART_MspInit+0x98>)
 8001724:	f043 0320 	orr.w	r3, r3, #32
 8001728:	6453      	str	r3, [r2, #68]	; 0x44
 800172a:	4b19      	ldr	r3, [pc, #100]	; (8001790 <HAL_UART_MspInit+0x98>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	f003 0320 	and.w	r3, r3, #32
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <HAL_UART_MspInit+0x98>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a14      	ldr	r2, [pc, #80]	; (8001790 <HAL_UART_MspInit+0x98>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b12      	ldr	r3, [pc, #72]	; (8001790 <HAL_UART_MspInit+0x98>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001752:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001764:	2308      	movs	r3, #8
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	4809      	ldr	r0, [pc, #36]	; (8001794 <HAL_UART_MspInit+0x9c>)
 8001770:	f000 fb3a 	bl	8001de8 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001774:	2200      	movs	r2, #0
 8001776:	2100      	movs	r1, #0
 8001778:	2047      	movs	r0, #71	; 0x47
 800177a:	f000 fa6c 	bl	8001c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800177e:	2047      	movs	r0, #71	; 0x47
 8001780:	f000 fa85 	bl	8001c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001784:	bf00      	nop
 8001786:	3728      	adds	r7, #40	; 0x28
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40011400 	.word	0x40011400
 8001790:	40023800 	.word	0x40023800
 8001794:	40020000 	.word	0x40020000

08001798 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0320 	and.w	r3, r3, #32
 80017a8:	2b20      	cmp	r3, #32
 80017aa:	bf0c      	ite	eq
 80017ac:	2301      	moveq	r3, #1
 80017ae:	2300      	movne	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <LL_USART_ClearFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f06f 0220 	mvn.w	r2, #32
 80017cc:	601a      	str	r2, [r3, #0]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	b2db      	uxtb	r3, r3
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f8:	e7fe      	b.n	80017f8 <NMI_Handler+0x4>

080017fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <HardFault_Handler+0x4>

08001800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <MemManage_Handler+0x4>

08001806 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <BusFault_Handler+0x4>

0800180c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <UsageFault_Handler+0x4>

08001812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001840:	f000 f90e 	bl	8001a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}

08001848 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	static unsigned char cnt = 0;
	if(LL_USART_IsActiveFlag_RXNE(USART2))
 800184c:	4832      	ldr	r0, [pc, #200]	; (8001918 <USART2_IRQHandler+0xd0>)
 800184e:	f7ff ffa3 	bl	8001798 <LL_USART_IsActiveFlag_RXNE>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d05c      	beq.n	8001912 <USART2_IRQHandler+0xca>
	{
		LL_USART_ClearFlag_RXNE(USART2);
 8001858:	482f      	ldr	r0, [pc, #188]	; (8001918 <USART2_IRQHandler+0xd0>)
 800185a:	f7ff ffb0 	bl	80017be <LL_USART_ClearFlag_RXNE>
		usart2_rx_data = LL_USART_ReceiveData8(USART2);
 800185e:	482e      	ldr	r0, [pc, #184]	; (8001918 <USART2_IRQHandler+0xd0>)
 8001860:	f7ff ffbb 	bl	80017da <LL_USART_ReceiveData8>
 8001864:	4603      	mov	r3, r0
 8001866:	461a      	mov	r2, r3
 8001868:	4b2c      	ldr	r3, [pc, #176]	; (800191c <USART2_IRQHandler+0xd4>)
 800186a:	701a      	strb	r2, [r3, #0]
		usart2_rx_flag = 1;
 800186c:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <USART2_IRQHandler+0xd8>)
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]

		switch(cnt)
 8001872:	4b2c      	ldr	r3, [pc, #176]	; (8001924 <USART2_IRQHandler+0xdc>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b1f      	cmp	r3, #31
 8001878:	d02e      	beq.n	80018d8 <USART2_IRQHandler+0x90>
 800187a:	2b1f      	cmp	r3, #31
 800187c:	dc3a      	bgt.n	80018f4 <USART2_IRQHandler+0xac>
 800187e:	2b00      	cmp	r3, #0
 8001880:	d002      	beq.n	8001888 <USART2_IRQHandler+0x40>
 8001882:	2b01      	cmp	r3, #1
 8001884:	d012      	beq.n	80018ac <USART2_IRQHandler+0x64>
 8001886:	e035      	b.n	80018f4 <USART2_IRQHandler+0xac>
		{
		case 0:
			if(usart2_rx_data == 0x20)
 8001888:	4b24      	ldr	r3, [pc, #144]	; (800191c <USART2_IRQHandler+0xd4>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b20      	cmp	r3, #32
 800188e:	d13f      	bne.n	8001910 <USART2_IRQHandler+0xc8>
			{
				ibus_rx_buf[cnt] = usart2_rx_data;
 8001890:	4b24      	ldr	r3, [pc, #144]	; (8001924 <USART2_IRQHandler+0xdc>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	4b21      	ldr	r3, [pc, #132]	; (800191c <USART2_IRQHandler+0xd4>)
 8001898:	7819      	ldrb	r1, [r3, #0]
 800189a:	4b23      	ldr	r3, [pc, #140]	; (8001928 <USART2_IRQHandler+0xe0>)
 800189c:	5499      	strb	r1, [r3, r2]
				cnt++;
 800189e:	4b21      	ldr	r3, [pc, #132]	; (8001924 <USART2_IRQHandler+0xdc>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	3301      	adds	r3, #1
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <USART2_IRQHandler+0xdc>)
 80018a8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80018aa:	e031      	b.n	8001910 <USART2_IRQHandler+0xc8>
		case 1:
			if(usart2_rx_data == 0x40)
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <USART2_IRQHandler+0xd4>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b40      	cmp	r3, #64	; 0x40
 80018b2:	d10d      	bne.n	80018d0 <USART2_IRQHandler+0x88>
			{
				ibus_rx_buf[cnt] = usart2_rx_data;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <USART2_IRQHandler+0xdc>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b18      	ldr	r3, [pc, #96]	; (800191c <USART2_IRQHandler+0xd4>)
 80018bc:	7819      	ldrb	r1, [r3, #0]
 80018be:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <USART2_IRQHandler+0xe0>)
 80018c0:	5499      	strb	r1, [r3, r2]
				cnt++;
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <USART2_IRQHandler+0xdc>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	3301      	adds	r3, #1
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4b16      	ldr	r3, [pc, #88]	; (8001924 <USART2_IRQHandler+0xdc>)
 80018cc:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 80018ce:	e020      	b.n	8001912 <USART2_IRQHandler+0xca>
				cnt = 0;
 80018d0:	4b14      	ldr	r3, [pc, #80]	; (8001924 <USART2_IRQHandler+0xdc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
			break;
 80018d6:	e01c      	b.n	8001912 <USART2_IRQHandler+0xca>
		case 31:
			ibus_rx_buf[cnt] = usart2_rx_data;
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <USART2_IRQHandler+0xdc>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <USART2_IRQHandler+0xd4>)
 80018e0:	7819      	ldrb	r1, [r3, #0]
 80018e2:	4b11      	ldr	r3, [pc, #68]	; (8001928 <USART2_IRQHandler+0xe0>)
 80018e4:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <USART2_IRQHandler+0xdc>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <USART2_IRQHandler+0xe4>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
			break;
 80018f2:	e00e      	b.n	8001912 <USART2_IRQHandler+0xca>
		default:
			ibus_rx_buf[cnt] = usart2_rx_data;
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <USART2_IRQHandler+0xdc>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b08      	ldr	r3, [pc, #32]	; (800191c <USART2_IRQHandler+0xd4>)
 80018fc:	7819      	ldrb	r1, [r3, #0]
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <USART2_IRQHandler+0xe0>)
 8001900:	5499      	strb	r1, [r3, r2]
			cnt++;
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <USART2_IRQHandler+0xdc>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	3301      	adds	r3, #1
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <USART2_IRQHandler+0xdc>)
 800190c:	701a      	strb	r2, [r3, #0]
			break;
 800190e:	e000      	b.n	8001912 <USART2_IRQHandler+0xca>
			break;
 8001910:	bf00      	nop
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40004400 	.word	0x40004400
 800191c:	200000f1 	.word	0x200000f1
 8001920:	200000f0 	.word	0x200000f0
 8001924:	20000115 	.word	0x20000115
 8001928:	200000f4 	.word	0x200000f4
 800192c:	20000114 	.word	0x20000114

08001930 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <USART6_IRQHandler+0x10>)
 8001936:	f001 ffbd 	bl	80038b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2000007c 	.word	0x2000007c

08001944 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <SystemInit+0x20>)
 800194a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800194e:	4a05      	ldr	r2, [pc, #20]	; (8001964 <SystemInit+0x20>)
 8001950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001968:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800196c:	f7ff ffea 	bl	8001944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001970:	480c      	ldr	r0, [pc, #48]	; (80019a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001972:	490d      	ldr	r1, [pc, #52]	; (80019a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001978:	e002      	b.n	8001980 <LoopCopyDataInit>

0800197a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800197c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197e:	3304      	adds	r3, #4

08001980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001984:	d3f9      	bcc.n	800197a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001988:	4c0a      	ldr	r4, [pc, #40]	; (80019b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800198c:	e001      	b.n	8001992 <LoopFillZerobss>

0800198e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001990:	3204      	adds	r2, #4

08001992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001994:	d3fb      	bcc.n	800198e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001996:	f003 fc8d 	bl	80052b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800199a:	f7ff f9d9 	bl	8000d50 <main>
  bx  lr    
 800199e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019a0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80019a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80019ac:	0800533c 	.word	0x0800533c
  ldr r2, =_sbss
 80019b0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80019b4:	2000011c 	.word	0x2000011c

080019b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b8:	e7fe      	b.n	80019b8 <ADC_IRQHandler>
	...

080019bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <HAL_Init+0x40>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <HAL_Init+0x40>)
 80019c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_Init+0x40>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <HAL_Init+0x40>)
 80019d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <HAL_Init+0x40>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a07      	ldr	r2, [pc, #28]	; (80019fc <HAL_Init+0x40>)
 80019de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e4:	2003      	movs	r0, #3
 80019e6:	f000 f92b 	bl	8001c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ea:	200f      	movs	r0, #15
 80019ec:	f000 f808 	bl	8001a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f0:	f7ff fdfe 	bl	80015f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023c00 	.word	0x40023c00

08001a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_InitTick+0x54>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_InitTick+0x58>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	4619      	mov	r1, r3
 8001a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 f943 	bl	8001caa <HAL_SYSTICK_Config>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00e      	b.n	8001a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b0f      	cmp	r3, #15
 8001a32:	d80a      	bhi.n	8001a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a34:	2200      	movs	r2, #0
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3c:	f000 f90b 	bl	8001c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a40:	4a06      	ldr	r2, [pc, #24]	; (8001a5c <HAL_InitTick+0x5c>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e000      	b.n	8001a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	2000000c 	.word	0x2000000c
 8001a58:	20000014 	.word	0x20000014
 8001a5c:	20000010 	.word	0x20000010

08001a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_IncTick+0x20>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_IncTick+0x24>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <HAL_IncTick+0x24>)
 8001a72:	6013      	str	r3, [r2, #0]
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000014 	.word	0x20000014
 8001a84:	20000118 	.word	0x20000118

08001a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <HAL_GetTick+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000118 	.word	0x20000118

08001aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001abc:	4013      	ands	r3, r2
 8001abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad2:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	60d3      	str	r3, [r2, #12]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <__NVIC_GetPriorityGrouping+0x18>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	f003 0307 	and.w	r3, r3, #7
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	db0b      	blt.n	8001b2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	f003 021f 	and.w	r2, r3, #31
 8001b1c:	4907      	ldr	r1, [pc, #28]	; (8001b3c <__NVIC_EnableIRQ+0x38>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	095b      	lsrs	r3, r3, #5
 8001b24:	2001      	movs	r0, #1
 8001b26:	fa00 f202 	lsl.w	r2, r0, r2
 8001b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000e100 	.word	0xe000e100

08001b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	6039      	str	r1, [r7, #0]
 8001b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	db0a      	blt.n	8001b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	490c      	ldr	r1, [pc, #48]	; (8001b8c <__NVIC_SetPriority+0x4c>)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	0112      	lsls	r2, r2, #4
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	440b      	add	r3, r1
 8001b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b68:	e00a      	b.n	8001b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4908      	ldr	r1, [pc, #32]	; (8001b90 <__NVIC_SetPriority+0x50>)
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	3b04      	subs	r3, #4
 8001b78:	0112      	lsls	r2, r2, #4
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	761a      	strb	r2, [r3, #24]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000e100 	.word	0xe000e100
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b089      	sub	sp, #36	; 0x24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f1c3 0307 	rsb	r3, r3, #7
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	bf28      	it	cs
 8001bb2:	2304      	movcs	r3, #4
 8001bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	2b06      	cmp	r3, #6
 8001bbc:	d902      	bls.n	8001bc4 <NVIC_EncodePriority+0x30>
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3b03      	subs	r3, #3
 8001bc2:	e000      	b.n	8001bc6 <NVIC_EncodePriority+0x32>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	fa01 f303 	lsl.w	r3, r1, r3
 8001be6:	43d9      	mvns	r1, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	4313      	orrs	r3, r2
         );
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3724      	adds	r7, #36	; 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c0c:	d301      	bcc.n	8001c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e00f      	b.n	8001c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c12:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <SysTick_Config+0x40>)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c1a:	210f      	movs	r1, #15
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f7ff ff8e 	bl	8001b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <SysTick_Config+0x40>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2a:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <SysTick_Config+0x40>)
 8001c2c:	2207      	movs	r2, #7
 8001c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	e000e010 	.word	0xe000e010

08001c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ff29 	bl	8001aa0 <__NVIC_SetPriorityGrouping>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c68:	f7ff ff3e 	bl	8001ae8 <__NVIC_GetPriorityGrouping>
 8001c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	68b9      	ldr	r1, [r7, #8]
 8001c72:	6978      	ldr	r0, [r7, #20]
 8001c74:	f7ff ff8e 	bl	8001b94 <NVIC_EncodePriority>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff5d 	bl	8001b40 <__NVIC_SetPriority>
}
 8001c86:	bf00      	nop
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	4603      	mov	r3, r0
 8001c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff31 	bl	8001b04 <__NVIC_EnableIRQ>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff ffa2 	bl	8001bfc <SysTick_Config>
 8001cb8:	4603      	mov	r3, r0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cd0:	f7ff feda 	bl	8001a88 <HAL_GetTick>
 8001cd4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d008      	beq.n	8001cf4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2280      	movs	r2, #128	; 0x80
 8001ce6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e052      	b.n	8001d9a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0216 	bic.w	r2, r2, #22
 8001d02:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695a      	ldr	r2, [r3, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d12:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d103      	bne.n	8001d24 <HAL_DMA_Abort+0x62>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d007      	beq.n	8001d34 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0208 	bic.w	r2, r2, #8
 8001d32:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0201 	bic.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d44:	e013      	b.n	8001d6e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d46:	f7ff fe9f 	bl	8001a88 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b05      	cmp	r3, #5
 8001d52:	d90c      	bls.n	8001d6e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2220      	movs	r2, #32
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e015      	b.n	8001d9a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1e4      	bne.n	8001d46 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d80:	223f      	movs	r2, #63	; 0x3f
 8001d82:	409a      	lsls	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d004      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2280      	movs	r2, #128	; 0x80
 8001dba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e00c      	b.n	8001dda <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2205      	movs	r2, #5
 8001dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0201 	bic.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	; 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	e159      	b.n	80020b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e04:	2201      	movs	r2, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	f040 8148 	bne.w	80020b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d005      	beq.n	8001e3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d130      	bne.n	8001e9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	2203      	movs	r2, #3
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e70:	2201      	movs	r2, #1
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	f003 0201 	and.w	r2, r3, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d017      	beq.n	8001ed8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d123      	bne.n	8001f2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	08da      	lsrs	r2, r3, #3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3208      	adds	r2, #8
 8001eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	220f      	movs	r2, #15
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	08da      	lsrs	r2, r3, #3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3208      	adds	r2, #8
 8001f26:	69b9      	ldr	r1, [r7, #24]
 8001f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	2203      	movs	r2, #3
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0203 	and.w	r2, r3, #3
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80a2 	beq.w	80020b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	4b57      	ldr	r3, [pc, #348]	; (80020d0 <HAL_GPIO_Init+0x2e8>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	4a56      	ldr	r2, [pc, #344]	; (80020d0 <HAL_GPIO_Init+0x2e8>)
 8001f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7e:	4b54      	ldr	r3, [pc, #336]	; (80020d0 <HAL_GPIO_Init+0x2e8>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f8a:	4a52      	ldr	r2, [pc, #328]	; (80020d4 <HAL_GPIO_Init+0x2ec>)
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	3302      	adds	r3, #2
 8001f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a49      	ldr	r2, [pc, #292]	; (80020d8 <HAL_GPIO_Init+0x2f0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d019      	beq.n	8001fea <HAL_GPIO_Init+0x202>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a48      	ldr	r2, [pc, #288]	; (80020dc <HAL_GPIO_Init+0x2f4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d013      	beq.n	8001fe6 <HAL_GPIO_Init+0x1fe>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a47      	ldr	r2, [pc, #284]	; (80020e0 <HAL_GPIO_Init+0x2f8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d00d      	beq.n	8001fe2 <HAL_GPIO_Init+0x1fa>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a46      	ldr	r2, [pc, #280]	; (80020e4 <HAL_GPIO_Init+0x2fc>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d007      	beq.n	8001fde <HAL_GPIO_Init+0x1f6>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a45      	ldr	r2, [pc, #276]	; (80020e8 <HAL_GPIO_Init+0x300>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d101      	bne.n	8001fda <HAL_GPIO_Init+0x1f2>
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	e008      	b.n	8001fec <HAL_GPIO_Init+0x204>
 8001fda:	2307      	movs	r3, #7
 8001fdc:	e006      	b.n	8001fec <HAL_GPIO_Init+0x204>
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e004      	b.n	8001fec <HAL_GPIO_Init+0x204>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e002      	b.n	8001fec <HAL_GPIO_Init+0x204>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <HAL_GPIO_Init+0x204>
 8001fea:	2300      	movs	r3, #0
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	f002 0203 	and.w	r2, r2, #3
 8001ff2:	0092      	lsls	r2, r2, #2
 8001ff4:	4093      	lsls	r3, r2
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ffc:	4935      	ldr	r1, [pc, #212]	; (80020d4 <HAL_GPIO_Init+0x2ec>)
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	089b      	lsrs	r3, r3, #2
 8002002:	3302      	adds	r3, #2
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800200a:	4b38      	ldr	r3, [pc, #224]	; (80020ec <HAL_GPIO_Init+0x304>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800202e:	4a2f      	ldr	r2, [pc, #188]	; (80020ec <HAL_GPIO_Init+0x304>)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002034:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_GPIO_Init+0x304>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002058:	4a24      	ldr	r2, [pc, #144]	; (80020ec <HAL_GPIO_Init+0x304>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800205e:	4b23      	ldr	r3, [pc, #140]	; (80020ec <HAL_GPIO_Init+0x304>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	43db      	mvns	r3, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002082:	4a1a      	ldr	r2, [pc, #104]	; (80020ec <HAL_GPIO_Init+0x304>)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002088:	4b18      	ldr	r3, [pc, #96]	; (80020ec <HAL_GPIO_Init+0x304>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020ac:	4a0f      	ldr	r2, [pc, #60]	; (80020ec <HAL_GPIO_Init+0x304>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3301      	adds	r3, #1
 80020b6:	61fb      	str	r3, [r7, #28]
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	2b0f      	cmp	r3, #15
 80020bc:	f67f aea2 	bls.w	8001e04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3724      	adds	r7, #36	; 0x24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40013800 	.word	0x40013800
 80020d8:	40020000 	.word	0x40020000
 80020dc:	40020400 	.word	0x40020400
 80020e0:	40020800 	.word	0x40020800
 80020e4:	40020c00 	.word	0x40020c00
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40013c00 	.word	0x40013c00

080020f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	807b      	strh	r3, [r7, #2]
 80020fc:	4613      	mov	r3, r2
 80020fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002100:	787b      	ldrb	r3, [r7, #1]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002106:	887a      	ldrh	r2, [r7, #2]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800210c:	e003      	b.n	8002116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800210e:	887b      	ldrh	r3, [r7, #2]
 8002110:	041a      	lsls	r2, r3, #16
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	619a      	str	r2, [r3, #24]
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002122:	b480      	push	{r7}
 8002124:	b085      	sub	sp, #20
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	460b      	mov	r3, r1
 800212c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002134:	887a      	ldrh	r2, [r7, #2]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4013      	ands	r3, r2
 800213a:	041a      	lsls	r2, r3, #16
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	43d9      	mvns	r1, r3
 8002140:	887b      	ldrh	r3, [r7, #2]
 8002142:	400b      	ands	r3, r1
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	619a      	str	r2, [r3, #24]
}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e267      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d075      	beq.n	8002262 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002176:	4b88      	ldr	r3, [pc, #544]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b04      	cmp	r3, #4
 8002180:	d00c      	beq.n	800219c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002182:	4b85      	ldr	r3, [pc, #532]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800218a:	2b08      	cmp	r3, #8
 800218c:	d112      	bne.n	80021b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800218e:	4b82      	ldr	r3, [pc, #520]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800219a:	d10b      	bne.n	80021b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219c:	4b7e      	ldr	r3, [pc, #504]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d05b      	beq.n	8002260 <HAL_RCC_OscConfig+0x108>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d157      	bne.n	8002260 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e242      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021bc:	d106      	bne.n	80021cc <HAL_RCC_OscConfig+0x74>
 80021be:	4b76      	ldr	r3, [pc, #472]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a75      	ldr	r2, [pc, #468]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80021c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	e01d      	b.n	8002208 <HAL_RCC_OscConfig+0xb0>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x98>
 80021d6:	4b70      	ldr	r3, [pc, #448]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a6f      	ldr	r2, [pc, #444]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80021dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b6d      	ldr	r3, [pc, #436]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a6c      	ldr	r2, [pc, #432]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e00b      	b.n	8002208 <HAL_RCC_OscConfig+0xb0>
 80021f0:	4b69      	ldr	r3, [pc, #420]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a68      	ldr	r2, [pc, #416]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80021f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	4b66      	ldr	r3, [pc, #408]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a65      	ldr	r2, [pc, #404]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 8002202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d013      	beq.n	8002238 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7ff fc3a 	bl	8001a88 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002218:	f7ff fc36 	bl	8001a88 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	; 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e207      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	4b5b      	ldr	r3, [pc, #364]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0xc0>
 8002236:	e014      	b.n	8002262 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff fc26 	bl	8001a88 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002240:	f7ff fc22 	bl	8001a88 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	; 0x64
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e1f3      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002252:	4b51      	ldr	r3, [pc, #324]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0xe8>
 800225e:	e000      	b.n	8002262 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d063      	beq.n	8002336 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800226e:	4b4a      	ldr	r3, [pc, #296]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00b      	beq.n	8002292 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800227a:	4b47      	ldr	r3, [pc, #284]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002282:	2b08      	cmp	r3, #8
 8002284:	d11c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002286:	4b44      	ldr	r3, [pc, #272]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d116      	bne.n	80022c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002292:	4b41      	ldr	r3, [pc, #260]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_RCC_OscConfig+0x152>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d001      	beq.n	80022aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e1c7      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022aa:	4b3b      	ldr	r3, [pc, #236]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4937      	ldr	r1, [pc, #220]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022be:	e03a      	b.n	8002336 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d020      	beq.n	800230a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c8:	4b34      	ldr	r3, [pc, #208]	; (800239c <HAL_RCC_OscConfig+0x244>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ce:	f7ff fbdb 	bl	8001a88 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022d6:	f7ff fbd7 	bl	8001a88 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e1a8      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e8:	4b2b      	ldr	r3, [pc, #172]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f4:	4b28      	ldr	r3, [pc, #160]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4925      	ldr	r1, [pc, #148]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 8002304:	4313      	orrs	r3, r2
 8002306:	600b      	str	r3, [r1, #0]
 8002308:	e015      	b.n	8002336 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800230a:	4b24      	ldr	r3, [pc, #144]	; (800239c <HAL_RCC_OscConfig+0x244>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7ff fbba 	bl	8001a88 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002318:	f7ff fbb6 	bl	8001a88 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e187      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232a:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d036      	beq.n	80023b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d016      	beq.n	8002378 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <HAL_RCC_OscConfig+0x248>)
 800234c:	2201      	movs	r2, #1
 800234e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002350:	f7ff fb9a 	bl	8001a88 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002358:	f7ff fb96 	bl	8001a88 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e167      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 800236c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x200>
 8002376:	e01b      	b.n	80023b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002378:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_RCC_OscConfig+0x248>)
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237e:	f7ff fb83 	bl	8001a88 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002384:	e00e      	b.n	80023a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002386:	f7ff fb7f 	bl	8001a88 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d907      	bls.n	80023a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e150      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
 8002398:	40023800 	.word	0x40023800
 800239c:	42470000 	.word	0x42470000
 80023a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a4:	4b88      	ldr	r3, [pc, #544]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 80023a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1ea      	bne.n	8002386 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 8097 	beq.w	80024ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c2:	4b81      	ldr	r3, [pc, #516]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10f      	bne.n	80023ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	4b7d      	ldr	r3, [pc, #500]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	4a7c      	ldr	r2, [pc, #496]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 80023d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023dc:	6413      	str	r3, [r2, #64]	; 0x40
 80023de:	4b7a      	ldr	r3, [pc, #488]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ea:	2301      	movs	r3, #1
 80023ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ee:	4b77      	ldr	r3, [pc, #476]	; (80025cc <HAL_RCC_OscConfig+0x474>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d118      	bne.n	800242c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fa:	4b74      	ldr	r3, [pc, #464]	; (80025cc <HAL_RCC_OscConfig+0x474>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a73      	ldr	r2, [pc, #460]	; (80025cc <HAL_RCC_OscConfig+0x474>)
 8002400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002406:	f7ff fb3f 	bl	8001a88 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240e:	f7ff fb3b 	bl	8001a88 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e10c      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002420:	4b6a      	ldr	r3, [pc, #424]	; (80025cc <HAL_RCC_OscConfig+0x474>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x2ea>
 8002434:	4b64      	ldr	r3, [pc, #400]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 8002436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002438:	4a63      	ldr	r2, [pc, #396]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6713      	str	r3, [r2, #112]	; 0x70
 8002440:	e01c      	b.n	800247c <HAL_RCC_OscConfig+0x324>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b05      	cmp	r3, #5
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0x30c>
 800244a:	4b5f      	ldr	r3, [pc, #380]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244e:	4a5e      	ldr	r2, [pc, #376]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 8002450:	f043 0304 	orr.w	r3, r3, #4
 8002454:	6713      	str	r3, [r2, #112]	; 0x70
 8002456:	4b5c      	ldr	r3, [pc, #368]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 8002458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245a:	4a5b      	ldr	r2, [pc, #364]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6713      	str	r3, [r2, #112]	; 0x70
 8002462:	e00b      	b.n	800247c <HAL_RCC_OscConfig+0x324>
 8002464:	4b58      	ldr	r3, [pc, #352]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 8002466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002468:	4a57      	ldr	r2, [pc, #348]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 800246a:	f023 0301 	bic.w	r3, r3, #1
 800246e:	6713      	str	r3, [r2, #112]	; 0x70
 8002470:	4b55      	ldr	r3, [pc, #340]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 8002472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002474:	4a54      	ldr	r2, [pc, #336]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 8002476:	f023 0304 	bic.w	r3, r3, #4
 800247a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d015      	beq.n	80024b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002484:	f7ff fb00 	bl	8001a88 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248a:	e00a      	b.n	80024a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248c:	f7ff fafc 	bl	8001a88 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	f241 3288 	movw	r2, #5000	; 0x1388
 800249a:	4293      	cmp	r3, r2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e0cb      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a2:	4b49      	ldr	r3, [pc, #292]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 80024a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0ee      	beq.n	800248c <HAL_RCC_OscConfig+0x334>
 80024ae:	e014      	b.n	80024da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b0:	f7ff faea 	bl	8001a88 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b6:	e00a      	b.n	80024ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b8:	f7ff fae6 	bl	8001a88 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e0b5      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ce:	4b3e      	ldr	r3, [pc, #248]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 80024d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1ee      	bne.n	80024b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024da:	7dfb      	ldrb	r3, [r7, #23]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d105      	bne.n	80024ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e0:	4b39      	ldr	r3, [pc, #228]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	4a38      	ldr	r2, [pc, #224]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 80024e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 80a1 	beq.w	8002638 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024f6:	4b34      	ldr	r3, [pc, #208]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d05c      	beq.n	80025bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d141      	bne.n	800258e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250a:	4b31      	ldr	r3, [pc, #196]	; (80025d0 <HAL_RCC_OscConfig+0x478>)
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7ff faba 	bl	8001a88 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002518:	f7ff fab6 	bl	8001a88 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e087      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252a:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69da      	ldr	r2, [r3, #28]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	019b      	lsls	r3, r3, #6
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254c:	085b      	lsrs	r3, r3, #1
 800254e:	3b01      	subs	r3, #1
 8002550:	041b      	lsls	r3, r3, #16
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002558:	061b      	lsls	r3, r3, #24
 800255a:	491b      	ldr	r1, [pc, #108]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <HAL_RCC_OscConfig+0x478>)
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002566:	f7ff fa8f 	bl	8001a88 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800256e:	f7ff fa8b 	bl	8001a88 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e05c      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x416>
 800258c:	e054      	b.n	8002638 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_RCC_OscConfig+0x478>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7ff fa78 	bl	8001a88 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259c:	f7ff fa74 	bl	8001a88 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e045      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x444>
 80025ba:	e03d      	b.n	8002638 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d107      	bne.n	80025d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e038      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40007000 	.word	0x40007000
 80025d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <HAL_RCC_OscConfig+0x4ec>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d028      	beq.n	8002634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d121      	bne.n	8002634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d11a      	bne.n	8002634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002604:	4013      	ands	r3, r2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800260a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800260c:	4293      	cmp	r3, r2
 800260e:	d111      	bne.n	8002634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261a:	085b      	lsrs	r3, r3, #1
 800261c:	3b01      	subs	r3, #1
 800261e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002620:	429a      	cmp	r2, r3
 8002622:	d107      	bne.n	8002634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e000      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800

08002648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0cc      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800265c:	4b68      	ldr	r3, [pc, #416]	; (8002800 <HAL_RCC_ClockConfig+0x1b8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d90c      	bls.n	8002684 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266a:	4b65      	ldr	r3, [pc, #404]	; (8002800 <HAL_RCC_ClockConfig+0x1b8>)
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	4b63      	ldr	r3, [pc, #396]	; (8002800 <HAL_RCC_ClockConfig+0x1b8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d001      	beq.n	8002684 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0b8      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d020      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800269c:	4b59      	ldr	r3, [pc, #356]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	4a58      	ldr	r2, [pc, #352]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026b4:	4b53      	ldr	r3, [pc, #332]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	4a52      	ldr	r2, [pc, #328]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c0:	4b50      	ldr	r3, [pc, #320]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	494d      	ldr	r1, [pc, #308]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d044      	beq.n	8002768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d107      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e6:	4b47      	ldr	r3, [pc, #284]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d119      	bne.n	8002726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e07f      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d003      	beq.n	8002706 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002702:	2b03      	cmp	r3, #3
 8002704:	d107      	bne.n	8002716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002706:	4b3f      	ldr	r3, [pc, #252]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e06f      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002716:	4b3b      	ldr	r3, [pc, #236]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e067      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002726:	4b37      	ldr	r3, [pc, #220]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f023 0203 	bic.w	r2, r3, #3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4934      	ldr	r1, [pc, #208]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	4313      	orrs	r3, r2
 8002736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002738:	f7ff f9a6 	bl	8001a88 <HAL_GetTick>
 800273c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	e00a      	b.n	8002756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002740:	f7ff f9a2 	bl	8001a88 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	; 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e04f      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002756:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 020c 	and.w	r2, r3, #12
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	429a      	cmp	r2, r3
 8002766:	d1eb      	bne.n	8002740 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002768:	4b25      	ldr	r3, [pc, #148]	; (8002800 <HAL_RCC_ClockConfig+0x1b8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d20c      	bcs.n	8002790 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002776:	4b22      	ldr	r3, [pc, #136]	; (8002800 <HAL_RCC_ClockConfig+0x1b8>)
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800277e:	4b20      	ldr	r3, [pc, #128]	; (8002800 <HAL_RCC_ClockConfig+0x1b8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d001      	beq.n	8002790 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e032      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d008      	beq.n	80027ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800279c:	4b19      	ldr	r3, [pc, #100]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4916      	ldr	r1, [pc, #88]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	490e      	ldr	r1, [pc, #56]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027ce:	f000 f821 	bl	8002814 <HAL_RCC_GetSysClockFreq>
 80027d2:	4602      	mov	r2, r0
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	490a      	ldr	r1, [pc, #40]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 80027e0:	5ccb      	ldrb	r3, [r1, r3]
 80027e2:	fa22 f303 	lsr.w	r3, r2, r3
 80027e6:	4a09      	ldr	r2, [pc, #36]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <HAL_RCC_ClockConfig+0x1c8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff f906 	bl	8001a00 <HAL_InitTick>

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40023c00 	.word	0x40023c00
 8002804:	40023800 	.word	0x40023800
 8002808:	08005314 	.word	0x08005314
 800280c:	2000000c 	.word	0x2000000c
 8002810:	20000010 	.word	0x20000010

08002814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002818:	b090      	sub	sp, #64	; 0x40
 800281a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	637b      	str	r3, [r7, #52]	; 0x34
 8002820:	2300      	movs	r3, #0
 8002822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002824:	2300      	movs	r3, #0
 8002826:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800282c:	4b59      	ldr	r3, [pc, #356]	; (8002994 <HAL_RCC_GetSysClockFreq+0x180>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 030c 	and.w	r3, r3, #12
 8002834:	2b08      	cmp	r3, #8
 8002836:	d00d      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0x40>
 8002838:	2b08      	cmp	r3, #8
 800283a:	f200 80a1 	bhi.w	8002980 <HAL_RCC_GetSysClockFreq+0x16c>
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0x34>
 8002842:	2b04      	cmp	r3, #4
 8002844:	d003      	beq.n	800284e <HAL_RCC_GetSysClockFreq+0x3a>
 8002846:	e09b      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002848:	4b53      	ldr	r3, [pc, #332]	; (8002998 <HAL_RCC_GetSysClockFreq+0x184>)
 800284a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800284c:	e09b      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800284e:	4b53      	ldr	r3, [pc, #332]	; (800299c <HAL_RCC_GetSysClockFreq+0x188>)
 8002850:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002852:	e098      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002854:	4b4f      	ldr	r3, [pc, #316]	; (8002994 <HAL_RCC_GetSysClockFreq+0x180>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800285c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800285e:	4b4d      	ldr	r3, [pc, #308]	; (8002994 <HAL_RCC_GetSysClockFreq+0x180>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d028      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800286a:	4b4a      	ldr	r3, [pc, #296]	; (8002994 <HAL_RCC_GetSysClockFreq+0x180>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	099b      	lsrs	r3, r3, #6
 8002870:	2200      	movs	r2, #0
 8002872:	623b      	str	r3, [r7, #32]
 8002874:	627a      	str	r2, [r7, #36]	; 0x24
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800287c:	2100      	movs	r1, #0
 800287e:	4b47      	ldr	r3, [pc, #284]	; (800299c <HAL_RCC_GetSysClockFreq+0x188>)
 8002880:	fb03 f201 	mul.w	r2, r3, r1
 8002884:	2300      	movs	r3, #0
 8002886:	fb00 f303 	mul.w	r3, r0, r3
 800288a:	4413      	add	r3, r2
 800288c:	4a43      	ldr	r2, [pc, #268]	; (800299c <HAL_RCC_GetSysClockFreq+0x188>)
 800288e:	fba0 1202 	umull	r1, r2, r0, r2
 8002892:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002894:	460a      	mov	r2, r1
 8002896:	62ba      	str	r2, [r7, #40]	; 0x28
 8002898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800289a:	4413      	add	r3, r2
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800289e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a0:	2200      	movs	r2, #0
 80028a2:	61bb      	str	r3, [r7, #24]
 80028a4:	61fa      	str	r2, [r7, #28]
 80028a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80028ae:	f7fd ff99 	bl	80007e4 <__aeabi_uldivmod>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4613      	mov	r3, r2
 80028b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ba:	e053      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028bc:	4b35      	ldr	r3, [pc, #212]	; (8002994 <HAL_RCC_GetSysClockFreq+0x180>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	099b      	lsrs	r3, r3, #6
 80028c2:	2200      	movs	r2, #0
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	617a      	str	r2, [r7, #20]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028ce:	f04f 0b00 	mov.w	fp, #0
 80028d2:	4652      	mov	r2, sl
 80028d4:	465b      	mov	r3, fp
 80028d6:	f04f 0000 	mov.w	r0, #0
 80028da:	f04f 0100 	mov.w	r1, #0
 80028de:	0159      	lsls	r1, r3, #5
 80028e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028e4:	0150      	lsls	r0, r2, #5
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	ebb2 080a 	subs.w	r8, r2, sl
 80028ee:	eb63 090b 	sbc.w	r9, r3, fp
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002902:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002906:	ebb2 0408 	subs.w	r4, r2, r8
 800290a:	eb63 0509 	sbc.w	r5, r3, r9
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	00eb      	lsls	r3, r5, #3
 8002918:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800291c:	00e2      	lsls	r2, r4, #3
 800291e:	4614      	mov	r4, r2
 8002920:	461d      	mov	r5, r3
 8002922:	eb14 030a 	adds.w	r3, r4, sl
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	eb45 030b 	adc.w	r3, r5, fp
 800292c:	607b      	str	r3, [r7, #4]
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	e9d7 4500 	ldrd	r4, r5, [r7]
 800293a:	4629      	mov	r1, r5
 800293c:	028b      	lsls	r3, r1, #10
 800293e:	4621      	mov	r1, r4
 8002940:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002944:	4621      	mov	r1, r4
 8002946:	028a      	lsls	r2, r1, #10
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294e:	2200      	movs	r2, #0
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	60fa      	str	r2, [r7, #12]
 8002954:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002958:	f7fd ff44 	bl	80007e4 <__aeabi_uldivmod>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4613      	mov	r3, r2
 8002962:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_RCC_GetSysClockFreq+0x180>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	0c1b      	lsrs	r3, r3, #16
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	3301      	adds	r3, #1
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002974:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002978:	fbb2 f3f3 	udiv	r3, r2, r3
 800297c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800297e:	e002      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <HAL_RCC_GetSysClockFreq+0x184>)
 8002982:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002988:	4618      	mov	r0, r3
 800298a:	3740      	adds	r7, #64	; 0x40
 800298c:	46bd      	mov	sp, r7
 800298e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800
 8002998:	00f42400 	.word	0x00f42400
 800299c:	017d7840 	.word	0x017d7840

080029a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029a6:	681b      	ldr	r3, [r3, #0]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	2000000c 	.word	0x2000000c

080029b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029bc:	f7ff fff0 	bl	80029a0 <HAL_RCC_GetHCLKFreq>
 80029c0:	4602      	mov	r2, r0
 80029c2:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	0a9b      	lsrs	r3, r3, #10
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	4903      	ldr	r1, [pc, #12]	; (80029dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ce:	5ccb      	ldrb	r3, [r1, r3]
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40023800 	.word	0x40023800
 80029dc:	08005324 	.word	0x08005324

080029e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029e4:	f7ff ffdc 	bl	80029a0 <HAL_RCC_GetHCLKFreq>
 80029e8:	4602      	mov	r2, r0
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	0b5b      	lsrs	r3, r3, #13
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	4903      	ldr	r1, [pc, #12]	; (8002a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029f6:	5ccb      	ldrb	r3, [r1, r3]
 80029f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40023800 	.word	0x40023800
 8002a04:	08005324 	.word	0x08005324

08002a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e041      	b.n	8002a9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe fe06 	bl	8001640 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3304      	adds	r3, #4
 8002a44:	4619      	mov	r1, r3
 8002a46:	4610      	mov	r0, r2
 8002a48:	f000 fac0 	bl	8002fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e041      	b.n	8002b3c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d106      	bne.n	8002ad2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f839 	bl	8002b44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	f000 fa71 	bl	8002fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d109      	bne.n	8002b7c <HAL_TIM_PWM_Start+0x24>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	bf14      	ite	ne
 8002b74:	2301      	movne	r3, #1
 8002b76:	2300      	moveq	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	e022      	b.n	8002bc2 <HAL_TIM_PWM_Start+0x6a>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d109      	bne.n	8002b96 <HAL_TIM_PWM_Start+0x3e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	bf14      	ite	ne
 8002b8e:	2301      	movne	r3, #1
 8002b90:	2300      	moveq	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	e015      	b.n	8002bc2 <HAL_TIM_PWM_Start+0x6a>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d109      	bne.n	8002bb0 <HAL_TIM_PWM_Start+0x58>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	bf14      	ite	ne
 8002ba8:	2301      	movne	r3, #1
 8002baa:	2300      	moveq	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	e008      	b.n	8002bc2 <HAL_TIM_PWM_Start+0x6a>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	bf14      	ite	ne
 8002bbc:	2301      	movne	r3, #1
 8002bbe:	2300      	moveq	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e068      	b.n	8002c9c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d104      	bne.n	8002bda <HAL_TIM_PWM_Start+0x82>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bd8:	e013      	b.n	8002c02 <HAL_TIM_PWM_Start+0xaa>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d104      	bne.n	8002bea <HAL_TIM_PWM_Start+0x92>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002be8:	e00b      	b.n	8002c02 <HAL_TIM_PWM_Start+0xaa>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d104      	bne.n	8002bfa <HAL_TIM_PWM_Start+0xa2>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bf8:	e003      	b.n	8002c02 <HAL_TIM_PWM_Start+0xaa>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2201      	movs	r2, #1
 8002c08:	6839      	ldr	r1, [r7, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fc90 	bl	8003530 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a23      	ldr	r2, [pc, #140]	; (8002ca4 <HAL_TIM_PWM_Start+0x14c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d107      	bne.n	8002c2a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ca4 <HAL_TIM_PWM_Start+0x14c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d018      	beq.n	8002c66 <HAL_TIM_PWM_Start+0x10e>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3c:	d013      	beq.n	8002c66 <HAL_TIM_PWM_Start+0x10e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a19      	ldr	r2, [pc, #100]	; (8002ca8 <HAL_TIM_PWM_Start+0x150>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d00e      	beq.n	8002c66 <HAL_TIM_PWM_Start+0x10e>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a17      	ldr	r2, [pc, #92]	; (8002cac <HAL_TIM_PWM_Start+0x154>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d009      	beq.n	8002c66 <HAL_TIM_PWM_Start+0x10e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a16      	ldr	r2, [pc, #88]	; (8002cb0 <HAL_TIM_PWM_Start+0x158>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d004      	beq.n	8002c66 <HAL_TIM_PWM_Start+0x10e>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a14      	ldr	r2, [pc, #80]	; (8002cb4 <HAL_TIM_PWM_Start+0x15c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d111      	bne.n	8002c8a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b06      	cmp	r3, #6
 8002c76:	d010      	beq.n	8002c9a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c88:	e007      	b.n	8002c9a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0201 	orr.w	r2, r2, #1
 8002c98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40010000 	.word	0x40010000
 8002ca8:	40000400 	.word	0x40000400
 8002cac:	40000800 	.word	0x40000800
 8002cb0:	40000c00 	.word	0x40000c00
 8002cb4:	40014000 	.word	0x40014000

08002cb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e0ae      	b.n	8002e34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b0c      	cmp	r3, #12
 8002ce2:	f200 809f 	bhi.w	8002e24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ce6:	a201      	add	r2, pc, #4	; (adr r2, 8002cec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cec:	08002d21 	.word	0x08002d21
 8002cf0:	08002e25 	.word	0x08002e25
 8002cf4:	08002e25 	.word	0x08002e25
 8002cf8:	08002e25 	.word	0x08002e25
 8002cfc:	08002d61 	.word	0x08002d61
 8002d00:	08002e25 	.word	0x08002e25
 8002d04:	08002e25 	.word	0x08002e25
 8002d08:	08002e25 	.word	0x08002e25
 8002d0c:	08002da3 	.word	0x08002da3
 8002d10:	08002e25 	.word	0x08002e25
 8002d14:	08002e25 	.word	0x08002e25
 8002d18:	08002e25 	.word	0x08002e25
 8002d1c:	08002de3 	.word	0x08002de3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68b9      	ldr	r1, [r7, #8]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f9dc 	bl	80030e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699a      	ldr	r2, [r3, #24]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0208 	orr.w	r2, r2, #8
 8002d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0204 	bic.w	r2, r2, #4
 8002d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6999      	ldr	r1, [r3, #24]
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	619a      	str	r2, [r3, #24]
      break;
 8002d5e:	e064      	b.n	8002e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fa22 	bl	80031b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6999      	ldr	r1, [r3, #24]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	021a      	lsls	r2, r3, #8
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	619a      	str	r2, [r3, #24]
      break;
 8002da0:	e043      	b.n	8002e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68b9      	ldr	r1, [r7, #8]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fa6d 	bl	8003288 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0208 	orr.w	r2, r2, #8
 8002dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69da      	ldr	r2, [r3, #28]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0204 	bic.w	r2, r2, #4
 8002dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69d9      	ldr	r1, [r3, #28]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	61da      	str	r2, [r3, #28]
      break;
 8002de0:	e023      	b.n	8002e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fab7 	bl	800335c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69da      	ldr	r2, [r3, #28]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69da      	ldr	r2, [r3, #28]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	69d9      	ldr	r1, [r3, #28]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	021a      	lsls	r2, r3, #8
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	61da      	str	r2, [r3, #28]
      break;
 8002e22:	e002      	b.n	8002e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	75fb      	strb	r3, [r7, #23]
      break;
 8002e28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_TIM_ConfigClockSource+0x1c>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e0b4      	b.n	8002fc2 <HAL_TIM_ConfigClockSource+0x186>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e90:	d03e      	beq.n	8002f10 <HAL_TIM_ConfigClockSource+0xd4>
 8002e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e96:	f200 8087 	bhi.w	8002fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8002e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e9e:	f000 8086 	beq.w	8002fae <HAL_TIM_ConfigClockSource+0x172>
 8002ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea6:	d87f      	bhi.n	8002fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea8:	2b70      	cmp	r3, #112	; 0x70
 8002eaa:	d01a      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0xa6>
 8002eac:	2b70      	cmp	r3, #112	; 0x70
 8002eae:	d87b      	bhi.n	8002fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb0:	2b60      	cmp	r3, #96	; 0x60
 8002eb2:	d050      	beq.n	8002f56 <HAL_TIM_ConfigClockSource+0x11a>
 8002eb4:	2b60      	cmp	r3, #96	; 0x60
 8002eb6:	d877      	bhi.n	8002fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb8:	2b50      	cmp	r3, #80	; 0x50
 8002eba:	d03c      	beq.n	8002f36 <HAL_TIM_ConfigClockSource+0xfa>
 8002ebc:	2b50      	cmp	r3, #80	; 0x50
 8002ebe:	d873      	bhi.n	8002fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec0:	2b40      	cmp	r3, #64	; 0x40
 8002ec2:	d058      	beq.n	8002f76 <HAL_TIM_ConfigClockSource+0x13a>
 8002ec4:	2b40      	cmp	r3, #64	; 0x40
 8002ec6:	d86f      	bhi.n	8002fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec8:	2b30      	cmp	r3, #48	; 0x30
 8002eca:	d064      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0x15a>
 8002ecc:	2b30      	cmp	r3, #48	; 0x30
 8002ece:	d86b      	bhi.n	8002fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed0:	2b20      	cmp	r3, #32
 8002ed2:	d060      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0x15a>
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d867      	bhi.n	8002fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d05c      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0x15a>
 8002edc:	2b10      	cmp	r3, #16
 8002ede:	d05a      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0x15a>
 8002ee0:	e062      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ef2:	f000 fafd 	bl	80034f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	609a      	str	r2, [r3, #8]
      break;
 8002f0e:	e04f      	b.n	8002fb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f20:	f000 fae6 	bl	80034f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f32:	609a      	str	r2, [r3, #8]
      break;
 8002f34:	e03c      	b.n	8002fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f42:	461a      	mov	r2, r3
 8002f44:	f000 fa5a 	bl	80033fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2150      	movs	r1, #80	; 0x50
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fab3 	bl	80034ba <TIM_ITRx_SetConfig>
      break;
 8002f54:	e02c      	b.n	8002fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f62:	461a      	mov	r2, r3
 8002f64:	f000 fa79 	bl	800345a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2160      	movs	r1, #96	; 0x60
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 faa3 	bl	80034ba <TIM_ITRx_SetConfig>
      break;
 8002f74:	e01c      	b.n	8002fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f82:	461a      	mov	r2, r3
 8002f84:	f000 fa3a 	bl	80033fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2140      	movs	r1, #64	; 0x40
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 fa93 	bl	80034ba <TIM_ITRx_SetConfig>
      break;
 8002f94:	e00c      	b.n	8002fb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	f000 fa8a 	bl	80034ba <TIM_ITRx_SetConfig>
      break;
 8002fa6:	e003      	b.n	8002fb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
      break;
 8002fac:	e000      	b.n	8002fb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a3a      	ldr	r2, [pc, #232]	; (80030c8 <TIM_Base_SetConfig+0xfc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00f      	beq.n	8003004 <TIM_Base_SetConfig+0x38>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fea:	d00b      	beq.n	8003004 <TIM_Base_SetConfig+0x38>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a37      	ldr	r2, [pc, #220]	; (80030cc <TIM_Base_SetConfig+0x100>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d007      	beq.n	8003004 <TIM_Base_SetConfig+0x38>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a36      	ldr	r2, [pc, #216]	; (80030d0 <TIM_Base_SetConfig+0x104>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d003      	beq.n	8003004 <TIM_Base_SetConfig+0x38>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a35      	ldr	r2, [pc, #212]	; (80030d4 <TIM_Base_SetConfig+0x108>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d108      	bne.n	8003016 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a2b      	ldr	r2, [pc, #172]	; (80030c8 <TIM_Base_SetConfig+0xfc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d01b      	beq.n	8003056 <TIM_Base_SetConfig+0x8a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003024:	d017      	beq.n	8003056 <TIM_Base_SetConfig+0x8a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a28      	ldr	r2, [pc, #160]	; (80030cc <TIM_Base_SetConfig+0x100>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d013      	beq.n	8003056 <TIM_Base_SetConfig+0x8a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a27      	ldr	r2, [pc, #156]	; (80030d0 <TIM_Base_SetConfig+0x104>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d00f      	beq.n	8003056 <TIM_Base_SetConfig+0x8a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a26      	ldr	r2, [pc, #152]	; (80030d4 <TIM_Base_SetConfig+0x108>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d00b      	beq.n	8003056 <TIM_Base_SetConfig+0x8a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a25      	ldr	r2, [pc, #148]	; (80030d8 <TIM_Base_SetConfig+0x10c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d007      	beq.n	8003056 <TIM_Base_SetConfig+0x8a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a24      	ldr	r2, [pc, #144]	; (80030dc <TIM_Base_SetConfig+0x110>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d003      	beq.n	8003056 <TIM_Base_SetConfig+0x8a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a23      	ldr	r2, [pc, #140]	; (80030e0 <TIM_Base_SetConfig+0x114>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d108      	bne.n	8003068 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a0e      	ldr	r2, [pc, #56]	; (80030c8 <TIM_Base_SetConfig+0xfc>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d103      	bne.n	800309c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d105      	bne.n	80030ba <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f023 0201 	bic.w	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	611a      	str	r2, [r3, #16]
  }
}
 80030ba:	bf00      	nop
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40010000 	.word	0x40010000
 80030cc:	40000400 	.word	0x40000400
 80030d0:	40000800 	.word	0x40000800
 80030d4:	40000c00 	.word	0x40000c00
 80030d8:	40014000 	.word	0x40014000
 80030dc:	40014400 	.word	0x40014400
 80030e0:	40014800 	.word	0x40014800

080030e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	f023 0201 	bic.w	r2, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 0303 	bic.w	r3, r3, #3
 800311a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f023 0302 	bic.w	r3, r3, #2
 800312c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	4313      	orrs	r3, r2
 8003136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a1c      	ldr	r2, [pc, #112]	; (80031ac <TIM_OC1_SetConfig+0xc8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d10c      	bne.n	800315a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f023 0308 	bic.w	r3, r3, #8
 8003146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f023 0304 	bic.w	r3, r3, #4
 8003158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a13      	ldr	r2, [pc, #76]	; (80031ac <TIM_OC1_SetConfig+0xc8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d111      	bne.n	8003186 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	621a      	str	r2, [r3, #32]
}
 80031a0:	bf00      	nop
 80031a2:	371c      	adds	r7, #28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	40010000 	.word	0x40010000

080031b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	f023 0210 	bic.w	r2, r3, #16
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	021b      	lsls	r3, r3, #8
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f023 0320 	bic.w	r3, r3, #32
 80031fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a1e      	ldr	r2, [pc, #120]	; (8003284 <TIM_OC2_SetConfig+0xd4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d10d      	bne.n	800322c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800322a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a15      	ldr	r2, [pc, #84]	; (8003284 <TIM_OC2_SetConfig+0xd4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d113      	bne.n	800325c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800323a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003242:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	621a      	str	r2, [r3, #32]
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40010000 	.word	0x40010000

08003288 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0303 	bic.w	r3, r3, #3
 80032be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a1d      	ldr	r2, [pc, #116]	; (8003358 <TIM_OC3_SetConfig+0xd0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d10d      	bne.n	8003302 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a14      	ldr	r2, [pc, #80]	; (8003358 <TIM_OC3_SetConfig+0xd0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d113      	bne.n	8003332 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4313      	orrs	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	621a      	str	r2, [r3, #32]
}
 800334c:	bf00      	nop
 800334e:	371c      	adds	r7, #28
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	40010000 	.word	0x40010000

0800335c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800335c:	b480      	push	{r7}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800338a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	031b      	lsls	r3, r3, #12
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a10      	ldr	r2, [pc, #64]	; (80033f8 <TIM_OC4_SetConfig+0x9c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d109      	bne.n	80033d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	019b      	lsls	r3, r3, #6
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	621a      	str	r2, [r3, #32]
}
 80033ea:	bf00      	nop
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40010000 	.word	0x40010000

080033fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f023 0201 	bic.w	r2, r3, #1
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f023 030a 	bic.w	r3, r3, #10
 8003438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	621a      	str	r2, [r3, #32]
}
 800344e:	bf00      	nop
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800345a:	b480      	push	{r7}
 800345c:	b087      	sub	sp, #28
 800345e:	af00      	add	r7, sp, #0
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	f023 0210 	bic.w	r2, r3, #16
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003484:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	031b      	lsls	r3, r3, #12
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003496:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	4313      	orrs	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	621a      	str	r2, [r3, #32]
}
 80034ae:	bf00      	nop
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b085      	sub	sp, #20
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f043 0307 	orr.w	r3, r3, #7
 80034dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	609a      	str	r2, [r3, #8]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800350a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	021a      	lsls	r2, r3, #8
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	431a      	orrs	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4313      	orrs	r3, r2
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	609a      	str	r2, [r3, #8]
}
 8003524:	bf00      	nop
 8003526:	371c      	adds	r7, #28
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	2201      	movs	r2, #1
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a1a      	ldr	r2, [r3, #32]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	43db      	mvns	r3, r3
 8003552:	401a      	ands	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a1a      	ldr	r2, [r3, #32]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	fa01 f303 	lsl.w	r3, r1, r3
 8003568:	431a      	orrs	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	621a      	str	r2, [r3, #32]
}
 800356e:	bf00      	nop
 8003570:	371c      	adds	r7, #28
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003590:	2302      	movs	r3, #2
 8003592:	e050      	b.n	8003636 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1c      	ldr	r2, [pc, #112]	; (8003644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d018      	beq.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e0:	d013      	beq.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a18      	ldr	r2, [pc, #96]	; (8003648 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00e      	beq.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a16      	ldr	r2, [pc, #88]	; (800364c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d009      	beq.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a15      	ldr	r2, [pc, #84]	; (8003650 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d004      	beq.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a13      	ldr	r2, [pc, #76]	; (8003654 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d10c      	bne.n	8003624 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003610:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	4313      	orrs	r3, r2
 800361a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40010000 	.word	0x40010000
 8003648:	40000400 	.word	0x40000400
 800364c:	40000800 	.word	0x40000800
 8003650:	40000c00 	.word	0x40000c00
 8003654:	40014000 	.word	0x40014000

08003658 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003670:	2302      	movs	r3, #2
 8003672:	e03d      	b.n	80036f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	4313      	orrs	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e042      	b.n	8003794 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fd ffe8 	bl	80016f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2224      	movs	r2, #36	; 0x24
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800373e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fd69 	bl	8004218 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003754:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695a      	ldr	r2, [r3, #20]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003764:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003774:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08a      	sub	sp, #40	; 0x28
 80037a0:	af02      	add	r7, sp, #8
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	4613      	mov	r3, r2
 80037aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d175      	bne.n	80038a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_UART_Transmit+0x2c>
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e06e      	b.n	80038aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2221      	movs	r2, #33	; 0x21
 80037d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037da:	f7fe f955 	bl	8001a88 <HAL_GetTick>
 80037de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	88fa      	ldrh	r2, [r7, #6]
 80037e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	88fa      	ldrh	r2, [r7, #6]
 80037ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f4:	d108      	bne.n	8003808 <HAL_UART_Transmit+0x6c>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d104      	bne.n	8003808 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	61bb      	str	r3, [r7, #24]
 8003806:	e003      	b.n	8003810 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800380c:	2300      	movs	r3, #0
 800380e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003810:	e02e      	b.n	8003870 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2200      	movs	r2, #0
 800381a:	2180      	movs	r1, #128	; 0x80
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 fb05 	bl	8003e2c <UART_WaitOnFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e03a      	b.n	80038aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10b      	bne.n	8003852 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003848:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	3302      	adds	r3, #2
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	e007      	b.n	8003862 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	781a      	ldrb	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	3301      	adds	r3, #1
 8003860:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1cb      	bne.n	8003812 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2200      	movs	r2, #0
 8003882:	2140      	movs	r1, #64	; 0x40
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 fad1 	bl	8003e2c <UART_WaitOnFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e006      	b.n	80038aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	e000      	b.n	80038aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
  }
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3720      	adds	r7, #32
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b0ba      	sub	sp, #232	; 0xe8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80038da:	2300      	movs	r3, #0
 80038dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80038f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10f      	bne.n	800391a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038fe:	f003 0320 	and.w	r3, r3, #32
 8003902:	2b00      	cmp	r3, #0
 8003904:	d009      	beq.n	800391a <HAL_UART_IRQHandler+0x66>
 8003906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fbc2 	bl	800409c <UART_Receive_IT>
      return;
 8003918:	e25b      	b.n	8003dd2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800391a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 80de 	beq.w	8003ae0 <HAL_UART_IRQHandler+0x22c>
 8003924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d106      	bne.n	800393e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003934:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 80d1 	beq.w	8003ae0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800393e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00b      	beq.n	8003962 <HAL_UART_IRQHandler+0xae>
 800394a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800394e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	f043 0201 	orr.w	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00b      	beq.n	8003986 <HAL_UART_IRQHandler+0xd2>
 800396e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	f043 0202 	orr.w	r2, r3, #2
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00b      	beq.n	80039aa <HAL_UART_IRQHandler+0xf6>
 8003992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d005      	beq.n	80039aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a2:	f043 0204 	orr.w	r2, r3, #4
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d011      	beq.n	80039da <HAL_UART_IRQHandler+0x126>
 80039b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d105      	bne.n	80039ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	f043 0208 	orr.w	r2, r3, #8
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 81f2 	beq.w	8003dc8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <HAL_UART_IRQHandler+0x14e>
 80039f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039f4:	f003 0320 	and.w	r3, r3, #32
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fb4d 	bl	800409c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0c:	2b40      	cmp	r3, #64	; 0x40
 8003a0e:	bf0c      	ite	eq
 8003a10:	2301      	moveq	r3, #1
 8003a12:	2300      	movne	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d103      	bne.n	8003a2e <HAL_UART_IRQHandler+0x17a>
 8003a26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d04f      	beq.n	8003ace <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fa55 	bl	8003ede <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3e:	2b40      	cmp	r3, #64	; 0x40
 8003a40:	d141      	bne.n	8003ac6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3314      	adds	r3, #20
 8003a48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a50:	e853 3f00 	ldrex	r3, [r3]
 8003a54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3314      	adds	r3, #20
 8003a6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1d9      	bne.n	8003a42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d013      	beq.n	8003abe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9a:	4a7e      	ldr	r2, [pc, #504]	; (8003c94 <HAL_UART_IRQHandler+0x3e0>)
 8003a9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fe f97d 	bl	8001da2 <HAL_DMA_Abort_IT>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d016      	beq.n	8003adc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ab8:	4610      	mov	r0, r2
 8003aba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003abc:	e00e      	b.n	8003adc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f99e 	bl	8003e00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac4:	e00a      	b.n	8003adc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f99a 	bl	8003e00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003acc:	e006      	b.n	8003adc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f996 	bl	8003e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003ada:	e175      	b.n	8003dc8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003adc:	bf00      	nop
    return;
 8003ade:	e173      	b.n	8003dc8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	f040 814f 	bne.w	8003d88 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 8148 	beq.w	8003d88 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003afc:	f003 0310 	and.w	r3, r3, #16
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 8141 	beq.w	8003d88 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b06:	2300      	movs	r3, #0
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b26:	2b40      	cmp	r3, #64	; 0x40
 8003b28:	f040 80b6 	bne.w	8003c98 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 8145 	beq.w	8003dcc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	f080 813e 	bcs.w	8003dcc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b62:	f000 8088 	beq.w	8003c76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	330c      	adds	r3, #12
 8003b6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b74:	e853 3f00 	ldrex	r3, [r3]
 8003b78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	330c      	adds	r3, #12
 8003b8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ba2:	e841 2300 	strex	r3, r2, [r1]
 8003ba6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003baa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1d9      	bne.n	8003b66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3314      	adds	r3, #20
 8003bb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bc4:	f023 0301 	bic.w	r3, r3, #1
 8003bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3314      	adds	r3, #20
 8003bd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003bda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003bde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003be2:	e841 2300 	strex	r3, r2, [r1]
 8003be6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1e1      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3314      	adds	r3, #20
 8003bf4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bf8:	e853 3f00 	ldrex	r3, [r3]
 8003bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3314      	adds	r3, #20
 8003c0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1e3      	bne.n	8003bee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	330c      	adds	r3, #12
 8003c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c3e:	e853 3f00 	ldrex	r3, [r3]
 8003c42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c46:	f023 0310 	bic.w	r3, r3, #16
 8003c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	330c      	adds	r3, #12
 8003c54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c58:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c60:	e841 2300 	strex	r3, r2, [r1]
 8003c64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1e3      	bne.n	8003c34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fe f826 	bl	8001cc2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f8c1 	bl	8003e14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c92:	e09b      	b.n	8003dcc <HAL_UART_IRQHandler+0x518>
 8003c94:	08003fa5 	.word	0x08003fa5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 808e 	beq.w	8003dd0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003cb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 8089 	beq.w	8003dd0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	330c      	adds	r3, #12
 8003cc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc8:	e853 3f00 	ldrex	r3, [r3]
 8003ccc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ce2:	647a      	str	r2, [r7, #68]	; 0x44
 8003ce4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ce8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cea:	e841 2300 	strex	r3, r2, [r1]
 8003cee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1e3      	bne.n	8003cbe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3314      	adds	r3, #20
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	e853 3f00 	ldrex	r3, [r3]
 8003d04:	623b      	str	r3, [r7, #32]
   return(result);
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	f023 0301 	bic.w	r3, r3, #1
 8003d0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3314      	adds	r3, #20
 8003d16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d1a:	633a      	str	r2, [r7, #48]	; 0x30
 8003d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e3      	bne.n	8003cf6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	330c      	adds	r3, #12
 8003d42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	e853 3f00 	ldrex	r3, [r3]
 8003d4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 0310 	bic.w	r3, r3, #16
 8003d52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	330c      	adds	r3, #12
 8003d5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d60:	61fa      	str	r2, [r7, #28]
 8003d62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d64:	69b9      	ldr	r1, [r7, #24]
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	e841 2300 	strex	r3, r2, [r1]
 8003d6c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1e3      	bne.n	8003d3c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d7e:	4619      	mov	r1, r3
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f847 	bl	8003e14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d86:	e023      	b.n	8003dd0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d009      	beq.n	8003da8 <HAL_UART_IRQHandler+0x4f4>
 8003d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f913 	bl	8003fcc <UART_Transmit_IT>
    return;
 8003da6:	e014      	b.n	8003dd2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00e      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x51e>
 8003db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f953 	bl	800406c <UART_EndTransmit_IT>
    return;
 8003dc6:	e004      	b.n	8003dd2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003dc8:	bf00      	nop
 8003dca:	e002      	b.n	8003dd2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003dcc:	bf00      	nop
 8003dce:	e000      	b.n	8003dd2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003dd0:	bf00      	nop
  }
}
 8003dd2:	37e8      	adds	r7, #232	; 0xe8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e3c:	e03b      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e44:	d037      	beq.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e46:	f7fd fe1f 	bl	8001a88 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	6a3a      	ldr	r2, [r7, #32]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d302      	bcc.n	8003e5c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e03a      	b.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f003 0304 	and.w	r3, r3, #4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d023      	beq.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b80      	cmp	r3, #128	; 0x80
 8003e72:	d020      	beq.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b40      	cmp	r3, #64	; 0x40
 8003e78:	d01d      	beq.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d116      	bne.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f81d 	bl	8003ede <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2208      	movs	r2, #8
 8003ea8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e00f      	b.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	bf0c      	ite	eq
 8003ec6:	2301      	moveq	r3, #1
 8003ec8:	2300      	movne	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	461a      	mov	r2, r3
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d0b4      	beq.n	8003e3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b095      	sub	sp, #84	; 0x54
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	330c      	adds	r3, #12
 8003eec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003efc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	330c      	adds	r3, #12
 8003f04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f06:	643a      	str	r2, [r7, #64]	; 0x40
 8003f08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e5      	bne.n	8003ee6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3314      	adds	r3, #20
 8003f20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3314      	adds	r3, #20
 8003f38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e5      	bne.n	8003f1a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d119      	bne.n	8003f8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	330c      	adds	r3, #12
 8003f5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	e853 3f00 	ldrex	r3, [r3]
 8003f64:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f023 0310 	bic.w	r3, r3, #16
 8003f6c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	330c      	adds	r3, #12
 8003f74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f76:	61ba      	str	r2, [r7, #24]
 8003f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7a:	6979      	ldr	r1, [r7, #20]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	e841 2300 	strex	r3, r2, [r1]
 8003f82:	613b      	str	r3, [r7, #16]
   return(result);
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1e5      	bne.n	8003f56 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f98:	bf00      	nop
 8003f9a:	3754      	adds	r7, #84	; 0x54
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f7ff ff1e 	bl	8003e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fc4:	bf00      	nop
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b21      	cmp	r3, #33	; 0x21
 8003fde:	d13e      	bne.n	800405e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe8:	d114      	bne.n	8004014 <UART_Transmit_IT+0x48>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d110      	bne.n	8004014 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004006:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	1c9a      	adds	r2, r3, #2
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	621a      	str	r2, [r3, #32]
 8004012:	e008      	b.n	8004026 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	1c59      	adds	r1, r3, #1
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6211      	str	r1, [r2, #32]
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800402a:	b29b      	uxth	r3, r3
 800402c:	3b01      	subs	r3, #1
 800402e:	b29b      	uxth	r3, r3
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	4619      	mov	r1, r3
 8004034:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10f      	bne.n	800405a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004048:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004058:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	e000      	b.n	8004060 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800405e:	2302      	movs	r3, #2
  }
}
 8004060:	4618      	mov	r0, r3
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004082:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f7ff fea3 	bl	8003dd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08c      	sub	sp, #48	; 0x30
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b22      	cmp	r3, #34	; 0x22
 80040ae:	f040 80ae 	bne.w	800420e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ba:	d117      	bne.n	80040ec <UART_Receive_IT+0x50>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d113      	bne.n	80040ec <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040c4:	2300      	movs	r3, #0
 80040c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040cc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040da:	b29a      	uxth	r2, r3
 80040dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e4:	1c9a      	adds	r2, r3, #2
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	629a      	str	r2, [r3, #40]	; 0x28
 80040ea:	e026      	b.n	800413a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040fe:	d007      	beq.n	8004110 <UART_Receive_IT+0x74>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <UART_Receive_IT+0x82>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d106      	bne.n	800411e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	b2da      	uxtb	r2, r3
 8004118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	e008      	b.n	8004130 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800412a:	b2da      	uxtb	r2, r3
 800412c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29b      	uxth	r3, r3
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	4619      	mov	r1, r3
 8004148:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800414a:	2b00      	cmp	r3, #0
 800414c:	d15d      	bne.n	800420a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0220 	bic.w	r2, r2, #32
 800415c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800416c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695a      	ldr	r2, [r3, #20]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0201 	bic.w	r2, r2, #1
 800417c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004190:	2b01      	cmp	r3, #1
 8004192:	d135      	bne.n	8004200 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	330c      	adds	r3, #12
 80041a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	e853 3f00 	ldrex	r3, [r3]
 80041a8:	613b      	str	r3, [r7, #16]
   return(result);
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f023 0310 	bic.w	r3, r3, #16
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	330c      	adds	r3, #12
 80041b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ba:	623a      	str	r2, [r7, #32]
 80041bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	69f9      	ldr	r1, [r7, #28]
 80041c0:	6a3a      	ldr	r2, [r7, #32]
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1e5      	bne.n	800419a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b10      	cmp	r3, #16
 80041da:	d10a      	bne.n	80041f2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041dc:	2300      	movs	r3, #0
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041f6:	4619      	mov	r1, r3
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff fe0b 	bl	8003e14 <HAL_UARTEx_RxEventCallback>
 80041fe:	e002      	b.n	8004206 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff fdf3 	bl	8003dec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	e002      	b.n	8004210 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	e000      	b.n	8004210 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800420e:	2302      	movs	r3, #2
  }
}
 8004210:	4618      	mov	r0, r3
 8004212:	3730      	adds	r7, #48	; 0x30
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800421c:	b0c0      	sub	sp, #256	; 0x100
 800421e:	af00      	add	r7, sp, #0
 8004220:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004234:	68d9      	ldr	r1, [r3, #12]
 8004236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	ea40 0301 	orr.w	r3, r0, r1
 8004240:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	431a      	orrs	r2, r3
 8004250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	431a      	orrs	r2, r3
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004270:	f021 010c 	bic.w	r1, r1, #12
 8004274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800427e:	430b      	orrs	r3, r1
 8004280:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800428e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004292:	6999      	ldr	r1, [r3, #24]
 8004294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	ea40 0301 	orr.w	r3, r0, r1
 800429e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	4b8f      	ldr	r3, [pc, #572]	; (80044e4 <UART_SetConfig+0x2cc>)
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d005      	beq.n	80042b8 <UART_SetConfig+0xa0>
 80042ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	4b8d      	ldr	r3, [pc, #564]	; (80044e8 <UART_SetConfig+0x2d0>)
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d104      	bne.n	80042c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042b8:	f7fe fb92 	bl	80029e0 <HAL_RCC_GetPCLK2Freq>
 80042bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80042c0:	e003      	b.n	80042ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042c2:	f7fe fb79 	bl	80029b8 <HAL_RCC_GetPCLK1Freq>
 80042c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d4:	f040 810c 	bne.w	80044f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042dc:	2200      	movs	r2, #0
 80042de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80042e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80042ea:	4622      	mov	r2, r4
 80042ec:	462b      	mov	r3, r5
 80042ee:	1891      	adds	r1, r2, r2
 80042f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80042f2:	415b      	adcs	r3, r3
 80042f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042fa:	4621      	mov	r1, r4
 80042fc:	eb12 0801 	adds.w	r8, r2, r1
 8004300:	4629      	mov	r1, r5
 8004302:	eb43 0901 	adc.w	r9, r3, r1
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	f04f 0300 	mov.w	r3, #0
 800430e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004312:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004316:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800431a:	4690      	mov	r8, r2
 800431c:	4699      	mov	r9, r3
 800431e:	4623      	mov	r3, r4
 8004320:	eb18 0303 	adds.w	r3, r8, r3
 8004324:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004328:	462b      	mov	r3, r5
 800432a:	eb49 0303 	adc.w	r3, r9, r3
 800432e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800433e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004342:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004346:	460b      	mov	r3, r1
 8004348:	18db      	adds	r3, r3, r3
 800434a:	653b      	str	r3, [r7, #80]	; 0x50
 800434c:	4613      	mov	r3, r2
 800434e:	eb42 0303 	adc.w	r3, r2, r3
 8004352:	657b      	str	r3, [r7, #84]	; 0x54
 8004354:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004358:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800435c:	f7fc fa42 	bl	80007e4 <__aeabi_uldivmod>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4b61      	ldr	r3, [pc, #388]	; (80044ec <UART_SetConfig+0x2d4>)
 8004366:	fba3 2302 	umull	r2, r3, r3, r2
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	011c      	lsls	r4, r3, #4
 800436e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004372:	2200      	movs	r2, #0
 8004374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004378:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800437c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004380:	4642      	mov	r2, r8
 8004382:	464b      	mov	r3, r9
 8004384:	1891      	adds	r1, r2, r2
 8004386:	64b9      	str	r1, [r7, #72]	; 0x48
 8004388:	415b      	adcs	r3, r3
 800438a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800438c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004390:	4641      	mov	r1, r8
 8004392:	eb12 0a01 	adds.w	sl, r2, r1
 8004396:	4649      	mov	r1, r9
 8004398:	eb43 0b01 	adc.w	fp, r3, r1
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043b0:	4692      	mov	sl, r2
 80043b2:	469b      	mov	fp, r3
 80043b4:	4643      	mov	r3, r8
 80043b6:	eb1a 0303 	adds.w	r3, sl, r3
 80043ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043be:	464b      	mov	r3, r9
 80043c0:	eb4b 0303 	adc.w	r3, fp, r3
 80043c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80043d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80043dc:	460b      	mov	r3, r1
 80043de:	18db      	adds	r3, r3, r3
 80043e0:	643b      	str	r3, [r7, #64]	; 0x40
 80043e2:	4613      	mov	r3, r2
 80043e4:	eb42 0303 	adc.w	r3, r2, r3
 80043e8:	647b      	str	r3, [r7, #68]	; 0x44
 80043ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80043f2:	f7fc f9f7 	bl	80007e4 <__aeabi_uldivmod>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4611      	mov	r1, r2
 80043fc:	4b3b      	ldr	r3, [pc, #236]	; (80044ec <UART_SetConfig+0x2d4>)
 80043fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	2264      	movs	r2, #100	; 0x64
 8004406:	fb02 f303 	mul.w	r3, r2, r3
 800440a:	1acb      	subs	r3, r1, r3
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004412:	4b36      	ldr	r3, [pc, #216]	; (80044ec <UART_SetConfig+0x2d4>)
 8004414:	fba3 2302 	umull	r2, r3, r3, r2
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004420:	441c      	add	r4, r3
 8004422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004426:	2200      	movs	r2, #0
 8004428:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800442c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004430:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004434:	4642      	mov	r2, r8
 8004436:	464b      	mov	r3, r9
 8004438:	1891      	adds	r1, r2, r2
 800443a:	63b9      	str	r1, [r7, #56]	; 0x38
 800443c:	415b      	adcs	r3, r3
 800443e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004440:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004444:	4641      	mov	r1, r8
 8004446:	1851      	adds	r1, r2, r1
 8004448:	6339      	str	r1, [r7, #48]	; 0x30
 800444a:	4649      	mov	r1, r9
 800444c:	414b      	adcs	r3, r1
 800444e:	637b      	str	r3, [r7, #52]	; 0x34
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800445c:	4659      	mov	r1, fp
 800445e:	00cb      	lsls	r3, r1, #3
 8004460:	4651      	mov	r1, sl
 8004462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004466:	4651      	mov	r1, sl
 8004468:	00ca      	lsls	r2, r1, #3
 800446a:	4610      	mov	r0, r2
 800446c:	4619      	mov	r1, r3
 800446e:	4603      	mov	r3, r0
 8004470:	4642      	mov	r2, r8
 8004472:	189b      	adds	r3, r3, r2
 8004474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004478:	464b      	mov	r3, r9
 800447a:	460a      	mov	r2, r1
 800447c:	eb42 0303 	adc.w	r3, r2, r3
 8004480:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004490:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004494:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004498:	460b      	mov	r3, r1
 800449a:	18db      	adds	r3, r3, r3
 800449c:	62bb      	str	r3, [r7, #40]	; 0x28
 800449e:	4613      	mov	r3, r2
 80044a0:	eb42 0303 	adc.w	r3, r2, r3
 80044a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80044ae:	f7fc f999 	bl	80007e4 <__aeabi_uldivmod>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4b0d      	ldr	r3, [pc, #52]	; (80044ec <UART_SetConfig+0x2d4>)
 80044b8:	fba3 1302 	umull	r1, r3, r3, r2
 80044bc:	095b      	lsrs	r3, r3, #5
 80044be:	2164      	movs	r1, #100	; 0x64
 80044c0:	fb01 f303 	mul.w	r3, r1, r3
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	3332      	adds	r3, #50	; 0x32
 80044ca:	4a08      	ldr	r2, [pc, #32]	; (80044ec <UART_SetConfig+0x2d4>)
 80044cc:	fba2 2303 	umull	r2, r3, r2, r3
 80044d0:	095b      	lsrs	r3, r3, #5
 80044d2:	f003 0207 	and.w	r2, r3, #7
 80044d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4422      	add	r2, r4
 80044de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044e0:	e106      	b.n	80046f0 <UART_SetConfig+0x4d8>
 80044e2:	bf00      	nop
 80044e4:	40011000 	.word	0x40011000
 80044e8:	40011400 	.word	0x40011400
 80044ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044f4:	2200      	movs	r2, #0
 80044f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80044fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004502:	4642      	mov	r2, r8
 8004504:	464b      	mov	r3, r9
 8004506:	1891      	adds	r1, r2, r2
 8004508:	6239      	str	r1, [r7, #32]
 800450a:	415b      	adcs	r3, r3
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
 800450e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004512:	4641      	mov	r1, r8
 8004514:	1854      	adds	r4, r2, r1
 8004516:	4649      	mov	r1, r9
 8004518:	eb43 0501 	adc.w	r5, r3, r1
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	00eb      	lsls	r3, r5, #3
 8004526:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800452a:	00e2      	lsls	r2, r4, #3
 800452c:	4614      	mov	r4, r2
 800452e:	461d      	mov	r5, r3
 8004530:	4643      	mov	r3, r8
 8004532:	18e3      	adds	r3, r4, r3
 8004534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004538:	464b      	mov	r3, r9
 800453a:	eb45 0303 	adc.w	r3, r5, r3
 800453e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800454e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	f04f 0300 	mov.w	r3, #0
 800455a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800455e:	4629      	mov	r1, r5
 8004560:	008b      	lsls	r3, r1, #2
 8004562:	4621      	mov	r1, r4
 8004564:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004568:	4621      	mov	r1, r4
 800456a:	008a      	lsls	r2, r1, #2
 800456c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004570:	f7fc f938 	bl	80007e4 <__aeabi_uldivmod>
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	4b60      	ldr	r3, [pc, #384]	; (80046fc <UART_SetConfig+0x4e4>)
 800457a:	fba3 2302 	umull	r2, r3, r3, r2
 800457e:	095b      	lsrs	r3, r3, #5
 8004580:	011c      	lsls	r4, r3, #4
 8004582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004586:	2200      	movs	r2, #0
 8004588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800458c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004590:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004594:	4642      	mov	r2, r8
 8004596:	464b      	mov	r3, r9
 8004598:	1891      	adds	r1, r2, r2
 800459a:	61b9      	str	r1, [r7, #24]
 800459c:	415b      	adcs	r3, r3
 800459e:	61fb      	str	r3, [r7, #28]
 80045a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045a4:	4641      	mov	r1, r8
 80045a6:	1851      	adds	r1, r2, r1
 80045a8:	6139      	str	r1, [r7, #16]
 80045aa:	4649      	mov	r1, r9
 80045ac:	414b      	adcs	r3, r1
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045bc:	4659      	mov	r1, fp
 80045be:	00cb      	lsls	r3, r1, #3
 80045c0:	4651      	mov	r1, sl
 80045c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045c6:	4651      	mov	r1, sl
 80045c8:	00ca      	lsls	r2, r1, #3
 80045ca:	4610      	mov	r0, r2
 80045cc:	4619      	mov	r1, r3
 80045ce:	4603      	mov	r3, r0
 80045d0:	4642      	mov	r2, r8
 80045d2:	189b      	adds	r3, r3, r2
 80045d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045d8:	464b      	mov	r3, r9
 80045da:	460a      	mov	r2, r1
 80045dc:	eb42 0303 	adc.w	r3, r2, r3
 80045e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80045ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80045fc:	4649      	mov	r1, r9
 80045fe:	008b      	lsls	r3, r1, #2
 8004600:	4641      	mov	r1, r8
 8004602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004606:	4641      	mov	r1, r8
 8004608:	008a      	lsls	r2, r1, #2
 800460a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800460e:	f7fc f8e9 	bl	80007e4 <__aeabi_uldivmod>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4611      	mov	r1, r2
 8004618:	4b38      	ldr	r3, [pc, #224]	; (80046fc <UART_SetConfig+0x4e4>)
 800461a:	fba3 2301 	umull	r2, r3, r3, r1
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	2264      	movs	r2, #100	; 0x64
 8004622:	fb02 f303 	mul.w	r3, r2, r3
 8004626:	1acb      	subs	r3, r1, r3
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	3332      	adds	r3, #50	; 0x32
 800462c:	4a33      	ldr	r2, [pc, #204]	; (80046fc <UART_SetConfig+0x4e4>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004638:	441c      	add	r4, r3
 800463a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800463e:	2200      	movs	r2, #0
 8004640:	673b      	str	r3, [r7, #112]	; 0x70
 8004642:	677a      	str	r2, [r7, #116]	; 0x74
 8004644:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004648:	4642      	mov	r2, r8
 800464a:	464b      	mov	r3, r9
 800464c:	1891      	adds	r1, r2, r2
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	415b      	adcs	r3, r3
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004658:	4641      	mov	r1, r8
 800465a:	1851      	adds	r1, r2, r1
 800465c:	6039      	str	r1, [r7, #0]
 800465e:	4649      	mov	r1, r9
 8004660:	414b      	adcs	r3, r1
 8004662:	607b      	str	r3, [r7, #4]
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004670:	4659      	mov	r1, fp
 8004672:	00cb      	lsls	r3, r1, #3
 8004674:	4651      	mov	r1, sl
 8004676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800467a:	4651      	mov	r1, sl
 800467c:	00ca      	lsls	r2, r1, #3
 800467e:	4610      	mov	r0, r2
 8004680:	4619      	mov	r1, r3
 8004682:	4603      	mov	r3, r0
 8004684:	4642      	mov	r2, r8
 8004686:	189b      	adds	r3, r3, r2
 8004688:	66bb      	str	r3, [r7, #104]	; 0x68
 800468a:	464b      	mov	r3, r9
 800468c:	460a      	mov	r2, r1
 800468e:	eb42 0303 	adc.w	r3, r2, r3
 8004692:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	663b      	str	r3, [r7, #96]	; 0x60
 800469e:	667a      	str	r2, [r7, #100]	; 0x64
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80046ac:	4649      	mov	r1, r9
 80046ae:	008b      	lsls	r3, r1, #2
 80046b0:	4641      	mov	r1, r8
 80046b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046b6:	4641      	mov	r1, r8
 80046b8:	008a      	lsls	r2, r1, #2
 80046ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80046be:	f7fc f891 	bl	80007e4 <__aeabi_uldivmod>
 80046c2:	4602      	mov	r2, r0
 80046c4:	460b      	mov	r3, r1
 80046c6:	4b0d      	ldr	r3, [pc, #52]	; (80046fc <UART_SetConfig+0x4e4>)
 80046c8:	fba3 1302 	umull	r1, r3, r3, r2
 80046cc:	095b      	lsrs	r3, r3, #5
 80046ce:	2164      	movs	r1, #100	; 0x64
 80046d0:	fb01 f303 	mul.w	r3, r1, r3
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	3332      	adds	r3, #50	; 0x32
 80046da:	4a08      	ldr	r2, [pc, #32]	; (80046fc <UART_SetConfig+0x4e4>)
 80046dc:	fba2 2303 	umull	r2, r3, r2, r3
 80046e0:	095b      	lsrs	r3, r3, #5
 80046e2:	f003 020f 	and.w	r2, r3, #15
 80046e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4422      	add	r2, r4
 80046ee:	609a      	str	r2, [r3, #8]
}
 80046f0:	bf00      	nop
 80046f2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80046f6:	46bd      	mov	sp, r7
 80046f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046fc:	51eb851f 	.word	0x51eb851f

08004700 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004700:	b480      	push	{r7}
 8004702:	b08b      	sub	sp, #44	; 0x2c
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	fa93 f3a3 	rbit	r3, r3
 800471a:	613b      	str	r3, [r7, #16]
  return result;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8004726:	2320      	movs	r3, #32
 8004728:	e003      	b.n	8004732 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	fab3 f383 	clz	r3, r3
 8004730:	b2db      	uxtb	r3, r3
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	2103      	movs	r1, #3
 8004736:	fa01 f303 	lsl.w	r3, r1, r3
 800473a:	43db      	mvns	r3, r3
 800473c:	401a      	ands	r2, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	fa93 f3a3 	rbit	r3, r3
 8004748:	61fb      	str	r3, [r7, #28]
  return result;
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8004754:	2320      	movs	r3, #32
 8004756:	e003      	b.n	8004760 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	fab3 f383 	clz	r3, r3
 800475e:	b2db      	uxtb	r3, r3
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	fa01 f303 	lsl.w	r3, r1, r3
 8004768:	431a      	orrs	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	601a      	str	r2, [r3, #0]
}
 800476e:	bf00      	nop
 8004770:	372c      	adds	r7, #44	; 0x2c
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800477a:	b480      	push	{r7}
 800477c:	b085      	sub	sp, #20
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	43db      	mvns	r3, r3
 800478e:	401a      	ands	r2, r3
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	fb01 f303 	mul.w	r3, r1, r3
 8004798:	431a      	orrs	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	605a      	str	r2, [r3, #4]
}
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b08b      	sub	sp, #44	; 0x2c
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	fa93 f3a3 	rbit	r3, r3
 80047c4:	613b      	str	r3, [r7, #16]
  return result;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80047d0:	2320      	movs	r3, #32
 80047d2:	e003      	b.n	80047dc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	fab3 f383 	clz	r3, r3
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	2103      	movs	r1, #3
 80047e0:	fa01 f303 	lsl.w	r3, r1, r3
 80047e4:	43db      	mvns	r3, r3
 80047e6:	401a      	ands	r2, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	fa93 f3a3 	rbit	r3, r3
 80047f2:	61fb      	str	r3, [r7, #28]
  return result;
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80047fe:	2320      	movs	r3, #32
 8004800:	e003      	b.n	800480a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	fab3 f383 	clz	r3, r3
 8004808:	b2db      	uxtb	r3, r3
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	fa01 f303 	lsl.w	r3, r1, r3
 8004812:	431a      	orrs	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8004818:	bf00      	nop
 800481a:	372c      	adds	r7, #44	; 0x2c
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004824:	b480      	push	{r7}
 8004826:	b08b      	sub	sp, #44	; 0x2c
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	fa93 f3a3 	rbit	r3, r3
 800483e:	613b      	str	r3, [r7, #16]
  return result;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800484a:	2320      	movs	r3, #32
 800484c:	e003      	b.n	8004856 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	fab3 f383 	clz	r3, r3
 8004854:	b2db      	uxtb	r3, r3
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	2103      	movs	r1, #3
 800485a:	fa01 f303 	lsl.w	r3, r1, r3
 800485e:	43db      	mvns	r3, r3
 8004860:	401a      	ands	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	fa93 f3a3 	rbit	r3, r3
 800486c:	61fb      	str	r3, [r7, #28]
  return result;
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004878:	2320      	movs	r3, #32
 800487a:	e003      	b.n	8004884 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	fab3 f383 	clz	r3, r3
 8004882:	b2db      	uxtb	r3, r3
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	fa01 f303 	lsl.w	r3, r1, r3
 800488c:	431a      	orrs	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	60da      	str	r2, [r3, #12]
}
 8004892:	bf00      	nop
 8004894:	372c      	adds	r7, #44	; 0x2c
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800489e:	b480      	push	{r7}
 80048a0:	b08b      	sub	sp, #44	; 0x2c
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a1a      	ldr	r2, [r3, #32]
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	fa93 f3a3 	rbit	r3, r3
 80048b8:	613b      	str	r3, [r7, #16]
  return result;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80048c4:	2320      	movs	r3, #32
 80048c6:	e003      	b.n	80048d0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	fab3 f383 	clz	r3, r3
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	210f      	movs	r1, #15
 80048d4:	fa01 f303 	lsl.w	r3, r1, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	401a      	ands	r2, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	fa93 f3a3 	rbit	r3, r3
 80048e6:	61fb      	str	r3, [r7, #28]
  return result;
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80048f2:	2320      	movs	r3, #32
 80048f4:	e003      	b.n	80048fe <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	fab3 f383 	clz	r3, r3
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	fa01 f303 	lsl.w	r3, r1, r3
 8004906:	431a      	orrs	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800490c:	bf00      	nop
 800490e:	372c      	adds	r7, #44	; 0x2c
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004918:	b480      	push	{r7}
 800491a:	b08b      	sub	sp, #44	; 0x2c
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	0a1b      	lsrs	r3, r3, #8
 800492c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	fa93 f3a3 	rbit	r3, r3
 8004934:	613b      	str	r3, [r7, #16]
  return result;
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8004940:	2320      	movs	r3, #32
 8004942:	e003      	b.n	800494c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	fab3 f383 	clz	r3, r3
 800494a:	b2db      	uxtb	r3, r3
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	210f      	movs	r1, #15
 8004950:	fa01 f303 	lsl.w	r3, r1, r3
 8004954:	43db      	mvns	r3, r3
 8004956:	401a      	ands	r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	0a1b      	lsrs	r3, r3, #8
 800495c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	fa93 f3a3 	rbit	r3, r3
 8004964:	61fb      	str	r3, [r7, #28]
  return result;
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8004970:	2320      	movs	r3, #32
 8004972:	e003      	b.n	800497c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	fab3 f383 	clz	r3, r3
 800497a:	b2db      	uxtb	r3, r3
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	6879      	ldr	r1, [r7, #4]
 8004980:	fa01 f303 	lsl.w	r3, r1, r3
 8004984:	431a      	orrs	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800498a:	bf00      	nop
 800498c:	372c      	adds	r7, #44	; 0x2c
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b08a      	sub	sp, #40	; 0x28
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	fa93 f3a3 	rbit	r3, r3
 80049b4:	617b      	str	r3, [r7, #20]
  return result;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <LL_GPIO_Init+0x2e>
    return 32U;
 80049c0:	2320      	movs	r3, #32
 80049c2:	e003      	b.n	80049cc <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	fab3 f383 	clz	r3, r3
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80049ce:	e057      	b.n	8004a80 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	2101      	movs	r1, #1
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	fa01 f303 	lsl.w	r3, r1, r3
 80049dc:	4013      	ands	r3, r2
 80049de:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d049      	beq.n	8004a7a <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d003      	beq.n	80049f6 <LL_GPIO_Init+0x60>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d10d      	bne.n	8004a12 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	461a      	mov	r2, r3
 80049fc:	6a39      	ldr	r1, [r7, #32]
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff fed3 	bl	80047aa <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	6a39      	ldr	r1, [r7, #32]
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff feb4 	bl	800477a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	461a      	mov	r2, r3
 8004a18:	6a39      	ldr	r1, [r7, #32]
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7ff ff02 	bl	8004824 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d121      	bne.n	8004a6c <LL_GPIO_Init+0xd6>
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	fa93 f3a3 	rbit	r3, r3
 8004a32:	60bb      	str	r3, [r7, #8]
  return result;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <LL_GPIO_Init+0xac>
    return 32U;
 8004a3e:	2320      	movs	r3, #32
 8004a40:	e003      	b.n	8004a4a <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	fab3 f383 	clz	r3, r3
 8004a48:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004a4a:	2b07      	cmp	r3, #7
 8004a4c:	d807      	bhi.n	8004a5e <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	461a      	mov	r2, r3
 8004a54:	6a39      	ldr	r1, [r7, #32]
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff ff21 	bl	800489e <LL_GPIO_SetAFPin_0_7>
 8004a5c:	e006      	b.n	8004a6c <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	461a      	mov	r2, r3
 8004a64:	6a39      	ldr	r1, [r7, #32]
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7ff ff56 	bl	8004918 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	461a      	mov	r2, r3
 8004a72:	6a39      	ldr	r1, [r7, #32]
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7ff fe43 	bl	8004700 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1a0      	bne.n	80049d0 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3728      	adds	r7, #40	; 0x28
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004a9c:	4b04      	ldr	r3, [pc, #16]	; (8004ab0 <LL_RCC_GetSysClkSource+0x18>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 030c 	and.w	r3, r3, #12
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40023800 	.word	0x40023800

08004ab4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004ab8:	4b04      	ldr	r3, [pc, #16]	; (8004acc <LL_RCC_GetAHBPrescaler+0x18>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40023800 	.word	0x40023800

08004ad0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004ad4:	4b04      	ldr	r3, [pc, #16]	; (8004ae8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40023800 	.word	0x40023800

08004aec <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004af0:	4b04      	ldr	r3, [pc, #16]	; (8004b04 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40023800 	.word	0x40023800

08004b08 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004b0c:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <LL_RCC_PLL_GetMainSource+0x18>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40023800 	.word	0x40023800

08004b24 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004b28:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <LL_RCC_PLL_GetN+0x18>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	099b      	lsrs	r3, r3, #6
 8004b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	40023800 	.word	0x40023800

08004b40 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004b44:	4b04      	ldr	r3, [pc, #16]	; (8004b58 <LL_RCC_PLL_GetP+0x18>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40023800 	.word	0x40023800

08004b5c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004b60:	4b04      	ldr	r3, [pc, #16]	; (8004b74 <LL_RCC_PLL_GetDivider+0x18>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40023800 	.word	0x40023800

08004b78 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004b80:	f000 f820 	bl	8004bc4 <RCC_GetSystemClockFreq>
 8004b84:	4602      	mov	r2, r0
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 f840 	bl	8004c14 <RCC_GetHCLKClockFreq>
 8004b94:	4602      	mov	r2, r0
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 f84e 	bl	8004c40 <RCC_GetPCLK1ClockFreq>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 f85a 	bl	8004c68 <RCC_GetPCLK2ClockFreq>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	60da      	str	r2, [r3, #12]
}
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004bce:	f7ff ff63 	bl	8004a98 <LL_RCC_GetSysClkSource>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d00c      	beq.n	8004bf2 <RCC_GetSystemClockFreq+0x2e>
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d80f      	bhi.n	8004bfc <RCC_GetSystemClockFreq+0x38>
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <RCC_GetSystemClockFreq+0x22>
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d003      	beq.n	8004bec <RCC_GetSystemClockFreq+0x28>
 8004be4:	e00a      	b.n	8004bfc <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004be6:	4b09      	ldr	r3, [pc, #36]	; (8004c0c <RCC_GetSystemClockFreq+0x48>)
 8004be8:	607b      	str	r3, [r7, #4]
      break;
 8004bea:	e00a      	b.n	8004c02 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004bec:	4b08      	ldr	r3, [pc, #32]	; (8004c10 <RCC_GetSystemClockFreq+0x4c>)
 8004bee:	607b      	str	r3, [r7, #4]
      break;
 8004bf0:	e007      	b.n	8004c02 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8004bf2:	2008      	movs	r0, #8
 8004bf4:	f000 f84c 	bl	8004c90 <RCC_PLL_GetFreqDomain_SYS>
 8004bf8:	6078      	str	r0, [r7, #4]
      break;
 8004bfa:	e002      	b.n	8004c02 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004bfc:	4b03      	ldr	r3, [pc, #12]	; (8004c0c <RCC_GetSystemClockFreq+0x48>)
 8004bfe:	607b      	str	r3, [r7, #4]
      break;
 8004c00:	bf00      	nop
  }

  return frequency;
 8004c02:	687b      	ldr	r3, [r7, #4]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	00f42400 	.word	0x00f42400
 8004c10:	017d7840 	.word	0x017d7840

08004c14 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004c1c:	f7ff ff4a 	bl	8004ab4 <LL_RCC_GetAHBPrescaler>
 8004c20:	4603      	mov	r3, r0
 8004c22:	091b      	lsrs	r3, r3, #4
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	4a04      	ldr	r2, [pc, #16]	; (8004c3c <RCC_GetHCLKClockFreq+0x28>)
 8004c2a:	5cd3      	ldrb	r3, [r2, r3]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	40d3      	lsrs	r3, r2
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	08005314 	.word	0x08005314

08004c40 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004c48:	f7ff ff42 	bl	8004ad0 <LL_RCC_GetAPB1Prescaler>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	0a9b      	lsrs	r3, r3, #10
 8004c50:	4a04      	ldr	r2, [pc, #16]	; (8004c64 <RCC_GetPCLK1ClockFreq+0x24>)
 8004c52:	5cd3      	ldrb	r3, [r2, r3]
 8004c54:	461a      	mov	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	40d3      	lsrs	r3, r2
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	08005324 	.word	0x08005324

08004c68 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004c70:	f7ff ff3c 	bl	8004aec <LL_RCC_GetAPB2Prescaler>
 8004c74:	4603      	mov	r3, r0
 8004c76:	0b5b      	lsrs	r3, r3, #13
 8004c78:	4a04      	ldr	r2, [pc, #16]	; (8004c8c <RCC_GetPCLK2ClockFreq+0x24>)
 8004c7a:	5cd3      	ldrb	r3, [r2, r3]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	40d3      	lsrs	r3, r2
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	08005324 	.word	0x08005324

08004c90 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004c90:	b590      	push	{r4, r7, lr}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004ca4:	f7ff ff30 	bl	8004b08 <LL_RCC_PLL_GetMainSource>
 8004ca8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d004      	beq.n	8004cba <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cb6:	d003      	beq.n	8004cc0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004cb8:	e005      	b.n	8004cc6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004cba:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004cbc:	617b      	str	r3, [r7, #20]
      break;
 8004cbe:	e005      	b.n	8004ccc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004cc0:	4b11      	ldr	r3, [pc, #68]	; (8004d08 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004cc2:	617b      	str	r3, [r7, #20]
      break;
 8004cc4:	e002      	b.n	8004ccc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004cc6:	4b0f      	ldr	r3, [pc, #60]	; (8004d04 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004cc8:	617b      	str	r3, [r7, #20]
      break;
 8004cca:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d113      	bne.n	8004cfa <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004cd2:	f7ff ff43 	bl	8004b5c <LL_RCC_PLL_GetDivider>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	fbb3 f4f2 	udiv	r4, r3, r2
 8004cde:	f7ff ff21 	bl	8004b24 <LL_RCC_PLL_GetN>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	fb03 f404 	mul.w	r4, r3, r4
 8004ce8:	f7ff ff2a 	bl	8004b40 <LL_RCC_PLL_GetP>
 8004cec:	4603      	mov	r3, r0
 8004cee:	0c1b      	lsrs	r3, r3, #16
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	fbb4 f3f3 	udiv	r3, r4, r3
 8004cf8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004cfa:	693b      	ldr	r3, [r7, #16]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd90      	pop	{r4, r7, pc}
 8004d04:	00f42400 	.word	0x00f42400
 8004d08:	017d7840 	.word	0x017d7840

08004d0c <LL_USART_IsEnabled>:
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d20:	bf0c      	ite	eq
 8004d22:	2301      	moveq	r3, #1
 8004d24:	2300      	movne	r3, #0
 8004d26:	b2db      	uxtb	r3, r3
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <LL_USART_SetStopBitsLength>:
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	611a      	str	r2, [r3, #16]
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <LL_USART_SetHWFlowCtrl>:
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
 8004d62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	615a      	str	r2, [r3, #20]
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <LL_USART_SetBaudRate>:
{
 8004d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d84:	b0c0      	sub	sp, #256	; 0x100
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d8c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004d90:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004d94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da0:	f040 810c 	bne.w	8004fbc <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004da4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004da8:	2200      	movs	r2, #0
 8004daa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004dae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004db2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004db6:	4622      	mov	r2, r4
 8004db8:	462b      	mov	r3, r5
 8004dba:	1891      	adds	r1, r2, r2
 8004dbc:	6639      	str	r1, [r7, #96]	; 0x60
 8004dbe:	415b      	adcs	r3, r3
 8004dc0:	667b      	str	r3, [r7, #100]	; 0x64
 8004dc2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	eb12 0801 	adds.w	r8, r2, r1
 8004dcc:	4629      	mov	r1, r5
 8004dce:	eb43 0901 	adc.w	r9, r3, r1
 8004dd2:	f04f 0200 	mov.w	r2, #0
 8004dd6:	f04f 0300 	mov.w	r3, #0
 8004dda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004de2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004de6:	4690      	mov	r8, r2
 8004de8:	4699      	mov	r9, r3
 8004dea:	4623      	mov	r3, r4
 8004dec:	eb18 0303 	adds.w	r3, r8, r3
 8004df0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004df4:	462b      	mov	r3, r5
 8004df6:	eb49 0303 	adc.w	r3, r9, r3
 8004dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dfe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e02:	2200      	movs	r2, #0
 8004e04:	469a      	mov	sl, r3
 8004e06:	4693      	mov	fp, r2
 8004e08:	eb1a 030a 	adds.w	r3, sl, sl
 8004e0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e0e:	eb4b 030b 	adc.w	r3, fp, fp
 8004e12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e1c:	f7fb fce2 	bl	80007e4 <__aeabi_uldivmod>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4b64      	ldr	r3, [pc, #400]	; (8004fb8 <LL_USART_SetBaudRate+0x238>)
 8004e26:	fba3 2302 	umull	r2, r3, r3, r2
 8004e2a:	095b      	lsrs	r3, r3, #5
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	b29c      	uxth	r4, r3
 8004e32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e3c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e40:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004e44:	4642      	mov	r2, r8
 8004e46:	464b      	mov	r3, r9
 8004e48:	1891      	adds	r1, r2, r2
 8004e4a:	6539      	str	r1, [r7, #80]	; 0x50
 8004e4c:	415b      	adcs	r3, r3
 8004e4e:	657b      	str	r3, [r7, #84]	; 0x54
 8004e50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e54:	4641      	mov	r1, r8
 8004e56:	1851      	adds	r1, r2, r1
 8004e58:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e5a:	4649      	mov	r1, r9
 8004e5c:	414b      	adcs	r3, r1
 8004e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8004e6c:	4659      	mov	r1, fp
 8004e6e:	00cb      	lsls	r3, r1, #3
 8004e70:	4651      	mov	r1, sl
 8004e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e76:	4651      	mov	r1, sl
 8004e78:	00ca      	lsls	r2, r1, #3
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4603      	mov	r3, r0
 8004e80:	4642      	mov	r2, r8
 8004e82:	189b      	adds	r3, r3, r2
 8004e84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e88:	464b      	mov	r3, r9
 8004e8a:	460a      	mov	r2, r1
 8004e8c:	eb42 0303 	adc.w	r3, r2, r3
 8004e90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004e94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e9e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004ea2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	18db      	adds	r3, r3, r3
 8004eaa:	643b      	str	r3, [r7, #64]	; 0x40
 8004eac:	4613      	mov	r3, r2
 8004eae:	eb42 0303 	adc.w	r3, r2, r3
 8004eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8004eb4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004eb8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004ebc:	f7fb fc92 	bl	80007e4 <__aeabi_uldivmod>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	4b3c      	ldr	r3, [pc, #240]	; (8004fb8 <LL_USART_SetBaudRate+0x238>)
 8004ec8:	fba3 2301 	umull	r2, r3, r3, r1
 8004ecc:	095b      	lsrs	r3, r3, #5
 8004ece:	2264      	movs	r2, #100	; 0x64
 8004ed0:	fb02 f303 	mul.w	r3, r2, r3
 8004ed4:	1acb      	subs	r3, r1, r3
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004edc:	4b36      	ldr	r3, [pc, #216]	; (8004fb8 <LL_USART_SetBaudRate+0x238>)
 8004ede:	fba3 2302 	umull	r2, r3, r3, r2
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	4423      	add	r3, r4
 8004ef2:	b29c      	uxth	r4, r3
 8004ef4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004efe:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f02:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8004f06:	4642      	mov	r2, r8
 8004f08:	464b      	mov	r3, r9
 8004f0a:	1891      	adds	r1, r2, r2
 8004f0c:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f0e:	415b      	adcs	r3, r3
 8004f10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f12:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f16:	4641      	mov	r1, r8
 8004f18:	1851      	adds	r1, r2, r1
 8004f1a:	6339      	str	r1, [r7, #48]	; 0x30
 8004f1c:	4649      	mov	r1, r9
 8004f1e:	414b      	adcs	r3, r1
 8004f20:	637b      	str	r3, [r7, #52]	; 0x34
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	f04f 0300 	mov.w	r3, #0
 8004f2a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f2e:	4659      	mov	r1, fp
 8004f30:	00cb      	lsls	r3, r1, #3
 8004f32:	4651      	mov	r1, sl
 8004f34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f38:	4651      	mov	r1, sl
 8004f3a:	00ca      	lsls	r2, r1, #3
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4603      	mov	r3, r0
 8004f42:	4642      	mov	r2, r8
 8004f44:	189b      	adds	r3, r3, r2
 8004f46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f4a:	464b      	mov	r3, r9
 8004f4c:	460a      	mov	r2, r1
 8004f4e:	eb42 0303 	adc.w	r3, r2, r3
 8004f52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004f56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f60:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004f64:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	18db      	adds	r3, r3, r3
 8004f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f6e:	4613      	mov	r3, r2
 8004f70:	eb42 0303 	adc.w	r3, r2, r3
 8004f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f7a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004f7e:	f7fb fc31 	bl	80007e4 <__aeabi_uldivmod>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4b0c      	ldr	r3, [pc, #48]	; (8004fb8 <LL_USART_SetBaudRate+0x238>)
 8004f88:	fba3 1302 	umull	r1, r3, r3, r2
 8004f8c:	095b      	lsrs	r3, r3, #5
 8004f8e:	2164      	movs	r1, #100	; 0x64
 8004f90:	fb01 f303 	mul.w	r3, r1, r3
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	3332      	adds	r3, #50	; 0x32
 8004f9a:	4a07      	ldr	r2, [pc, #28]	; (8004fb8 <LL_USART_SetBaudRate+0x238>)
 8004f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	4423      	add	r3, r4
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fb4:	609a      	str	r2, [r3, #8]
}
 8004fb6:	e108      	b.n	80051ca <LL_USART_SetBaudRate+0x44a>
 8004fb8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004fbc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004fc6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004fca:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8004fce:	4642      	mov	r2, r8
 8004fd0:	464b      	mov	r3, r9
 8004fd2:	1891      	adds	r1, r2, r2
 8004fd4:	6239      	str	r1, [r7, #32]
 8004fd6:	415b      	adcs	r3, r3
 8004fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fde:	4641      	mov	r1, r8
 8004fe0:	1854      	adds	r4, r2, r1
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	eb43 0501 	adc.w	r5, r3, r1
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	00eb      	lsls	r3, r5, #3
 8004ff2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ff6:	00e2      	lsls	r2, r4, #3
 8004ff8:	4614      	mov	r4, r2
 8004ffa:	461d      	mov	r5, r3
 8004ffc:	4643      	mov	r3, r8
 8004ffe:	18e3      	adds	r3, r4, r3
 8005000:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005004:	464b      	mov	r3, r9
 8005006:	eb45 0303 	adc.w	r3, r5, r3
 800500a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800500e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005012:	2200      	movs	r2, #0
 8005014:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005018:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	f04f 0300 	mov.w	r3, #0
 8005024:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8005028:	4629      	mov	r1, r5
 800502a:	008b      	lsls	r3, r1, #2
 800502c:	4621      	mov	r1, r4
 800502e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005032:	4621      	mov	r1, r4
 8005034:	008a      	lsls	r2, r1, #2
 8005036:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800503a:	f7fb fbd3 	bl	80007e4 <__aeabi_uldivmod>
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	4b65      	ldr	r3, [pc, #404]	; (80051d8 <LL_USART_SetBaudRate+0x458>)
 8005044:	fba3 2302 	umull	r2, r3, r3, r2
 8005048:	095b      	lsrs	r3, r3, #5
 800504a:	b29b      	uxth	r3, r3
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	b29c      	uxth	r4, r3
 8005050:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005054:	2200      	movs	r2, #0
 8005056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800505a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800505e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8005062:	4642      	mov	r2, r8
 8005064:	464b      	mov	r3, r9
 8005066:	1891      	adds	r1, r2, r2
 8005068:	61b9      	str	r1, [r7, #24]
 800506a:	415b      	adcs	r3, r3
 800506c:	61fb      	str	r3, [r7, #28]
 800506e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005072:	4641      	mov	r1, r8
 8005074:	1851      	adds	r1, r2, r1
 8005076:	6139      	str	r1, [r7, #16]
 8005078:	4649      	mov	r1, r9
 800507a:	414b      	adcs	r3, r1
 800507c:	617b      	str	r3, [r7, #20]
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	f04f 0300 	mov.w	r3, #0
 8005086:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800508a:	4659      	mov	r1, fp
 800508c:	00cb      	lsls	r3, r1, #3
 800508e:	4651      	mov	r1, sl
 8005090:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005094:	4651      	mov	r1, sl
 8005096:	00ca      	lsls	r2, r1, #3
 8005098:	4610      	mov	r0, r2
 800509a:	4619      	mov	r1, r3
 800509c:	4603      	mov	r3, r0
 800509e:	4642      	mov	r2, r8
 80050a0:	189b      	adds	r3, r3, r2
 80050a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050a6:	464b      	mov	r3, r9
 80050a8:	460a      	mov	r2, r1
 80050aa:	eb42 0303 	adc.w	r3, r2, r3
 80050ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80050b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050bc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80050cc:	4649      	mov	r1, r9
 80050ce:	008b      	lsls	r3, r1, #2
 80050d0:	4641      	mov	r1, r8
 80050d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050d6:	4641      	mov	r1, r8
 80050d8:	008a      	lsls	r2, r1, #2
 80050da:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80050de:	f7fb fb81 	bl	80007e4 <__aeabi_uldivmod>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	4611      	mov	r1, r2
 80050e8:	4b3b      	ldr	r3, [pc, #236]	; (80051d8 <LL_USART_SetBaudRate+0x458>)
 80050ea:	fba3 2301 	umull	r2, r3, r3, r1
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	2264      	movs	r2, #100	; 0x64
 80050f2:	fb02 f303 	mul.w	r3, r2, r3
 80050f6:	1acb      	subs	r3, r1, r3
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	3332      	adds	r3, #50	; 0x32
 80050fc:	4a36      	ldr	r2, [pc, #216]	; (80051d8 <LL_USART_SetBaudRate+0x458>)
 80050fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	b29b      	uxth	r3, r3
 8005106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800510a:	b29b      	uxth	r3, r3
 800510c:	4423      	add	r3, r4
 800510e:	b29c      	uxth	r4, r3
 8005110:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005114:	2200      	movs	r2, #0
 8005116:	67bb      	str	r3, [r7, #120]	; 0x78
 8005118:	67fa      	str	r2, [r7, #124]	; 0x7c
 800511a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800511e:	4642      	mov	r2, r8
 8005120:	464b      	mov	r3, r9
 8005122:	1891      	adds	r1, r2, r2
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	415b      	adcs	r3, r3
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800512e:	4641      	mov	r1, r8
 8005130:	1851      	adds	r1, r2, r1
 8005132:	6039      	str	r1, [r7, #0]
 8005134:	4649      	mov	r1, r9
 8005136:	414b      	adcs	r3, r1
 8005138:	607b      	str	r3, [r7, #4]
 800513a:	f04f 0200 	mov.w	r2, #0
 800513e:	f04f 0300 	mov.w	r3, #0
 8005142:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005146:	4659      	mov	r1, fp
 8005148:	00cb      	lsls	r3, r1, #3
 800514a:	4651      	mov	r1, sl
 800514c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005150:	4651      	mov	r1, sl
 8005152:	00ca      	lsls	r2, r1, #3
 8005154:	4610      	mov	r0, r2
 8005156:	4619      	mov	r1, r3
 8005158:	4603      	mov	r3, r0
 800515a:	4642      	mov	r2, r8
 800515c:	189b      	adds	r3, r3, r2
 800515e:	673b      	str	r3, [r7, #112]	; 0x70
 8005160:	464b      	mov	r3, r9
 8005162:	460a      	mov	r2, r1
 8005164:	eb42 0303 	adc.w	r3, r2, r3
 8005168:	677b      	str	r3, [r7, #116]	; 0x74
 800516a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800516e:	2200      	movs	r2, #0
 8005170:	66bb      	str	r3, [r7, #104]	; 0x68
 8005172:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8005180:	4649      	mov	r1, r9
 8005182:	008b      	lsls	r3, r1, #2
 8005184:	4641      	mov	r1, r8
 8005186:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800518a:	4641      	mov	r1, r8
 800518c:	008a      	lsls	r2, r1, #2
 800518e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005192:	f7fb fb27 	bl	80007e4 <__aeabi_uldivmod>
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	4b0f      	ldr	r3, [pc, #60]	; (80051d8 <LL_USART_SetBaudRate+0x458>)
 800519c:	fba3 1302 	umull	r1, r3, r3, r2
 80051a0:	095b      	lsrs	r3, r3, #5
 80051a2:	2164      	movs	r1, #100	; 0x64
 80051a4:	fb01 f303 	mul.w	r3, r1, r3
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	3332      	adds	r3, #50	; 0x32
 80051ae:	4a0a      	ldr	r2, [pc, #40]	; (80051d8 <LL_USART_SetBaudRate+0x458>)
 80051b0:	fba2 2303 	umull	r2, r3, r2, r3
 80051b4:	095b      	lsrs	r3, r3, #5
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	f003 030f 	and.w	r3, r3, #15
 80051bc:	b29b      	uxth	r3, r3
 80051be:	4423      	add	r3, r4
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051c8:	609a      	str	r2, [r3, #8]
}
 80051ca:	bf00      	nop
 80051cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051d0:	46bd      	mov	sp, r7
 80051d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051d6:	bf00      	nop
 80051d8:	51eb851f 	.word	0x51eb851f

080051dc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b088      	sub	sp, #32
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80051ea:	2300      	movs	r3, #0
 80051ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7ff fd8c 	bl	8004d0c <LL_USART_IsEnabled>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d149      	bne.n	800528e <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005202:	f023 030c 	bic.w	r3, r3, #12
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	6851      	ldr	r1, [r2, #4]
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	68d2      	ldr	r2, [r2, #12]
 800520e:	4311      	orrs	r1, r2
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	6912      	ldr	r2, [r2, #16]
 8005214:	4311      	orrs	r1, r2
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	6992      	ldr	r2, [r2, #24]
 800521a:	430a      	orrs	r2, r1
 800521c:	431a      	orrs	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	4619      	mov	r1, r3
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7ff fd83 	bl	8004d34 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	4619      	mov	r1, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7ff fd90 	bl	8004d5a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800523a:	f107 0308 	add.w	r3, r7, #8
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff fc9a 	bl	8004b78 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a14      	ldr	r2, [pc, #80]	; (8005298 <LL_USART_Init+0xbc>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d102      	bne.n	8005252 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	61bb      	str	r3, [r7, #24]
 8005250:	e00c      	b.n	800526c <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a11      	ldr	r2, [pc, #68]	; (800529c <LL_USART_Init+0xc0>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d102      	bne.n	8005260 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	61bb      	str	r3, [r7, #24]
 800525e:	e005      	b.n	800526c <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a0f      	ldr	r2, [pc, #60]	; (80052a0 <LL_USART_Init+0xc4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d101      	bne.n	800526c <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00d      	beq.n	800528e <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d009      	beq.n	800528e <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 800527a:	2300      	movs	r3, #0
 800527c:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8005286:	69b9      	ldr	r1, [r7, #24]
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7ff fd79 	bl	8004d80 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800528e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3720      	adds	r7, #32
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	40011000 	.word	0x40011000
 800529c:	40004400 	.word	0x40004400
 80052a0:	40011400 	.word	0x40011400

080052a4 <memset>:
 80052a4:	4402      	add	r2, r0
 80052a6:	4603      	mov	r3, r0
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d100      	bne.n	80052ae <memset+0xa>
 80052ac:	4770      	bx	lr
 80052ae:	f803 1b01 	strb.w	r1, [r3], #1
 80052b2:	e7f9      	b.n	80052a8 <memset+0x4>

080052b4 <__libc_init_array>:
 80052b4:	b570      	push	{r4, r5, r6, lr}
 80052b6:	4d0d      	ldr	r5, [pc, #52]	; (80052ec <__libc_init_array+0x38>)
 80052b8:	4c0d      	ldr	r4, [pc, #52]	; (80052f0 <__libc_init_array+0x3c>)
 80052ba:	1b64      	subs	r4, r4, r5
 80052bc:	10a4      	asrs	r4, r4, #2
 80052be:	2600      	movs	r6, #0
 80052c0:	42a6      	cmp	r6, r4
 80052c2:	d109      	bne.n	80052d8 <__libc_init_array+0x24>
 80052c4:	4d0b      	ldr	r5, [pc, #44]	; (80052f4 <__libc_init_array+0x40>)
 80052c6:	4c0c      	ldr	r4, [pc, #48]	; (80052f8 <__libc_init_array+0x44>)
 80052c8:	f000 f818 	bl	80052fc <_init>
 80052cc:	1b64      	subs	r4, r4, r5
 80052ce:	10a4      	asrs	r4, r4, #2
 80052d0:	2600      	movs	r6, #0
 80052d2:	42a6      	cmp	r6, r4
 80052d4:	d105      	bne.n	80052e2 <__libc_init_array+0x2e>
 80052d6:	bd70      	pop	{r4, r5, r6, pc}
 80052d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052dc:	4798      	blx	r3
 80052de:	3601      	adds	r6, #1
 80052e0:	e7ee      	b.n	80052c0 <__libc_init_array+0xc>
 80052e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052e6:	4798      	blx	r3
 80052e8:	3601      	adds	r6, #1
 80052ea:	e7f2      	b.n	80052d2 <__libc_init_array+0x1e>
 80052ec:	08005334 	.word	0x08005334
 80052f0:	08005334 	.word	0x08005334
 80052f4:	08005334 	.word	0x08005334
 80052f8:	08005338 	.word	0x08005338

080052fc <_init>:
 80052fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fe:	bf00      	nop
 8005300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005302:	bc08      	pop	{r3}
 8005304:	469e      	mov	lr, r3
 8005306:	4770      	bx	lr

08005308 <_fini>:
 8005308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530a:	bf00      	nop
 800530c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530e:	bc08      	pop	{r3}
 8005310:	469e      	mov	lr, r3
 8005312:	4770      	bx	lr
