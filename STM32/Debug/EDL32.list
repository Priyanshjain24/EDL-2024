
EDL32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005198  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005330  08005330  00015330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005348  08005348  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005348  08005348  00015348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005350  08005350  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005350  08005350  00015350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005354  08005354  00015354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000014  0800536c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  0800536c  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef63  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024f3  00000000  00000000  0002efea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea8  00000000  00000000  000314e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b62  00000000  00000000  00032388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001876a  00000000  00000000  00032eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b39  00000000  00000000  0004b654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097c85  00000000  00000000  0005c18d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e9c  00000000  00000000  000f3e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f7cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005318 	.word	0x08005318

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08005318 	.word	0x08005318

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2uiz>:
 80007a4:	004a      	lsls	r2, r1, #1
 80007a6:	d211      	bcs.n	80007cc <__aeabi_d2uiz+0x28>
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ac:	d211      	bcs.n	80007d2 <__aeabi_d2uiz+0x2e>
 80007ae:	d50d      	bpl.n	80007cc <__aeabi_d2uiz+0x28>
 80007b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d40e      	bmi.n	80007d8 <__aeabi_d2uiz+0x34>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d102      	bne.n	80007de <__aeabi_d2uiz+0x3a>
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	4770      	bx	lr
 80007de:	f04f 0000 	mov.w	r0, #0
 80007e2:	4770      	bx	lr

080007e4 <__aeabi_uldivmod>:
 80007e4:	b953      	cbnz	r3, 80007fc <__aeabi_uldivmod+0x18>
 80007e6:	b94a      	cbnz	r2, 80007fc <__aeabi_uldivmod+0x18>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	bf08      	it	eq
 80007ec:	2800      	cmpeq	r0, #0
 80007ee:	bf1c      	itt	ne
 80007f0:	f04f 31ff 	movne.w	r1, #4294967295
 80007f4:	f04f 30ff 	movne.w	r0, #4294967295
 80007f8:	f000 b970 	b.w	8000adc <__aeabi_idiv0>
 80007fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000800:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000804:	f000 f806 	bl	8000814 <__udivmoddi4>
 8000808:	f8dd e004 	ldr.w	lr, [sp, #4]
 800080c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000810:	b004      	add	sp, #16
 8000812:	4770      	bx	lr

08000814 <__udivmoddi4>:
 8000814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000818:	9e08      	ldr	r6, [sp, #32]
 800081a:	460d      	mov	r5, r1
 800081c:	4604      	mov	r4, r0
 800081e:	460f      	mov	r7, r1
 8000820:	2b00      	cmp	r3, #0
 8000822:	d14a      	bne.n	80008ba <__udivmoddi4+0xa6>
 8000824:	428a      	cmp	r2, r1
 8000826:	4694      	mov	ip, r2
 8000828:	d965      	bls.n	80008f6 <__udivmoddi4+0xe2>
 800082a:	fab2 f382 	clz	r3, r2
 800082e:	b143      	cbz	r3, 8000842 <__udivmoddi4+0x2e>
 8000830:	fa02 fc03 	lsl.w	ip, r2, r3
 8000834:	f1c3 0220 	rsb	r2, r3, #32
 8000838:	409f      	lsls	r7, r3
 800083a:	fa20 f202 	lsr.w	r2, r0, r2
 800083e:	4317      	orrs	r7, r2
 8000840:	409c      	lsls	r4, r3
 8000842:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000846:	fa1f f58c 	uxth.w	r5, ip
 800084a:	fbb7 f1fe 	udiv	r1, r7, lr
 800084e:	0c22      	lsrs	r2, r4, #16
 8000850:	fb0e 7711 	mls	r7, lr, r1, r7
 8000854:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000858:	fb01 f005 	mul.w	r0, r1, r5
 800085c:	4290      	cmp	r0, r2
 800085e:	d90a      	bls.n	8000876 <__udivmoddi4+0x62>
 8000860:	eb1c 0202 	adds.w	r2, ip, r2
 8000864:	f101 37ff 	add.w	r7, r1, #4294967295
 8000868:	f080 811c 	bcs.w	8000aa4 <__udivmoddi4+0x290>
 800086c:	4290      	cmp	r0, r2
 800086e:	f240 8119 	bls.w	8000aa4 <__udivmoddi4+0x290>
 8000872:	3902      	subs	r1, #2
 8000874:	4462      	add	r2, ip
 8000876:	1a12      	subs	r2, r2, r0
 8000878:	b2a4      	uxth	r4, r4
 800087a:	fbb2 f0fe 	udiv	r0, r2, lr
 800087e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000882:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000886:	fb00 f505 	mul.w	r5, r0, r5
 800088a:	42a5      	cmp	r5, r4
 800088c:	d90a      	bls.n	80008a4 <__udivmoddi4+0x90>
 800088e:	eb1c 0404 	adds.w	r4, ip, r4
 8000892:	f100 32ff 	add.w	r2, r0, #4294967295
 8000896:	f080 8107 	bcs.w	8000aa8 <__udivmoddi4+0x294>
 800089a:	42a5      	cmp	r5, r4
 800089c:	f240 8104 	bls.w	8000aa8 <__udivmoddi4+0x294>
 80008a0:	4464      	add	r4, ip
 80008a2:	3802      	subs	r0, #2
 80008a4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008a8:	1b64      	subs	r4, r4, r5
 80008aa:	2100      	movs	r1, #0
 80008ac:	b11e      	cbz	r6, 80008b6 <__udivmoddi4+0xa2>
 80008ae:	40dc      	lsrs	r4, r3
 80008b0:	2300      	movs	r3, #0
 80008b2:	e9c6 4300 	strd	r4, r3, [r6]
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d908      	bls.n	80008d0 <__udivmoddi4+0xbc>
 80008be:	2e00      	cmp	r6, #0
 80008c0:	f000 80ed 	beq.w	8000a9e <__udivmoddi4+0x28a>
 80008c4:	2100      	movs	r1, #0
 80008c6:	e9c6 0500 	strd	r0, r5, [r6]
 80008ca:	4608      	mov	r0, r1
 80008cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d0:	fab3 f183 	clz	r1, r3
 80008d4:	2900      	cmp	r1, #0
 80008d6:	d149      	bne.n	800096c <__udivmoddi4+0x158>
 80008d8:	42ab      	cmp	r3, r5
 80008da:	d302      	bcc.n	80008e2 <__udivmoddi4+0xce>
 80008dc:	4282      	cmp	r2, r0
 80008de:	f200 80f8 	bhi.w	8000ad2 <__udivmoddi4+0x2be>
 80008e2:	1a84      	subs	r4, r0, r2
 80008e4:	eb65 0203 	sbc.w	r2, r5, r3
 80008e8:	2001      	movs	r0, #1
 80008ea:	4617      	mov	r7, r2
 80008ec:	2e00      	cmp	r6, #0
 80008ee:	d0e2      	beq.n	80008b6 <__udivmoddi4+0xa2>
 80008f0:	e9c6 4700 	strd	r4, r7, [r6]
 80008f4:	e7df      	b.n	80008b6 <__udivmoddi4+0xa2>
 80008f6:	b902      	cbnz	r2, 80008fa <__udivmoddi4+0xe6>
 80008f8:	deff      	udf	#255	; 0xff
 80008fa:	fab2 f382 	clz	r3, r2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	f040 8090 	bne.w	8000a24 <__udivmoddi4+0x210>
 8000904:	1a8a      	subs	r2, r1, r2
 8000906:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800090a:	fa1f fe8c 	uxth.w	lr, ip
 800090e:	2101      	movs	r1, #1
 8000910:	fbb2 f5f7 	udiv	r5, r2, r7
 8000914:	fb07 2015 	mls	r0, r7, r5, r2
 8000918:	0c22      	lsrs	r2, r4, #16
 800091a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800091e:	fb0e f005 	mul.w	r0, lr, r5
 8000922:	4290      	cmp	r0, r2
 8000924:	d908      	bls.n	8000938 <__udivmoddi4+0x124>
 8000926:	eb1c 0202 	adds.w	r2, ip, r2
 800092a:	f105 38ff 	add.w	r8, r5, #4294967295
 800092e:	d202      	bcs.n	8000936 <__udivmoddi4+0x122>
 8000930:	4290      	cmp	r0, r2
 8000932:	f200 80cb 	bhi.w	8000acc <__udivmoddi4+0x2b8>
 8000936:	4645      	mov	r5, r8
 8000938:	1a12      	subs	r2, r2, r0
 800093a:	b2a4      	uxth	r4, r4
 800093c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000940:	fb07 2210 	mls	r2, r7, r0, r2
 8000944:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000948:	fb0e fe00 	mul.w	lr, lr, r0
 800094c:	45a6      	cmp	lr, r4
 800094e:	d908      	bls.n	8000962 <__udivmoddi4+0x14e>
 8000950:	eb1c 0404 	adds.w	r4, ip, r4
 8000954:	f100 32ff 	add.w	r2, r0, #4294967295
 8000958:	d202      	bcs.n	8000960 <__udivmoddi4+0x14c>
 800095a:	45a6      	cmp	lr, r4
 800095c:	f200 80bb 	bhi.w	8000ad6 <__udivmoddi4+0x2c2>
 8000960:	4610      	mov	r0, r2
 8000962:	eba4 040e 	sub.w	r4, r4, lr
 8000966:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800096a:	e79f      	b.n	80008ac <__udivmoddi4+0x98>
 800096c:	f1c1 0720 	rsb	r7, r1, #32
 8000970:	408b      	lsls	r3, r1
 8000972:	fa22 fc07 	lsr.w	ip, r2, r7
 8000976:	ea4c 0c03 	orr.w	ip, ip, r3
 800097a:	fa05 f401 	lsl.w	r4, r5, r1
 800097e:	fa20 f307 	lsr.w	r3, r0, r7
 8000982:	40fd      	lsrs	r5, r7
 8000984:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000988:	4323      	orrs	r3, r4
 800098a:	fbb5 f8f9 	udiv	r8, r5, r9
 800098e:	fa1f fe8c 	uxth.w	lr, ip
 8000992:	fb09 5518 	mls	r5, r9, r8, r5
 8000996:	0c1c      	lsrs	r4, r3, #16
 8000998:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800099c:	fb08 f50e 	mul.w	r5, r8, lr
 80009a0:	42a5      	cmp	r5, r4
 80009a2:	fa02 f201 	lsl.w	r2, r2, r1
 80009a6:	fa00 f001 	lsl.w	r0, r0, r1
 80009aa:	d90b      	bls.n	80009c4 <__udivmoddi4+0x1b0>
 80009ac:	eb1c 0404 	adds.w	r4, ip, r4
 80009b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80009b4:	f080 8088 	bcs.w	8000ac8 <__udivmoddi4+0x2b4>
 80009b8:	42a5      	cmp	r5, r4
 80009ba:	f240 8085 	bls.w	8000ac8 <__udivmoddi4+0x2b4>
 80009be:	f1a8 0802 	sub.w	r8, r8, #2
 80009c2:	4464      	add	r4, ip
 80009c4:	1b64      	subs	r4, r4, r5
 80009c6:	b29d      	uxth	r5, r3
 80009c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80009cc:	fb09 4413 	mls	r4, r9, r3, r4
 80009d0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009d4:	fb03 fe0e 	mul.w	lr, r3, lr
 80009d8:	45a6      	cmp	lr, r4
 80009da:	d908      	bls.n	80009ee <__udivmoddi4+0x1da>
 80009dc:	eb1c 0404 	adds.w	r4, ip, r4
 80009e0:	f103 35ff 	add.w	r5, r3, #4294967295
 80009e4:	d26c      	bcs.n	8000ac0 <__udivmoddi4+0x2ac>
 80009e6:	45a6      	cmp	lr, r4
 80009e8:	d96a      	bls.n	8000ac0 <__udivmoddi4+0x2ac>
 80009ea:	3b02      	subs	r3, #2
 80009ec:	4464      	add	r4, ip
 80009ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009f2:	fba3 9502 	umull	r9, r5, r3, r2
 80009f6:	eba4 040e 	sub.w	r4, r4, lr
 80009fa:	42ac      	cmp	r4, r5
 80009fc:	46c8      	mov	r8, r9
 80009fe:	46ae      	mov	lr, r5
 8000a00:	d356      	bcc.n	8000ab0 <__udivmoddi4+0x29c>
 8000a02:	d053      	beq.n	8000aac <__udivmoddi4+0x298>
 8000a04:	b156      	cbz	r6, 8000a1c <__udivmoddi4+0x208>
 8000a06:	ebb0 0208 	subs.w	r2, r0, r8
 8000a0a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a12:	40ca      	lsrs	r2, r1
 8000a14:	40cc      	lsrs	r4, r1
 8000a16:	4317      	orrs	r7, r2
 8000a18:	e9c6 7400 	strd	r7, r4, [r6]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	2100      	movs	r1, #0
 8000a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a24:	f1c3 0120 	rsb	r1, r3, #32
 8000a28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a2c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a30:	fa25 f101 	lsr.w	r1, r5, r1
 8000a34:	409d      	lsls	r5, r3
 8000a36:	432a      	orrs	r2, r5
 8000a38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a3c:	fa1f fe8c 	uxth.w	lr, ip
 8000a40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a44:	fb07 1510 	mls	r5, r7, r0, r1
 8000a48:	0c11      	lsrs	r1, r2, #16
 8000a4a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a4e:	fb00 f50e 	mul.w	r5, r0, lr
 8000a52:	428d      	cmp	r5, r1
 8000a54:	fa04 f403 	lsl.w	r4, r4, r3
 8000a58:	d908      	bls.n	8000a6c <__udivmoddi4+0x258>
 8000a5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000a5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a62:	d22f      	bcs.n	8000ac4 <__udivmoddi4+0x2b0>
 8000a64:	428d      	cmp	r5, r1
 8000a66:	d92d      	bls.n	8000ac4 <__udivmoddi4+0x2b0>
 8000a68:	3802      	subs	r0, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	1b49      	subs	r1, r1, r5
 8000a6e:	b292      	uxth	r2, r2
 8000a70:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a74:	fb07 1115 	mls	r1, r7, r5, r1
 8000a78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a7c:	fb05 f10e 	mul.w	r1, r5, lr
 8000a80:	4291      	cmp	r1, r2
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x282>
 8000a84:	eb1c 0202 	adds.w	r2, ip, r2
 8000a88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a8c:	d216      	bcs.n	8000abc <__udivmoddi4+0x2a8>
 8000a8e:	4291      	cmp	r1, r2
 8000a90:	d914      	bls.n	8000abc <__udivmoddi4+0x2a8>
 8000a92:	3d02      	subs	r5, #2
 8000a94:	4462      	add	r2, ip
 8000a96:	1a52      	subs	r2, r2, r1
 8000a98:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a9c:	e738      	b.n	8000910 <__udivmoddi4+0xfc>
 8000a9e:	4631      	mov	r1, r6
 8000aa0:	4630      	mov	r0, r6
 8000aa2:	e708      	b.n	80008b6 <__udivmoddi4+0xa2>
 8000aa4:	4639      	mov	r1, r7
 8000aa6:	e6e6      	b.n	8000876 <__udivmoddi4+0x62>
 8000aa8:	4610      	mov	r0, r2
 8000aaa:	e6fb      	b.n	80008a4 <__udivmoddi4+0x90>
 8000aac:	4548      	cmp	r0, r9
 8000aae:	d2a9      	bcs.n	8000a04 <__udivmoddi4+0x1f0>
 8000ab0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ab4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	e7a3      	b.n	8000a04 <__udivmoddi4+0x1f0>
 8000abc:	4645      	mov	r5, r8
 8000abe:	e7ea      	b.n	8000a96 <__udivmoddi4+0x282>
 8000ac0:	462b      	mov	r3, r5
 8000ac2:	e794      	b.n	80009ee <__udivmoddi4+0x1da>
 8000ac4:	4640      	mov	r0, r8
 8000ac6:	e7d1      	b.n	8000a6c <__udivmoddi4+0x258>
 8000ac8:	46d0      	mov	r8, sl
 8000aca:	e77b      	b.n	80009c4 <__udivmoddi4+0x1b0>
 8000acc:	3d02      	subs	r5, #2
 8000ace:	4462      	add	r2, ip
 8000ad0:	e732      	b.n	8000938 <__udivmoddi4+0x124>
 8000ad2:	4608      	mov	r0, r1
 8000ad4:	e70a      	b.n	80008ec <__udivmoddi4+0xd8>
 8000ad6:	4464      	add	r4, ip
 8000ad8:	3802      	subs	r0, #2
 8000ada:	e742      	b.n	8000962 <__udivmoddi4+0x14e>

08000adc <__aeabi_idiv0>:
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <iBus_Check_CHKSUM>:


#include "FS-iA6B.h"

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8000aec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000af0:	81fb      	strh	r3, [r7, #14]

	for(int i=0;i<len-2;i++)
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	e00a      	b.n	8000b0e <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	89fa      	ldrh	r2, [r7, #14]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<len-2;i++)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	78fb      	ldrb	r3, [r7, #3]
 8000b10:	3b02      	subs	r3, #2
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dbef      	blt.n	8000af8 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8)==data[31]);
 8000b18:	89fb      	ldrh	r3, [r7, #14]
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	321e      	adds	r2, #30
 8000b20:	7812      	ldrb	r2, [r2, #0]
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d10a      	bne.n	8000b3c <iBus_Check_CHKSUM+0x5c>
 8000b26:	89fb      	ldrh	r3, [r7, #14]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	331f      	adds	r3, #31
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d101      	bne.n	8000b3c <iBus_Check_CHKSUM+0x5c>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e000      	b.n	8000b3e <iBus_Check_CHKSUM+0x5e>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	b2db      	uxtb	r3, r3
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <__NVIC_GetPriorityGrouping+0x18>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	f003 0307 	and.w	r3, r3, #7
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	db0b      	blt.n	8000b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	f003 021f 	and.w	r2, r3, #31
 8000b80:	4907      	ldr	r1, [pc, #28]	; (8000ba0 <__NVIC_EnableIRQ+0x38>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	095b      	lsrs	r3, r3, #5
 8000b88:	2001      	movs	r0, #1
 8000b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000e100 	.word	0xe000e100

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db0a      	blt.n	8000bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	490c      	ldr	r1, [pc, #48]	; (8000bf0 <__NVIC_SetPriority+0x4c>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bcc:	e00a      	b.n	8000be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4908      	ldr	r1, [pc, #32]	; (8000bf4 <__NVIC_SetPriority+0x50>)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	3b04      	subs	r3, #4
 8000bdc:	0112      	lsls	r2, r2, #4
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	440b      	add	r3, r1
 8000be2:	761a      	strb	r2, [r3, #24]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000e100 	.word	0xe000e100
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	; 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f1c3 0307 	rsb	r3, r3, #7
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	bf28      	it	cs
 8000c16:	2304      	movcs	r3, #4
 8000c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d902      	bls.n	8000c28 <NVIC_EncodePriority+0x30>
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3b03      	subs	r3, #3
 8000c26:	e000      	b.n	8000c2a <NVIC_EncodePriority+0x32>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43da      	mvns	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	4313      	orrs	r3, r2
         );
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	; 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	60da      	str	r2, [r3, #12]
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	615a      	str	r2, [r3, #20]
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b089      	sub	sp, #36	; 0x24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	330c      	adds	r3, #12
 8000cb6:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	e853 3f00 	ldrex	r3, [r3]
 8000cbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	f043 0320 	orr.w	r3, r3, #32
 8000cc6:	61fb      	str	r3, [r7, #28]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	330c      	adds	r3, #12
 8000ccc:	69fa      	ldr	r2, [r7, #28]
 8000cce:	61ba      	str	r2, [r7, #24]
 8000cd0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000cd2:	6979      	ldr	r1, [r7, #20]
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	e841 2300 	strex	r3, r2, [r1]
 8000cda:	613b      	str	r3, [r7, #16]
   return(result);
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1e7      	bne.n	8000cb2 <LL_USART_EnableIT_RXNE+0x8>
}
 8000ce2:	bf00      	nop
 8000ce4:	bf00      	nop
 8000ce6:	3724      	adds	r7, #36	; 0x24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cfc:	4907      	ldr	r1, [pc, #28]	; (8000d1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	40023800 	.word	0x40023800

08000d20 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d2c:	4907      	ldr	r1, [pc, #28]	; (8000d4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	40023800 	.word	0x40023800

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b5b0      	push	{r4, r5, r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d54:	f000 fe1c 	bl	8001990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d58:	f000 fa16 	bl	8001188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5c:	f000 fbb4 	bl	80014c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d60:	f000 fb28 	bl	80013b4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000d64:	f000 fb86 	bl	8001474 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000d68:	f000 fa78 	bl	800125c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  LL_USART_EnableIT_RXNE(USART2);
 8000d6c:	4847      	ldr	r0, [pc, #284]	; (8000e8c <main+0x13c>)
 8000d6e:	f7ff ff9c 	bl	8000caa <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART6);
 8000d72:	4847      	ldr	r0, [pc, #284]	; (8000e90 <main+0x140>)
 8000d74:	f7ff ff99 	bl	8000caa <LL_USART_EnableIT_RXNE>


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);   // Output PWM Generation
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4846      	ldr	r0, [pc, #280]	; (8000e94 <main+0x144>)
 8000d7c:	f001 fefa 	bl	8002b74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);   // Output PWM Generation
 8000d80:	2104      	movs	r1, #4
 8000d82:	4844      	ldr	r0, [pc, #272]	; (8000e94 <main+0x144>)
 8000d84:	f001 fef6 	bl	8002b74 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(ibus_rx_cplt_flag == 1)
 8000d88:	4b43      	ldr	r3, [pc, #268]	; (8000e98 <main+0x148>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d168      	bne.n	8000e62 <main+0x112>
	  {
		  ibus_rx_cplt_flag = 0;
 8000d90:	4b41      	ldr	r3, [pc, #260]	; (8000e98 <main+0x148>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
		  if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 8000d96:	2120      	movs	r1, #32
 8000d98:	4840      	ldr	r0, [pc, #256]	; (8000e9c <main+0x14c>)
 8000d9a:	f7ff fea1 	bl	8000ae0 <iBus_Check_CHKSUM>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d15e      	bne.n	8000e62 <main+0x112>
		  {
		  	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000da4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da8:	483d      	ldr	r0, [pc, #244]	; (8000ea0 <main+0x150>)
 8000daa:	f001 f9c8 	bl	800213e <HAL_GPIO_TogglePin>
			  	rxValues[0] = (ibus_rx_buf[2] | ibus_rx_buf[3]<<8);
 8000dae:	4b3b      	ldr	r3, [pc, #236]	; (8000e9c <main+0x14c>)
 8000db0:	789b      	ldrb	r3, [r3, #2]
 8000db2:	b21a      	sxth	r2, r3
 8000db4:	4b39      	ldr	r3, [pc, #228]	; (8000e9c <main+0x14c>)
 8000db6:	78db      	ldrb	r3, [r3, #3]
 8000db8:	021b      	lsls	r3, r3, #8
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	4b38      	ldr	r3, [pc, #224]	; (8000ea4 <main+0x154>)
 8000dc4:	801a      	strh	r2, [r3, #0]
			  	rxValues[1] = (ibus_rx_buf[4] | ibus_rx_buf[5]<<8);
 8000dc6:	4b35      	ldr	r3, [pc, #212]	; (8000e9c <main+0x14c>)
 8000dc8:	791b      	ldrb	r3, [r3, #4]
 8000dca:	b21a      	sxth	r2, r3
 8000dcc:	4b33      	ldr	r3, [pc, #204]	; (8000e9c <main+0x14c>)
 8000dce:	795b      	ldrb	r3, [r3, #5]
 8000dd0:	021b      	lsls	r3, r3, #8
 8000dd2:	b21b      	sxth	r3, r3
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	b21b      	sxth	r3, r3
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <main+0x154>)
 8000ddc:	805a      	strh	r2, [r3, #2]
			  	rxValues[2] = (ibus_rx_buf[6] | ibus_rx_buf[7]<<8);
 8000dde:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <main+0x14c>)
 8000de0:	799b      	ldrb	r3, [r3, #6]
 8000de2:	b21a      	sxth	r2, r3
 8000de4:	4b2d      	ldr	r3, [pc, #180]	; (8000e9c <main+0x14c>)
 8000de6:	79db      	ldrb	r3, [r3, #7]
 8000de8:	021b      	lsls	r3, r3, #8
 8000dea:	b21b      	sxth	r3, r3
 8000dec:	4313      	orrs	r3, r2
 8000dee:	b21b      	sxth	r3, r3
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <main+0x154>)
 8000df4:	809a      	strh	r2, [r3, #4]
			  	rxValues[3] = (ibus_rx_buf[8] | ibus_rx_buf[9]<<8);
 8000df6:	4b29      	ldr	r3, [pc, #164]	; (8000e9c <main+0x14c>)
 8000df8:	7a1b      	ldrb	r3, [r3, #8]
 8000dfa:	b21a      	sxth	r2, r3
 8000dfc:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <main+0x14c>)
 8000dfe:	7a5b      	ldrb	r3, [r3, #9]
 8000e00:	021b      	lsls	r3, r3, #8
 8000e02:	b21b      	sxth	r3, r3
 8000e04:	4313      	orrs	r3, r2
 8000e06:	b21b      	sxth	r3, r3
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <main+0x154>)
 8000e0c:	80da      	strh	r2, [r3, #6]
			  	rxValues[4] = (ibus_rx_buf[10] | ibus_rx_buf[11]<<8);
 8000e0e:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <main+0x14c>)
 8000e10:	7a9b      	ldrb	r3, [r3, #10]
 8000e12:	b21a      	sxth	r2, r3
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <main+0x14c>)
 8000e16:	7adb      	ldrb	r3, [r3, #11]
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <main+0x154>)
 8000e24:	811a      	strh	r2, [r3, #8]
			  	rxValues[5] = (ibus_rx_buf[12] | ibus_rx_buf[13]<<8);
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <main+0x14c>)
 8000e28:	7b1b      	ldrb	r3, [r3, #12]
 8000e2a:	b21a      	sxth	r2, r3
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <main+0x14c>)
 8000e2e:	7b5b      	ldrb	r3, [r3, #13]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	b21b      	sxth	r3, r3
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <main+0x154>)
 8000e3c:	815a      	strh	r2, [r3, #10]
			  	rxValues[6] = (ibus_rx_buf[14] | ibus_rx_buf[15]<<8);
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <main+0x14c>)
 8000e40:	7b9b      	ldrb	r3, [r3, #14]
 8000e42:	b21a      	sxth	r2, r3
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <main+0x14c>)
 8000e46:	7bdb      	ldrb	r3, [r3, #15]
 8000e48:	021b      	lsls	r3, r3, #8
 8000e4a:	b21b      	sxth	r3, r3
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <main+0x154>)
 8000e54:	819a      	strh	r2, [r3, #12]
			  HAL_UART_Transmit(&huart6, ibus_rx_buf, 32, 100);
 8000e56:	2364      	movs	r3, #100	; 0x64
 8000e58:	2220      	movs	r2, #32
 8000e5a:	4910      	ldr	r1, [pc, #64]	; (8000e9c <main+0x14c>)
 8000e5c:	4812      	ldr	r0, [pc, #72]	; (8000ea8 <main+0x158>)
 8000e5e:	f002 fcab 	bl	80037b8 <HAL_UART_Transmit>

		  }
	  }

	  speed = rxValues[1];
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <main+0x154>)
 8000e64:	885b      	ldrh	r3, [r3, #2]
 8000e66:	b21a      	sxth	r2, r3
 8000e68:	4b10      	ldr	r3, [pc, #64]	; (8000eac <main+0x15c>)
 8000e6a:	801a      	strh	r2, [r3, #0]
	  steering = rxValues[3];
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <main+0x154>)
 8000e6e:	88db      	ldrh	r3, [r3, #6]
 8000e70:	b21a      	sxth	r2, r3
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <main+0x160>)
 8000e74:	801a      	strh	r2, [r3, #0]
	  if(rxValues[6] > 1500) LED = 1;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <main+0x154>)
 8000e78:	899b      	ldrh	r3, [r3, #12]
 8000e7a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d91a      	bls.n	8000eb8 <main+0x168>
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <main+0x164>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	801a      	strh	r2, [r3, #0]
 8000e88:	e019      	b.n	8000ebe <main+0x16e>
 8000e8a:	bf00      	nop
 8000e8c:	40004400 	.word	0x40004400
 8000e90:	40011400 	.word	0x40011400
 8000e94:	20000030 	.word	0x20000030
 8000e98:	20000110 	.word	0x20000110
 8000e9c:	200000f0 	.word	0x200000f0
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	200000c0 	.word	0x200000c0
 8000ea8:	20000078 	.word	0x20000078
 8000eac:	200000d8 	.word	0x200000d8
 8000eb0:	200000de 	.word	0x200000de
 8000eb4:	200000ce 	.word	0x200000ce
	  else LED = 0;
 8000eb8:	4ba1      	ldr	r3, [pc, #644]	; (8001140 <main+0x3f0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	801a      	strh	r2, [r3, #0]
//	  movingSum = movingSum/window_size;
//	  window_index = (window_index + 1)%window_size;
//	  speed = movingSum;

	  //smoothing
	  smoothing = speed*0.20 + smoothingPrev*0.80;
 8000ebe:	4ba1      	ldr	r3, [pc, #644]	; (8001144 <main+0x3f4>)
 8000ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fc03 	bl	80006d0 <__aeabi_i2d>
 8000eca:	a399      	add	r3, pc, #612	; (adr r3, 8001130 <main+0x3e0>)
 8000ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed0:	f7ff f982 	bl	80001d8 <__aeabi_dmul>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4614      	mov	r4, r2
 8000eda:	461d      	mov	r5, r3
 8000edc:	4b9a      	ldr	r3, [pc, #616]	; (8001148 <main+0x3f8>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fbf5 	bl	80006d0 <__aeabi_i2d>
 8000ee6:	a394      	add	r3, pc, #592	; (adr r3, 8001138 <main+0x3e8>)
 8000ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eec:	f7ff f974 	bl	80001d8 <__aeabi_dmul>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	4629      	mov	r1, r5
 8000ef8:	f7ff fa9e 	bl	8000438 <__adddf3>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
 8000f00:	4610      	mov	r0, r2
 8000f02:	4619      	mov	r1, r3
 8000f04:	f7ff fc4e 	bl	80007a4 <__aeabi_d2uiz>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	4b8f      	ldr	r3, [pc, #572]	; (800114c <main+0x3fc>)
 8000f0e:	801a      	strh	r2, [r3, #0]
	  smoothingPrev = smoothing;
 8000f10:	4b8e      	ldr	r3, [pc, #568]	; (800114c <main+0x3fc>)
 8000f12:	881a      	ldrh	r2, [r3, #0]
 8000f14:	4b8c      	ldr	r3, [pc, #560]	; (8001148 <main+0x3f8>)
 8000f16:	801a      	strh	r2, [r3, #0]
	  speed = smoothing;
 8000f18:	4b8c      	ldr	r3, [pc, #560]	; (800114c <main+0x3fc>)
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	b21a      	sxth	r2, r3
 8000f1e:	4b89      	ldr	r3, [pc, #548]	; (8001144 <main+0x3f4>)
 8000f20:	801a      	strh	r2, [r3, #0]

	  smoothing1 = steering*0.20 + smoothingPrev1*0.80;
 8000f22:	4b8b      	ldr	r3, [pc, #556]	; (8001150 <main+0x400>)
 8000f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fbd1 	bl	80006d0 <__aeabi_i2d>
 8000f2e:	a380      	add	r3, pc, #512	; (adr r3, 8001130 <main+0x3e0>)
 8000f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f34:	f7ff f950 	bl	80001d8 <__aeabi_dmul>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4614      	mov	r4, r2
 8000f3e:	461d      	mov	r5, r3
 8000f40:	4b84      	ldr	r3, [pc, #528]	; (8001154 <main+0x404>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fbc3 	bl	80006d0 <__aeabi_i2d>
 8000f4a:	a37b      	add	r3, pc, #492	; (adr r3, 8001138 <main+0x3e8>)
 8000f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f50:	f7ff f942 	bl	80001d8 <__aeabi_dmul>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4620      	mov	r0, r4
 8000f5a:	4629      	mov	r1, r5
 8000f5c:	f7ff fa6c 	bl	8000438 <__adddf3>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4610      	mov	r0, r2
 8000f66:	4619      	mov	r1, r3
 8000f68:	f7ff fc1c 	bl	80007a4 <__aeabi_d2uiz>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	4b79      	ldr	r3, [pc, #484]	; (8001158 <main+0x408>)
 8000f72:	801a      	strh	r2, [r3, #0]
	  smoothingPrev1 = smoothing1;
 8000f74:	4b78      	ldr	r3, [pc, #480]	; (8001158 <main+0x408>)
 8000f76:	881a      	ldrh	r2, [r3, #0]
 8000f78:	4b76      	ldr	r3, [pc, #472]	; (8001154 <main+0x404>)
 8000f7a:	801a      	strh	r2, [r3, #0]
	  steering = smoothing1;
 8000f7c:	4b76      	ldr	r3, [pc, #472]	; (8001158 <main+0x408>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	4b73      	ldr	r3, [pc, #460]	; (8001150 <main+0x400>)
 8000f84:	801a      	strh	r2, [r3, #0]
//
	  speed = speed - 1500;
 8000f86:	4b6f      	ldr	r3, [pc, #444]	; (8001144 <main+0x3f4>)
 8000f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	4b6b      	ldr	r3, [pc, #428]	; (8001144 <main+0x3f4>)
 8000f98:	801a      	strh	r2, [r3, #0]
	  steering = steering - 1500;
 8000f9a:	4b6d      	ldr	r3, [pc, #436]	; (8001150 <main+0x400>)
 8000f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	4b69      	ldr	r3, [pc, #420]	; (8001150 <main+0x400>)
 8000fac:	801a      	strh	r2, [r3, #0]
	  if (speed > -50 && speed < 50){speed = 0;}
 8000fae:	4b65      	ldr	r3, [pc, #404]	; (8001144 <main+0x3f4>)
 8000fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb4:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8000fb8:	db07      	blt.n	8000fca <main+0x27a>
 8000fba:	4b62      	ldr	r3, [pc, #392]	; (8001144 <main+0x3f4>)
 8000fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc0:	2b31      	cmp	r3, #49	; 0x31
 8000fc2:	dc02      	bgt.n	8000fca <main+0x27a>
 8000fc4:	4b5f      	ldr	r3, [pc, #380]	; (8001144 <main+0x3f4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	801a      	strh	r2, [r3, #0]
	  if (steering > -50 && steering < 50){steering = 0;}
 8000fca:	4b61      	ldr	r3, [pc, #388]	; (8001150 <main+0x400>)
 8000fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd0:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8000fd4:	db07      	blt.n	8000fe6 <main+0x296>
 8000fd6:	4b5e      	ldr	r3, [pc, #376]	; (8001150 <main+0x400>)
 8000fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fdc:	2b31      	cmp	r3, #49	; 0x31
 8000fde:	dc02      	bgt.n	8000fe6 <main+0x296>
 8000fe0:	4b5b      	ldr	r3, [pc, #364]	; (8001150 <main+0x400>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	801a      	strh	r2, [r3, #0]
//		  directionR = direction;
//		  directionL = !direction;

		  ////////////////////////////////////////////////

		  directionL = 0;
 8000fe6:	4b5d      	ldr	r3, [pc, #372]	; (800115c <main+0x40c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	801a      	strh	r2, [r3, #0]
		  directionR = 0;
 8000fec:	4b5c      	ldr	r3, [pc, #368]	; (8001160 <main+0x410>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	801a      	strh	r2, [r3, #0]



		  speedL = speed - (int16_t)(k*steering/500);
 8000ff2:	4b54      	ldr	r3, [pc, #336]	; (8001144 <main+0x3f4>)
 8000ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	4b55      	ldr	r3, [pc, #340]	; (8001150 <main+0x400>)
 8000ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001000:	4619      	mov	r1, r3
 8001002:	4b58      	ldr	r3, [pc, #352]	; (8001164 <main+0x414>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	fb01 f303 	mul.w	r3, r1, r3
 800100a:	4957      	ldr	r1, [pc, #348]	; (8001168 <main+0x418>)
 800100c:	fb81 0103 	smull	r0, r1, r1, r3
 8001010:	1149      	asrs	r1, r1, #5
 8001012:	17db      	asrs	r3, r3, #31
 8001014:	1acb      	subs	r3, r1, r3
 8001016:	b29b      	uxth	r3, r3
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	b29b      	uxth	r3, r3
 800101c:	b21a      	sxth	r2, r3
 800101e:	4b53      	ldr	r3, [pc, #332]	; (800116c <main+0x41c>)
 8001020:	801a      	strh	r2, [r3, #0]
		  speedR = speed + (int16_t)(k*steering/500);
 8001022:	4b4b      	ldr	r3, [pc, #300]	; (8001150 <main+0x400>)
 8001024:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001028:	461a      	mov	r2, r3
 800102a:	4b4e      	ldr	r3, [pc, #312]	; (8001164 <main+0x414>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	fb02 f303 	mul.w	r3, r2, r3
 8001032:	4a4d      	ldr	r2, [pc, #308]	; (8001168 <main+0x418>)
 8001034:	fb82 1203 	smull	r1, r2, r2, r3
 8001038:	1152      	asrs	r2, r2, #5
 800103a:	17db      	asrs	r3, r3, #31
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	b29a      	uxth	r2, r3
 8001040:	4b40      	ldr	r3, [pc, #256]	; (8001144 <main+0x3f4>)
 8001042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001046:	b29b      	uxth	r3, r3
 8001048:	4413      	add	r3, r2
 800104a:	b29b      	uxth	r3, r3
 800104c:	b21a      	sxth	r2, r3
 800104e:	4b48      	ldr	r3, [pc, #288]	; (8001170 <main+0x420>)
 8001050:	801a      	strh	r2, [r3, #0]


		  if(speedL < 0){
 8001052:	4b46      	ldr	r3, [pc, #280]	; (800116c <main+0x41c>)
 8001054:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001058:	2b00      	cmp	r3, #0
 800105a:	da0b      	bge.n	8001074 <main+0x324>
			  directionL = 1;
 800105c:	4b3f      	ldr	r3, [pc, #252]	; (800115c <main+0x40c>)
 800105e:	2201      	movs	r2, #1
 8001060:	801a      	strh	r2, [r3, #0]
			  speedL = speedL*-1;
 8001062:	4b42      	ldr	r3, [pc, #264]	; (800116c <main+0x41c>)
 8001064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001068:	b29b      	uxth	r3, r3
 800106a:	425b      	negs	r3, r3
 800106c:	b29b      	uxth	r3, r3
 800106e:	b21a      	sxth	r2, r3
 8001070:	4b3e      	ldr	r3, [pc, #248]	; (800116c <main+0x41c>)
 8001072:	801a      	strh	r2, [r3, #0]
		  }
		  if(speedR < 0){
 8001074:	4b3e      	ldr	r3, [pc, #248]	; (8001170 <main+0x420>)
 8001076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800107a:	2b00      	cmp	r3, #0
 800107c:	da0b      	bge.n	8001096 <main+0x346>
			  directionR = 1;
 800107e:	4b38      	ldr	r3, [pc, #224]	; (8001160 <main+0x410>)
 8001080:	2201      	movs	r2, #1
 8001082:	801a      	strh	r2, [r3, #0]
			  speedR = speedR*-1;
 8001084:	4b3a      	ldr	r3, [pc, #232]	; (8001170 <main+0x420>)
 8001086:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108a:	b29b      	uxth	r3, r3
 800108c:	425b      	negs	r3, r3
 800108e:	b29b      	uxth	r3, r3
 8001090:	b21a      	sxth	r2, r3
 8001092:	4b37      	ldr	r3, [pc, #220]	; (8001170 <main+0x420>)
 8001094:	801a      	strh	r2, [r3, #0]





	  dutyL = (uint16_t) ((speedL*CounterPeriod)/(500 + k));
 8001096:	4b35      	ldr	r3, [pc, #212]	; (800116c <main+0x41c>)
 8001098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109c:	461a      	mov	r2, r3
 800109e:	4b35      	ldr	r3, [pc, #212]	; (8001174 <main+0x424>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	fb03 f202 	mul.w	r2, r3, r2
 80010a6:	4b2f      	ldr	r3, [pc, #188]	; (8001164 <main+0x414>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80010ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b30      	ldr	r3, [pc, #192]	; (8001178 <main+0x428>)
 80010b8:	601a      	str	r2, [r3, #0]
	  dutyR = (uint16_t) ((speedR*CounterPeriod)/(500 + k));
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <main+0x420>)
 80010bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <main+0x424>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	fb03 f202 	mul.w	r2, r3, r2
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <main+0x414>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80010d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	4b28      	ldr	r3, [pc, #160]	; (800117c <main+0x42c>)
 80010dc:	601a      	str	r2, [r3, #0]
	  TIM1->CCR1 = dutyL;
 80010de:	4b26      	ldr	r3, [pc, #152]	; (8001178 <main+0x428>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4b27      	ldr	r3, [pc, #156]	; (8001180 <main+0x430>)
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1->CCR2 = dutyR;
 80010e6:	4b25      	ldr	r3, [pc, #148]	; (800117c <main+0x42c>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4b25      	ldr	r3, [pc, #148]	; (8001180 <main+0x430>)
 80010ec:	639a      	str	r2, [r3, #56]	; 0x38
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, directionL);
 80010ee:	4b1b      	ldr	r3, [pc, #108]	; (800115c <main+0x40c>)
 80010f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010fc:	4821      	ldr	r0, [pc, #132]	; (8001184 <main+0x434>)
 80010fe:	f001 f805 	bl	800210c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, directionR);
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <main+0x410>)
 8001104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	461a      	mov	r2, r3
 800110c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001110:	481c      	ldr	r0, [pc, #112]	; (8001184 <main+0x434>)
 8001112:	f000 fffb 	bl	800210c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, LED);
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <main+0x3f0>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	461a      	mov	r2, r3
 800111e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001122:	4818      	ldr	r0, [pc, #96]	; (8001184 <main+0x434>)
 8001124:	f000 fff2 	bl	800210c <HAL_GPIO_WritePin>

	  HAL_Delay(50);
 8001128:	2032      	movs	r0, #50	; 0x32
 800112a:	f000 fca3 	bl	8001a74 <HAL_Delay>
	  if(ibus_rx_cplt_flag == 1)
 800112e:	e62b      	b.n	8000d88 <main+0x38>
 8001130:	9999999a 	.word	0x9999999a
 8001134:	3fc99999 	.word	0x3fc99999
 8001138:	9999999a 	.word	0x9999999a
 800113c:	3fe99999 	.word	0x3fe99999
 8001140:	200000ce 	.word	0x200000ce
 8001144:	200000d8 	.word	0x200000d8
 8001148:	200000e8 	.word	0x200000e8
 800114c:	200000e4 	.word	0x200000e4
 8001150:	200000de 	.word	0x200000de
 8001154:	200000ea 	.word	0x200000ea
 8001158:	200000e6 	.word	0x200000e6
 800115c:	200000e0 	.word	0x200000e0
 8001160:	200000e2 	.word	0x200000e2
 8001164:	20000004 	.word	0x20000004
 8001168:	10624dd3 	.word	0x10624dd3
 800116c:	200000da 	.word	0x200000da
 8001170:	200000dc 	.word	0x200000dc
 8001174:	20000000 	.word	0x20000000
 8001178:	200000d0 	.word	0x200000d0
 800117c:	200000d4 	.word	0x200000d4
 8001180:	40010000 	.word	0x40010000
 8001184:	40020400 	.word	0x40020400

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b094      	sub	sp, #80	; 0x50
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0320 	add.w	r3, r7, #32
 8001192:	2230      	movs	r2, #48	; 0x30
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f004 f892 	bl	80052c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	4b28      	ldr	r3, [pc, #160]	; (8001254 <SystemClock_Config+0xcc>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	4a27      	ldr	r2, [pc, #156]	; (8001254 <SystemClock_Config+0xcc>)
 80011b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
 80011bc:	4b25      	ldr	r3, [pc, #148]	; (8001254 <SystemClock_Config+0xcc>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	4b22      	ldr	r3, [pc, #136]	; (8001258 <SystemClock_Config+0xd0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011d4:	4a20      	ldr	r2, [pc, #128]	; (8001258 <SystemClock_Config+0xd0>)
 80011d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <SystemClock_Config+0xd0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e8:	2302      	movs	r3, #2
 80011ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ec:	2301      	movs	r3, #1
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f0:	2310      	movs	r3, #16
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f4:	2302      	movs	r3, #2
 80011f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011f8:	2300      	movs	r3, #0
 80011fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011fc:	2308      	movs	r3, #8
 80011fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001200:	2348      	movs	r3, #72	; 0x48
 8001202:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001204:	2302      	movs	r3, #2
 8001206:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001208:	2304      	movs	r3, #4
 800120a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120c:	f107 0320 	add.w	r3, r7, #32
 8001210:	4618      	mov	r0, r3
 8001212:	f000 ffaf 	bl	8002174 <HAL_RCC_OscConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800121c:	f000 f9cc 	bl	80015b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001220:	230f      	movs	r3, #15
 8001222:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001224:	2302      	movs	r3, #2
 8001226:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800122c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001230:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	2102      	movs	r1, #2
 800123c:	4618      	mov	r0, r3
 800123e:	f001 fa11 	bl	8002664 <HAL_RCC_ClockConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001248:	f000 f9b6 	bl	80015b8 <Error_Handler>
  }
}
 800124c:	bf00      	nop
 800124e:	3750      	adds	r7, #80	; 0x50
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40023800 	.word	0x40023800
 8001258:	40007000 	.word	0x40007000

0800125c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b096      	sub	sp, #88	; 0x58
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001262:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800127a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]
 800128a:	615a      	str	r2, [r3, #20]
 800128c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2220      	movs	r2, #32
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f004 f813 	bl	80052c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800129a:	4b44      	ldr	r3, [pc, #272]	; (80013ac <MX_TIM1_Init+0x150>)
 800129c:	4a44      	ldr	r2, [pc, #272]	; (80013b0 <MX_TIM1_Init+0x154>)
 800129e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012a0:	4b42      	ldr	r3, [pc, #264]	; (80013ac <MX_TIM1_Init+0x150>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a6:	4b41      	ldr	r3, [pc, #260]	; (80013ac <MX_TIM1_Init+0x150>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7200;
 80012ac:	4b3f      	ldr	r3, [pc, #252]	; (80013ac <MX_TIM1_Init+0x150>)
 80012ae:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80012b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b4:	4b3d      	ldr	r3, [pc, #244]	; (80013ac <MX_TIM1_Init+0x150>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012ba:	4b3c      	ldr	r3, [pc, #240]	; (80013ac <MX_TIM1_Init+0x150>)
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c0:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <MX_TIM1_Init+0x150>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012c6:	4839      	ldr	r0, [pc, #228]	; (80013ac <MX_TIM1_Init+0x150>)
 80012c8:	f001 fbac 	bl	8002a24 <HAL_TIM_Base_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012d2:	f000 f971 	bl	80015b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012e0:	4619      	mov	r1, r3
 80012e2:	4832      	ldr	r0, [pc, #200]	; (80013ac <MX_TIM1_Init+0x150>)
 80012e4:	f001 fdb8 	bl	8002e58 <HAL_TIM_ConfigClockSource>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012ee:	f000 f963 	bl	80015b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012f2:	482e      	ldr	r0, [pc, #184]	; (80013ac <MX_TIM1_Init+0x150>)
 80012f4:	f001 fbe5 	bl	8002ac2 <HAL_TIM_PWM_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012fe:	f000 f95b 	bl	80015b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800130a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800130e:	4619      	mov	r1, r3
 8001310:	4826      	ldr	r0, [pc, #152]	; (80013ac <MX_TIM1_Init+0x150>)
 8001312:	f002 f941 	bl	8003598 <HAL_TIMEx_MasterConfigSynchronization>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800131c:	f000 f94c 	bl	80015b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001320:	2360      	movs	r3, #96	; 0x60
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001328:	2300      	movs	r3, #0
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800132c:	2300      	movs	r3, #0
 800132e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001334:	2300      	movs	r3, #0
 8001336:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001338:	2300      	movs	r3, #0
 800133a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800133c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001340:	2200      	movs	r2, #0
 8001342:	4619      	mov	r1, r3
 8001344:	4819      	ldr	r0, [pc, #100]	; (80013ac <MX_TIM1_Init+0x150>)
 8001346:	f001 fcc5 	bl	8002cd4 <HAL_TIM_PWM_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001350:	f000 f932 	bl	80015b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001358:	2204      	movs	r2, #4
 800135a:	4619      	mov	r1, r3
 800135c:	4813      	ldr	r0, [pc, #76]	; (80013ac <MX_TIM1_Init+0x150>)
 800135e:	f001 fcb9 	bl	8002cd4 <HAL_TIM_PWM_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001368:	f000 f926 	bl	80015b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001380:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001384:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	4619      	mov	r1, r3
 800138e:	4807      	ldr	r0, [pc, #28]	; (80013ac <MX_TIM1_Init+0x150>)
 8001390:	f002 f970 	bl	8003674 <HAL_TIMEx_ConfigBreakDeadTime>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800139a:	f000 f90d 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  //HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // Primary channel - rising edge
  //HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2); // Primary channel - rising edge
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800139e:	4803      	ldr	r0, [pc, #12]	; (80013ac <MX_TIM1_Init+0x150>)
 80013a0:	f000 f95a 	bl	8001658 <HAL_TIM_MspPostInit>

}
 80013a4:	bf00      	nop
 80013a6:	3758      	adds	r7, #88	; 0x58
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000030 	.word	0x20000030
 80013b0:	40010000 	.word	0x40010000

080013b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08e      	sub	sp, #56	; 0x38
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]
 80013ca:	615a      	str	r2, [r3, #20]
 80013cc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80013de:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80013e2:	f7ff fc9d 	bl	8000d20 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f7ff fc82 	bl	8000cf0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80013ec:	230c      	movs	r3, #12
 80013ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013f0:	2302      	movs	r3, #2
 80013f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001400:	2307      	movs	r3, #7
 8001402:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	4619      	mov	r1, r3
 8001408:	4818      	ldr	r0, [pc, #96]	; (800146c <MX_USART2_UART_Init+0xb8>)
 800140a:	f003 fad2 	bl	80049b2 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800140e:	f7ff fb9d 	bl	8000b4c <__NVIC_GetPriorityGrouping>
 8001412:	4603      	mov	r3, r0
 8001414:	2200      	movs	r2, #0
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fbed 	bl	8000bf8 <NVIC_EncodePriority>
 800141e:	4603      	mov	r3, r0
 8001420:	4619      	mov	r1, r3
 8001422:	2026      	movs	r0, #38	; 0x26
 8001424:	f7ff fbbe 	bl	8000ba4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001428:	2026      	movs	r0, #38	; 0x26
 800142a:	f7ff fb9d 	bl	8000b68 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800142e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001432:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800143c:	2300      	movs	r3, #0
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 8001440:	2304      	movs	r3, #4
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001444:	2300      	movs	r3, #0
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001448:	2300      	movs	r3, #0
 800144a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4619      	mov	r1, r3
 8001452:	4807      	ldr	r0, [pc, #28]	; (8001470 <MX_USART2_UART_Init+0xbc>)
 8001454:	f003 fed0 	bl	80051f8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_USART2_UART_Init+0xbc>)
 800145a:	f7ff fc10 	bl	8000c7e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800145e:	4804      	ldr	r0, [pc, #16]	; (8001470 <MX_USART2_UART_Init+0xbc>)
 8001460:	f7ff fbfd 	bl	8000c5e <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	3738      	adds	r7, #56	; 0x38
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40020000 	.word	0x40020000
 8001470:	40004400 	.word	0x40004400

08001474 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_USART6_UART_Init+0x4c>)
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <MX_USART6_UART_Init+0x50>)
 800147c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <MX_USART6_UART_Init+0x4c>)
 8001480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001484:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_USART6_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_USART6_UART_Init+0x4c>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_USART6_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_USART6_UART_Init+0x4c>)
 800149a:	220c      	movs	r2, #12
 800149c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <MX_USART6_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_USART6_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_USART6_UART_Init+0x4c>)
 80014ac:	f002 f934 	bl	8003718 <HAL_UART_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80014b6:	f000 f87f 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000078 	.word	0x20000078
 80014c4:	40011400 	.word	0x40011400

080014c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b32      	ldr	r3, [pc, #200]	; (80015ac <MX_GPIO_Init+0xe4>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a31      	ldr	r2, [pc, #196]	; (80015ac <MX_GPIO_Init+0xe4>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b2f      	ldr	r3, [pc, #188]	; (80015ac <MX_GPIO_Init+0xe4>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b2b      	ldr	r3, [pc, #172]	; (80015ac <MX_GPIO_Init+0xe4>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a2a      	ldr	r2, [pc, #168]	; (80015ac <MX_GPIO_Init+0xe4>)
 8001504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b28      	ldr	r3, [pc, #160]	; (80015ac <MX_GPIO_Init+0xe4>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	4b24      	ldr	r3, [pc, #144]	; (80015ac <MX_GPIO_Init+0xe4>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a23      	ldr	r2, [pc, #140]	; (80015ac <MX_GPIO_Init+0xe4>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b21      	ldr	r3, [pc, #132]	; (80015ac <MX_GPIO_Init+0xe4>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <MX_GPIO_Init+0xe4>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a1c      	ldr	r2, [pc, #112]	; (80015ac <MX_GPIO_Init+0xe4>)
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <MX_GPIO_Init+0xe4>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001554:	4816      	ldr	r0, [pc, #88]	; (80015b0 <MX_GPIO_Init+0xe8>)
 8001556:	f000 fdd9 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	f44f 4142 	mov.w	r1, #49664	; 0xc200
 8001560:	4814      	ldr	r0, [pc, #80]	; (80015b4 <MX_GPIO_Init+0xec>)
 8001562:	f000 fdd3 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001566:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800156a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156c:	2301      	movs	r3, #1
 800156e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	4619      	mov	r1, r3
 800157e:	480c      	ldr	r0, [pc, #48]	; (80015b0 <MX_GPIO_Init+0xe8>)
 8001580:	f000 fc40 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9;
 8001584:	f44f 4342 	mov.w	r3, #49664	; 0xc200
 8001588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158a:	2301      	movs	r3, #1
 800158c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	4619      	mov	r1, r3
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_GPIO_Init+0xec>)
 800159e:	f000 fc31 	bl	8001e04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015a2:	bf00      	nop
 80015a4:	3728      	adds	r7, #40	; 0x28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020800 	.word	0x40020800
 80015b4:	40020400 	.word	0x40020400

080015b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015bc:	b672      	cpsid	i
}
 80015be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <Error_Handler+0x8>
	...

080015c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <HAL_MspInit+0x4c>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	4a0f      	ldr	r2, [pc, #60]	; (8001610 <HAL_MspInit+0x4c>)
 80015d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d8:	6453      	str	r3, [r2, #68]	; 0x44
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <HAL_MspInit+0x4c>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <HAL_MspInit+0x4c>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	4a08      	ldr	r2, [pc, #32]	; (8001610 <HAL_MspInit+0x4c>)
 80015f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f4:	6413      	str	r3, [r2, #64]	; 0x40
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_MspInit+0x4c>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800

08001614 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <HAL_TIM_Base_MspInit+0x3c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d10d      	bne.n	8001642 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <HAL_TIM_Base_MspInit+0x40>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	4a09      	ldr	r2, [pc, #36]	; (8001654 <HAL_TIM_Base_MspInit+0x40>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6453      	str	r3, [r2, #68]	; 0x44
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <HAL_TIM_Base_MspInit+0x40>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40010000 	.word	0x40010000
 8001654:	40023800 	.word	0x40023800

08001658 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <HAL_TIM_MspPostInit+0x68>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d11e      	bne.n	80016b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_TIM_MspPostInit+0x6c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <HAL_TIM_MspPostInit+0x6c>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <HAL_TIM_MspPostInit+0x6c>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001696:	f44f 7340 	mov.w	r3, #768	; 0x300
 800169a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016a8:	2301      	movs	r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	4619      	mov	r1, r3
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <HAL_TIM_MspPostInit+0x70>)
 80016b4:	f000 fba6 	bl	8001e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016b8:	bf00      	nop
 80016ba:	3720      	adds	r7, #32
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40010000 	.word	0x40010000
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020000 	.word	0x40020000

080016cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a1d      	ldr	r2, [pc, #116]	; (8001760 <HAL_UART_MspInit+0x94>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d134      	bne.n	8001758 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <HAL_UART_MspInit+0x98>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	4a1b      	ldr	r2, [pc, #108]	; (8001764 <HAL_UART_MspInit+0x98>)
 80016f8:	f043 0320 	orr.w	r3, r3, #32
 80016fc:	6453      	str	r3, [r2, #68]	; 0x44
 80016fe:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_UART_MspInit+0x98>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	f003 0320 	and.w	r3, r3, #32
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_UART_MspInit+0x98>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a14      	ldr	r2, [pc, #80]	; (8001764 <HAL_UART_MspInit+0x98>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_UART_MspInit+0x98>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001726:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800172a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001734:	2303      	movs	r3, #3
 8001736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001738:	2308      	movs	r3, #8
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	4809      	ldr	r0, [pc, #36]	; (8001768 <HAL_UART_MspInit+0x9c>)
 8001744:	f000 fb5e 	bl	8001e04 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	2100      	movs	r1, #0
 800174c:	2047      	movs	r0, #71	; 0x47
 800174e:	f000 fa90 	bl	8001c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001752:	2047      	movs	r0, #71	; 0x47
 8001754:	f000 faa9 	bl	8001caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001758:	bf00      	nop
 800175a:	3728      	adds	r7, #40	; 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40011400 	.word	0x40011400
 8001764:	40023800 	.word	0x40023800
 8001768:	40020000 	.word	0x40020000

0800176c <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	2b20      	cmp	r3, #32
 800177e:	bf0c      	ite	eq
 8001780:	2301      	moveq	r3, #1
 8001782:	2300      	movne	r3, #0
 8001784:	b2db      	uxtb	r3, r3
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <LL_USART_ClearFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f06f 0220 	mvn.w	r2, #32
 80017a0:	601a      	str	r2, [r3, #0]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	b2db      	uxtb	r3, r3
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017cc:	e7fe      	b.n	80017cc <NMI_Handler+0x4>

080017ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <HardFault_Handler+0x4>

080017d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <MemManage_Handler+0x4>

080017da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <BusFault_Handler+0x4>

080017e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <UsageFault_Handler+0x4>

080017e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001814:	f000 f90e 	bl	8001a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}

0800181c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	static unsigned char cnt = 0;
	if(LL_USART_IsActiveFlag_RXNE(USART2))
 8001820:	4832      	ldr	r0, [pc, #200]	; (80018ec <USART2_IRQHandler+0xd0>)
 8001822:	f7ff ffa3 	bl	800176c <LL_USART_IsActiveFlag_RXNE>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d05c      	beq.n	80018e6 <USART2_IRQHandler+0xca>
	{
		LL_USART_ClearFlag_RXNE(USART2);
 800182c:	482f      	ldr	r0, [pc, #188]	; (80018ec <USART2_IRQHandler+0xd0>)
 800182e:	f7ff ffb0 	bl	8001792 <LL_USART_ClearFlag_RXNE>
		usart2_rx_data = LL_USART_ReceiveData8(USART2);
 8001832:	482e      	ldr	r0, [pc, #184]	; (80018ec <USART2_IRQHandler+0xd0>)
 8001834:	f7ff ffbb 	bl	80017ae <LL_USART_ReceiveData8>
 8001838:	4603      	mov	r3, r0
 800183a:	461a      	mov	r2, r3
 800183c:	4b2c      	ldr	r3, [pc, #176]	; (80018f0 <USART2_IRQHandler+0xd4>)
 800183e:	701a      	strb	r2, [r3, #0]
		usart2_rx_flag = 1;
 8001840:	4b2c      	ldr	r3, [pc, #176]	; (80018f4 <USART2_IRQHandler+0xd8>)
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]

		switch(cnt)
 8001846:	4b2c      	ldr	r3, [pc, #176]	; (80018f8 <USART2_IRQHandler+0xdc>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b1f      	cmp	r3, #31
 800184c:	d02e      	beq.n	80018ac <USART2_IRQHandler+0x90>
 800184e:	2b1f      	cmp	r3, #31
 8001850:	dc3a      	bgt.n	80018c8 <USART2_IRQHandler+0xac>
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <USART2_IRQHandler+0x40>
 8001856:	2b01      	cmp	r3, #1
 8001858:	d012      	beq.n	8001880 <USART2_IRQHandler+0x64>
 800185a:	e035      	b.n	80018c8 <USART2_IRQHandler+0xac>
		{
		case 0:
			if(usart2_rx_data == 0x20)
 800185c:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <USART2_IRQHandler+0xd4>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b20      	cmp	r3, #32
 8001862:	d13f      	bne.n	80018e4 <USART2_IRQHandler+0xc8>
			{
				ibus_rx_buf[cnt] = usart2_rx_data;
 8001864:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <USART2_IRQHandler+0xdc>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <USART2_IRQHandler+0xd4>)
 800186c:	7819      	ldrb	r1, [r3, #0]
 800186e:	4b23      	ldr	r3, [pc, #140]	; (80018fc <USART2_IRQHandler+0xe0>)
 8001870:	5499      	strb	r1, [r3, r2]
				cnt++;
 8001872:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <USART2_IRQHandler+0xdc>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <USART2_IRQHandler+0xdc>)
 800187c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800187e:	e031      	b.n	80018e4 <USART2_IRQHandler+0xc8>
		case 1:
			if(usart2_rx_data == 0x40)
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <USART2_IRQHandler+0xd4>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b40      	cmp	r3, #64	; 0x40
 8001886:	d10d      	bne.n	80018a4 <USART2_IRQHandler+0x88>
			{
				ibus_rx_buf[cnt] = usart2_rx_data;
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <USART2_IRQHandler+0xdc>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <USART2_IRQHandler+0xd4>)
 8001890:	7819      	ldrb	r1, [r3, #0]
 8001892:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <USART2_IRQHandler+0xe0>)
 8001894:	5499      	strb	r1, [r3, r2]
				cnt++;
 8001896:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <USART2_IRQHandler+0xdc>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	3301      	adds	r3, #1
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <USART2_IRQHandler+0xdc>)
 80018a0:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 80018a2:	e020      	b.n	80018e6 <USART2_IRQHandler+0xca>
				cnt = 0;
 80018a4:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <USART2_IRQHandler+0xdc>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
			break;
 80018aa:	e01c      	b.n	80018e6 <USART2_IRQHandler+0xca>
		case 31:
			ibus_rx_buf[cnt] = usart2_rx_data;
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <USART2_IRQHandler+0xdc>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <USART2_IRQHandler+0xd4>)
 80018b4:	7819      	ldrb	r1, [r3, #0]
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <USART2_IRQHandler+0xe0>)
 80018b8:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <USART2_IRQHandler+0xdc>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <USART2_IRQHandler+0xe4>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
			break;
 80018c6:	e00e      	b.n	80018e6 <USART2_IRQHandler+0xca>
		default:
			ibus_rx_buf[cnt] = usart2_rx_data;
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <USART2_IRQHandler+0xdc>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <USART2_IRQHandler+0xd4>)
 80018d0:	7819      	ldrb	r1, [r3, #0]
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <USART2_IRQHandler+0xe0>)
 80018d4:	5499      	strb	r1, [r3, r2]
			cnt++;
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <USART2_IRQHandler+0xdc>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	3301      	adds	r3, #1
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <USART2_IRQHandler+0xdc>)
 80018e0:	701a      	strb	r2, [r3, #0]
			break;
 80018e2:	e000      	b.n	80018e6 <USART2_IRQHandler+0xca>
			break;
 80018e4:	bf00      	nop
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40004400 	.word	0x40004400
 80018f0:	200000ed 	.word	0x200000ed
 80018f4:	200000ec 	.word	0x200000ec
 80018f8:	20000111 	.word	0x20000111
 80018fc:	200000f0 	.word	0x200000f0
 8001900:	20000110 	.word	0x20000110

08001904 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <USART6_IRQHandler+0x10>)
 800190a:	f001 ffe1 	bl	80038d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000078 	.word	0x20000078

08001918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <SystemInit+0x20>)
 800191e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <SystemInit+0x20>)
 8001924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800193c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001974 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001940:	f7ff ffea 	bl	8001918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001944:	480c      	ldr	r0, [pc, #48]	; (8001978 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001946:	490d      	ldr	r1, [pc, #52]	; (800197c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001948:	4a0d      	ldr	r2, [pc, #52]	; (8001980 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800194c:	e002      	b.n	8001954 <LoopCopyDataInit>

0800194e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001952:	3304      	adds	r3, #4

08001954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001958:	d3f9      	bcc.n	800194e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195a:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800195c:	4c0a      	ldr	r4, [pc, #40]	; (8001988 <LoopFillZerobss+0x22>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001960:	e001      	b.n	8001966 <LoopFillZerobss>

08001962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001964:	3204      	adds	r2, #4

08001966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001968:	d3fb      	bcc.n	8001962 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800196a:	f003 fcb1 	bl	80052d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800196e:	f7ff f9ef 	bl	8000d50 <main>
  bx  lr    
 8001972:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001974:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800197c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001980:	08005358 	.word	0x08005358
  ldr r2, =_sbss
 8001984:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001988:	20000118 	.word	0x20000118

0800198c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800198c:	e7fe      	b.n	800198c <ADC_IRQHandler>
	...

08001990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001994:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <HAL_Init+0x40>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0d      	ldr	r2, [pc, #52]	; (80019d0 <HAL_Init+0x40>)
 800199a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800199e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <HAL_Init+0x40>)
 80019a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <HAL_Init+0x40>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <HAL_Init+0x40>)
 80019b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b8:	2003      	movs	r0, #3
 80019ba:	f000 f94f 	bl	8001c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019be:	200f      	movs	r0, #15
 80019c0:	f000 f808 	bl	80019d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c4:	f7ff fdfe 	bl	80015c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023c00 	.word	0x40023c00

080019d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_InitTick+0x54>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_InitTick+0x58>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f967 	bl	8001cc6 <HAL_SYSTICK_Config>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00e      	b.n	8001a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b0f      	cmp	r3, #15
 8001a06:	d80a      	bhi.n	8001a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f000 f92f 	bl	8001c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a14:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <HAL_InitTick+0x5c>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e000      	b.n	8001a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	20000010 	.word	0x20000010
 8001a30:	2000000c 	.word	0x2000000c

08001a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_IncTick+0x20>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_IncTick+0x24>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <HAL_IncTick+0x24>)
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000010 	.word	0x20000010
 8001a58:	20000114 	.word	0x20000114

08001a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_GetTick+0x14>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000114 	.word	0x20000114

08001a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a7c:	f7ff ffee 	bl	8001a5c <HAL_GetTick>
 8001a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8c:	d005      	beq.n	8001a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <HAL_Delay+0x44>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a9a:	bf00      	nop
 8001a9c:	f7ff ffde 	bl	8001a5c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d8f7      	bhi.n	8001a9c <HAL_Delay+0x28>
  {
  }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000010 	.word	0x20000010

08001abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aee:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	60d3      	str	r3, [r2, #12]
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b08:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <__NVIC_GetPriorityGrouping+0x18>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	f003 0307 	and.w	r3, r3, #7
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	db0b      	blt.n	8001b4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	f003 021f 	and.w	r2, r3, #31
 8001b38:	4907      	ldr	r1, [pc, #28]	; (8001b58 <__NVIC_EnableIRQ+0x38>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	095b      	lsrs	r3, r3, #5
 8001b40:	2001      	movs	r0, #1
 8001b42:	fa00 f202 	lsl.w	r2, r0, r2
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000e100 	.word	0xe000e100

08001b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	6039      	str	r1, [r7, #0]
 8001b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	db0a      	blt.n	8001b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	490c      	ldr	r1, [pc, #48]	; (8001ba8 <__NVIC_SetPriority+0x4c>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	0112      	lsls	r2, r2, #4
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	440b      	add	r3, r1
 8001b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b84:	e00a      	b.n	8001b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4908      	ldr	r1, [pc, #32]	; (8001bac <__NVIC_SetPriority+0x50>)
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	3b04      	subs	r3, #4
 8001b94:	0112      	lsls	r2, r2, #4
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	440b      	add	r3, r1
 8001b9a:	761a      	strb	r2, [r3, #24]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000e100 	.word	0xe000e100
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f1c3 0307 	rsb	r3, r3, #7
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	bf28      	it	cs
 8001bce:	2304      	movcs	r3, #4
 8001bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d902      	bls.n	8001be0 <NVIC_EncodePriority+0x30>
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3b03      	subs	r3, #3
 8001bde:	e000      	b.n	8001be2 <NVIC_EncodePriority+0x32>
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	43d9      	mvns	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	4313      	orrs	r3, r2
         );
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3724      	adds	r7, #36	; 0x24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c28:	d301      	bcc.n	8001c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00f      	b.n	8001c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <SysTick_Config+0x40>)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c36:	210f      	movs	r1, #15
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	f7ff ff8e 	bl	8001b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <SysTick_Config+0x40>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c46:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <SysTick_Config+0x40>)
 8001c48:	2207      	movs	r2, #7
 8001c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	e000e010 	.word	0xe000e010

08001c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff ff29 	bl	8001abc <__NVIC_SetPriorityGrouping>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	4603      	mov	r3, r0
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
 8001c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c84:	f7ff ff3e 	bl	8001b04 <__NVIC_GetPriorityGrouping>
 8001c88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	6978      	ldr	r0, [r7, #20]
 8001c90:	f7ff ff8e 	bl	8001bb0 <NVIC_EncodePriority>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff5d 	bl	8001b5c <__NVIC_SetPriority>
}
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff31 	bl	8001b20 <__NVIC_EnableIRQ>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ffa2 	bl	8001c18 <SysTick_Config>
 8001cd4:	4603      	mov	r3, r0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cec:	f7ff feb6 	bl	8001a5c <HAL_GetTick>
 8001cf0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d008      	beq.n	8001d10 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2280      	movs	r2, #128	; 0x80
 8001d02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e052      	b.n	8001db6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0216 	bic.w	r2, r2, #22
 8001d1e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695a      	ldr	r2, [r3, #20]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d2e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d103      	bne.n	8001d40 <HAL_DMA_Abort+0x62>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0208 	bic.w	r2, r2, #8
 8001d4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d60:	e013      	b.n	8001d8a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d62:	f7ff fe7b 	bl	8001a5c <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b05      	cmp	r3, #5
 8001d6e:	d90c      	bls.n	8001d8a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2220      	movs	r2, #32
 8001d74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2203      	movs	r2, #3
 8001d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e015      	b.n	8001db6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1e4      	bne.n	8001d62 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	223f      	movs	r2, #63	; 0x3f
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d004      	beq.n	8001ddc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2280      	movs	r2, #128	; 0x80
 8001dd6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e00c      	b.n	8001df6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2205      	movs	r2, #5
 8001de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0201 	bic.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b089      	sub	sp, #36	; 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	e159      	b.n	80020d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e20:	2201      	movs	r2, #1
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	f040 8148 	bne.w	80020ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d005      	beq.n	8001e56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d130      	bne.n	8001eb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	2203      	movs	r2, #3
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 0201 	and.w	r2, r3, #1
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d017      	beq.n	8001ef4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	2203      	movs	r2, #3
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d123      	bne.n	8001f48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	08da      	lsrs	r2, r3, #3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3208      	adds	r2, #8
 8001f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	220f      	movs	r2, #15
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	08da      	lsrs	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3208      	adds	r2, #8
 8001f42:	69b9      	ldr	r1, [r7, #24]
 8001f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	2203      	movs	r2, #3
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0203 	and.w	r2, r3, #3
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 80a2 	beq.w	80020ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	4b57      	ldr	r3, [pc, #348]	; (80020ec <HAL_GPIO_Init+0x2e8>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	4a56      	ldr	r2, [pc, #344]	; (80020ec <HAL_GPIO_Init+0x2e8>)
 8001f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f98:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9a:	4b54      	ldr	r3, [pc, #336]	; (80020ec <HAL_GPIO_Init+0x2e8>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fa6:	4a52      	ldr	r2, [pc, #328]	; (80020f0 <HAL_GPIO_Init+0x2ec>)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	3302      	adds	r3, #2
 8001fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	220f      	movs	r2, #15
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a49      	ldr	r2, [pc, #292]	; (80020f4 <HAL_GPIO_Init+0x2f0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d019      	beq.n	8002006 <HAL_GPIO_Init+0x202>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a48      	ldr	r2, [pc, #288]	; (80020f8 <HAL_GPIO_Init+0x2f4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d013      	beq.n	8002002 <HAL_GPIO_Init+0x1fe>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a47      	ldr	r2, [pc, #284]	; (80020fc <HAL_GPIO_Init+0x2f8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00d      	beq.n	8001ffe <HAL_GPIO_Init+0x1fa>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a46      	ldr	r2, [pc, #280]	; (8002100 <HAL_GPIO_Init+0x2fc>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d007      	beq.n	8001ffa <HAL_GPIO_Init+0x1f6>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a45      	ldr	r2, [pc, #276]	; (8002104 <HAL_GPIO_Init+0x300>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d101      	bne.n	8001ff6 <HAL_GPIO_Init+0x1f2>
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	e008      	b.n	8002008 <HAL_GPIO_Init+0x204>
 8001ff6:	2307      	movs	r3, #7
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x204>
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e004      	b.n	8002008 <HAL_GPIO_Init+0x204>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e002      	b.n	8002008 <HAL_GPIO_Init+0x204>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_GPIO_Init+0x204>
 8002006:	2300      	movs	r3, #0
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	f002 0203 	and.w	r2, r2, #3
 800200e:	0092      	lsls	r2, r2, #2
 8002010:	4093      	lsls	r3, r2
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002018:	4935      	ldr	r1, [pc, #212]	; (80020f0 <HAL_GPIO_Init+0x2ec>)
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002026:	4b38      	ldr	r3, [pc, #224]	; (8002108 <HAL_GPIO_Init+0x304>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800204a:	4a2f      	ldr	r2, [pc, #188]	; (8002108 <HAL_GPIO_Init+0x304>)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002050:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <HAL_GPIO_Init+0x304>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002074:	4a24      	ldr	r2, [pc, #144]	; (8002108 <HAL_GPIO_Init+0x304>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800207a:	4b23      	ldr	r3, [pc, #140]	; (8002108 <HAL_GPIO_Init+0x304>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800209e:	4a1a      	ldr	r2, [pc, #104]	; (8002108 <HAL_GPIO_Init+0x304>)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_GPIO_Init+0x304>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020c8:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <HAL_GPIO_Init+0x304>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3301      	adds	r3, #1
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2b0f      	cmp	r3, #15
 80020d8:	f67f aea2 	bls.w	8001e20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40013800 	.word	0x40013800
 80020f4:	40020000 	.word	0x40020000
 80020f8:	40020400 	.word	0x40020400
 80020fc:	40020800 	.word	0x40020800
 8002100:	40020c00 	.word	0x40020c00
 8002104:	40021000 	.word	0x40021000
 8002108:	40013c00 	.word	0x40013c00

0800210c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
 8002118:	4613      	mov	r3, r2
 800211a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800211c:	787b      	ldrb	r3, [r7, #1]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002122:	887a      	ldrh	r2, [r7, #2]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002128:	e003      	b.n	8002132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800212a:	887b      	ldrh	r3, [r7, #2]
 800212c:	041a      	lsls	r2, r3, #16
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	619a      	str	r2, [r3, #24]
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800213e:	b480      	push	{r7}
 8002140:	b085      	sub	sp, #20
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	460b      	mov	r3, r1
 8002148:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002150:	887a      	ldrh	r2, [r7, #2]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4013      	ands	r3, r2
 8002156:	041a      	lsls	r2, r3, #16
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	43d9      	mvns	r1, r3
 800215c:	887b      	ldrh	r3, [r7, #2]
 800215e:	400b      	ands	r3, r1
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	619a      	str	r2, [r3, #24]
}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e267      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d075      	beq.n	800227e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002192:	4b88      	ldr	r3, [pc, #544]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b04      	cmp	r3, #4
 800219c:	d00c      	beq.n	80021b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800219e:	4b85      	ldr	r3, [pc, #532]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d112      	bne.n	80021d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021aa:	4b82      	ldr	r3, [pc, #520]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021b6:	d10b      	bne.n	80021d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b8:	4b7e      	ldr	r3, [pc, #504]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d05b      	beq.n	800227c <HAL_RCC_OscConfig+0x108>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d157      	bne.n	800227c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e242      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d8:	d106      	bne.n	80021e8 <HAL_RCC_OscConfig+0x74>
 80021da:	4b76      	ldr	r3, [pc, #472]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a75      	ldr	r2, [pc, #468]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e01d      	b.n	8002224 <HAL_RCC_OscConfig+0xb0>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f0:	d10c      	bne.n	800220c <HAL_RCC_OscConfig+0x98>
 80021f2:	4b70      	ldr	r3, [pc, #448]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a6f      	ldr	r2, [pc, #444]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 80021f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	4b6d      	ldr	r3, [pc, #436]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a6c      	ldr	r2, [pc, #432]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	e00b      	b.n	8002224 <HAL_RCC_OscConfig+0xb0>
 800220c:	4b69      	ldr	r3, [pc, #420]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a68      	ldr	r2, [pc, #416]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	4b66      	ldr	r3, [pc, #408]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a65      	ldr	r2, [pc, #404]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 800221e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d013      	beq.n	8002254 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7ff fc16 	bl	8001a5c <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002234:	f7ff fc12 	bl	8001a5c <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b64      	cmp	r3, #100	; 0x64
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e207      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002246:	4b5b      	ldr	r3, [pc, #364]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCC_OscConfig+0xc0>
 8002252:	e014      	b.n	800227e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7ff fc02 	bl	8001a5c <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800225c:	f7ff fbfe 	bl	8001a5c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b64      	cmp	r3, #100	; 0x64
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e1f3      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226e:	4b51      	ldr	r3, [pc, #324]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0xe8>
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d063      	beq.n	8002352 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800228a:	4b4a      	ldr	r3, [pc, #296]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00b      	beq.n	80022ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002296:	4b47      	ldr	r3, [pc, #284]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d11c      	bne.n	80022dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a2:	4b44      	ldr	r3, [pc, #272]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d116      	bne.n	80022dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ae:	4b41      	ldr	r3, [pc, #260]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d005      	beq.n	80022c6 <HAL_RCC_OscConfig+0x152>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d001      	beq.n	80022c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e1c7      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c6:	4b3b      	ldr	r3, [pc, #236]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4937      	ldr	r1, [pc, #220]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022da:	e03a      	b.n	8002352 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d020      	beq.n	8002326 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e4:	4b34      	ldr	r3, [pc, #208]	; (80023b8 <HAL_RCC_OscConfig+0x244>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ea:	f7ff fbb7 	bl	8001a5c <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f2:	f7ff fbb3 	bl	8001a5c <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e1a8      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002304:	4b2b      	ldr	r3, [pc, #172]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002310:	4b28      	ldr	r3, [pc, #160]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	4925      	ldr	r1, [pc, #148]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002320:	4313      	orrs	r3, r2
 8002322:	600b      	str	r3, [r1, #0]
 8002324:	e015      	b.n	8002352 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002326:	4b24      	ldr	r3, [pc, #144]	; (80023b8 <HAL_RCC_OscConfig+0x244>)
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7ff fb96 	bl	8001a5c <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002334:	f7ff fb92 	bl	8001a5c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e187      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002346:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d036      	beq.n	80023cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d016      	beq.n	8002394 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <HAL_RCC_OscConfig+0x248>)
 8002368:	2201      	movs	r2, #1
 800236a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236c:	f7ff fb76 	bl	8001a5c <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002374:	f7ff fb72 	bl	8001a5c <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e167      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002386:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f0      	beq.n	8002374 <HAL_RCC_OscConfig+0x200>
 8002392:	e01b      	b.n	80023cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002394:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_RCC_OscConfig+0x248>)
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239a:	f7ff fb5f 	bl	8001a5c <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a0:	e00e      	b.n	80023c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023a2:	f7ff fb5b 	bl	8001a5c <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d907      	bls.n	80023c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e150      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
 80023b4:	40023800 	.word	0x40023800
 80023b8:	42470000 	.word	0x42470000
 80023bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c0:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 80023c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1ea      	bne.n	80023a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 8097 	beq.w	8002508 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023da:	2300      	movs	r3, #0
 80023dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023de:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10f      	bne.n	800240a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	4b7d      	ldr	r3, [pc, #500]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	4a7c      	ldr	r2, [pc, #496]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 80023f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f8:	6413      	str	r3, [r2, #64]	; 0x40
 80023fa:	4b7a      	ldr	r3, [pc, #488]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002406:	2301      	movs	r3, #1
 8002408:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240a:	4b77      	ldr	r3, [pc, #476]	; (80025e8 <HAL_RCC_OscConfig+0x474>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002412:	2b00      	cmp	r3, #0
 8002414:	d118      	bne.n	8002448 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002416:	4b74      	ldr	r3, [pc, #464]	; (80025e8 <HAL_RCC_OscConfig+0x474>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a73      	ldr	r2, [pc, #460]	; (80025e8 <HAL_RCC_OscConfig+0x474>)
 800241c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002422:	f7ff fb1b 	bl	8001a5c <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242a:	f7ff fb17 	bl	8001a5c <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e10c      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243c:	4b6a      	ldr	r3, [pc, #424]	; (80025e8 <HAL_RCC_OscConfig+0x474>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d106      	bne.n	800245e <HAL_RCC_OscConfig+0x2ea>
 8002450:	4b64      	ldr	r3, [pc, #400]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002454:	4a63      	ldr	r2, [pc, #396]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	6713      	str	r3, [r2, #112]	; 0x70
 800245c:	e01c      	b.n	8002498 <HAL_RCC_OscConfig+0x324>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2b05      	cmp	r3, #5
 8002464:	d10c      	bne.n	8002480 <HAL_RCC_OscConfig+0x30c>
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246a:	4a5e      	ldr	r2, [pc, #376]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 800246c:	f043 0304 	orr.w	r3, r3, #4
 8002470:	6713      	str	r3, [r2, #112]	; 0x70
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002476:	4a5b      	ldr	r2, [pc, #364]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6713      	str	r3, [r2, #112]	; 0x70
 800247e:	e00b      	b.n	8002498 <HAL_RCC_OscConfig+0x324>
 8002480:	4b58      	ldr	r3, [pc, #352]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002484:	4a57      	ldr	r2, [pc, #348]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002486:	f023 0301 	bic.w	r3, r3, #1
 800248a:	6713      	str	r3, [r2, #112]	; 0x70
 800248c:	4b55      	ldr	r3, [pc, #340]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 800248e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002490:	4a54      	ldr	r2, [pc, #336]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002492:	f023 0304 	bic.w	r3, r3, #4
 8002496:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d015      	beq.n	80024cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a0:	f7ff fadc 	bl	8001a5c <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a6:	e00a      	b.n	80024be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a8:	f7ff fad8 	bl	8001a5c <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e0cb      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024be:	4b49      	ldr	r3, [pc, #292]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 80024c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0ee      	beq.n	80024a8 <HAL_RCC_OscConfig+0x334>
 80024ca:	e014      	b.n	80024f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024cc:	f7ff fac6 	bl	8001a5c <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d4:	f7ff fac2 	bl	8001a5c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e0b5      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ea:	4b3e      	ldr	r3, [pc, #248]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 80024ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1ee      	bne.n	80024d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d105      	bne.n	8002508 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fc:	4b39      	ldr	r3, [pc, #228]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	4a38      	ldr	r2, [pc, #224]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002506:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 80a1 	beq.w	8002654 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002512:	4b34      	ldr	r3, [pc, #208]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b08      	cmp	r3, #8
 800251c:	d05c      	beq.n	80025d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d141      	bne.n	80025aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002526:	4b31      	ldr	r3, [pc, #196]	; (80025ec <HAL_RCC_OscConfig+0x478>)
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252c:	f7ff fa96 	bl	8001a5c <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002534:	f7ff fa92 	bl	8001a5c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e087      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002546:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69da      	ldr	r2, [r3, #28]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	019b      	lsls	r3, r3, #6
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	085b      	lsrs	r3, r3, #1
 800256a:	3b01      	subs	r3, #1
 800256c:	041b      	lsls	r3, r3, #16
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002574:	061b      	lsls	r3, r3, #24
 8002576:	491b      	ldr	r1, [pc, #108]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800257c:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <HAL_RCC_OscConfig+0x478>)
 800257e:	2201      	movs	r2, #1
 8002580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002582:	f7ff fa6b 	bl	8001a5c <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800258a:	f7ff fa67 	bl	8001a5c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e05c      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x416>
 80025a8:	e054      	b.n	8002654 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025aa:	4b10      	ldr	r3, [pc, #64]	; (80025ec <HAL_RCC_OscConfig+0x478>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7ff fa54 	bl	8001a5c <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b8:	f7ff fa50 	bl	8001a5c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e045      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x444>
 80025d6:	e03d      	b.n	8002654 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d107      	bne.n	80025f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e038      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40007000 	.word	0x40007000
 80025ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025f0:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <HAL_RCC_OscConfig+0x4ec>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d028      	beq.n	8002650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002608:	429a      	cmp	r2, r3
 800260a:	d121      	bne.n	8002650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d11a      	bne.n	8002650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002620:	4013      	ands	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002626:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002628:	4293      	cmp	r3, r2
 800262a:	d111      	bne.n	8002650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	3b01      	subs	r3, #1
 800263a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800263c:	429a      	cmp	r2, r3
 800263e:	d107      	bne.n	8002650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800

08002664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0cc      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002678:	4b68      	ldr	r3, [pc, #416]	; (800281c <HAL_RCC_ClockConfig+0x1b8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d90c      	bls.n	80026a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002686:	4b65      	ldr	r3, [pc, #404]	; (800281c <HAL_RCC_ClockConfig+0x1b8>)
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	4b63      	ldr	r3, [pc, #396]	; (800281c <HAL_RCC_ClockConfig+0x1b8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0b8      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d020      	beq.n	80026ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b8:	4b59      	ldr	r3, [pc, #356]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	4a58      	ldr	r2, [pc, #352]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026d0:	4b53      	ldr	r3, [pc, #332]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	4a52      	ldr	r2, [pc, #328]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026dc:	4b50      	ldr	r3, [pc, #320]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	494d      	ldr	r1, [pc, #308]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d044      	beq.n	8002784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d107      	bne.n	8002712 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	4b47      	ldr	r3, [pc, #284]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d119      	bne.n	8002742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e07f      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d003      	beq.n	8002722 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800271e:	2b03      	cmp	r3, #3
 8002720:	d107      	bne.n	8002732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002722:	4b3f      	ldr	r3, [pc, #252]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d109      	bne.n	8002742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e06f      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002732:	4b3b      	ldr	r3, [pc, #236]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e067      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002742:	4b37      	ldr	r3, [pc, #220]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f023 0203 	bic.w	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4934      	ldr	r1, [pc, #208]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	4313      	orrs	r3, r2
 8002752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002754:	f7ff f982 	bl	8001a5c <HAL_GetTick>
 8002758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275a:	e00a      	b.n	8002772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800275c:	f7ff f97e 	bl	8001a5c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f241 3288 	movw	r2, #5000	; 0x1388
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e04f      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002772:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 020c 	and.w	r2, r3, #12
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	429a      	cmp	r2, r3
 8002782:	d1eb      	bne.n	800275c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002784:	4b25      	ldr	r3, [pc, #148]	; (800281c <HAL_RCC_ClockConfig+0x1b8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d20c      	bcs.n	80027ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002792:	4b22      	ldr	r3, [pc, #136]	; (800281c <HAL_RCC_ClockConfig+0x1b8>)
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b20      	ldr	r3, [pc, #128]	; (800281c <HAL_RCC_ClockConfig+0x1b8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e032      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b8:	4b19      	ldr	r3, [pc, #100]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4916      	ldr	r1, [pc, #88]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d009      	beq.n	80027ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027d6:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	490e      	ldr	r1, [pc, #56]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027ea:	f000 f821 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 80027ee:	4602      	mov	r2, r0
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	490a      	ldr	r1, [pc, #40]	; (8002824 <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	5ccb      	ldrb	r3, [r1, r3]
 80027fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002802:	4a09      	ldr	r2, [pc, #36]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff f8e2 	bl	80019d4 <HAL_InitTick>

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40023c00 	.word	0x40023c00
 8002820:	40023800 	.word	0x40023800
 8002824:	08005330 	.word	0x08005330
 8002828:	20000008 	.word	0x20000008
 800282c:	2000000c 	.word	0x2000000c

08002830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002834:	b090      	sub	sp, #64	; 0x40
 8002836:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	637b      	str	r3, [r7, #52]	; 0x34
 800283c:	2300      	movs	r3, #0
 800283e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002840:	2300      	movs	r3, #0
 8002842:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002848:	4b59      	ldr	r3, [pc, #356]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 030c 	and.w	r3, r3, #12
 8002850:	2b08      	cmp	r3, #8
 8002852:	d00d      	beq.n	8002870 <HAL_RCC_GetSysClockFreq+0x40>
 8002854:	2b08      	cmp	r3, #8
 8002856:	f200 80a1 	bhi.w	800299c <HAL_RCC_GetSysClockFreq+0x16c>
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <HAL_RCC_GetSysClockFreq+0x34>
 800285e:	2b04      	cmp	r3, #4
 8002860:	d003      	beq.n	800286a <HAL_RCC_GetSysClockFreq+0x3a>
 8002862:	e09b      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002864:	4b53      	ldr	r3, [pc, #332]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002866:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002868:	e09b      	b.n	80029a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800286a:	4b53      	ldr	r3, [pc, #332]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800286c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800286e:	e098      	b.n	80029a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002870:	4b4f      	ldr	r3, [pc, #316]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002878:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800287a:	4b4d      	ldr	r3, [pc, #308]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d028      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002886:	4b4a      	ldr	r3, [pc, #296]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	099b      	lsrs	r3, r3, #6
 800288c:	2200      	movs	r2, #0
 800288e:	623b      	str	r3, [r7, #32]
 8002890:	627a      	str	r2, [r7, #36]	; 0x24
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002898:	2100      	movs	r1, #0
 800289a:	4b47      	ldr	r3, [pc, #284]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800289c:	fb03 f201 	mul.w	r2, r3, r1
 80028a0:	2300      	movs	r3, #0
 80028a2:	fb00 f303 	mul.w	r3, r0, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	4a43      	ldr	r2, [pc, #268]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80028aa:	fba0 1202 	umull	r1, r2, r0, r2
 80028ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028b0:	460a      	mov	r2, r1
 80028b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80028b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b6:	4413      	add	r3, r2
 80028b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028bc:	2200      	movs	r2, #0
 80028be:	61bb      	str	r3, [r7, #24]
 80028c0:	61fa      	str	r2, [r7, #28]
 80028c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80028ca:	f7fd ff8b 	bl	80007e4 <__aeabi_uldivmod>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4613      	mov	r3, r2
 80028d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028d6:	e053      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d8:	4b35      	ldr	r3, [pc, #212]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	099b      	lsrs	r3, r3, #6
 80028de:	2200      	movs	r2, #0
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	617a      	str	r2, [r7, #20]
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028ea:	f04f 0b00 	mov.w	fp, #0
 80028ee:	4652      	mov	r2, sl
 80028f0:	465b      	mov	r3, fp
 80028f2:	f04f 0000 	mov.w	r0, #0
 80028f6:	f04f 0100 	mov.w	r1, #0
 80028fa:	0159      	lsls	r1, r3, #5
 80028fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002900:	0150      	lsls	r0, r2, #5
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	ebb2 080a 	subs.w	r8, r2, sl
 800290a:	eb63 090b 	sbc.w	r9, r3, fp
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800291a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800291e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002922:	ebb2 0408 	subs.w	r4, r2, r8
 8002926:	eb63 0509 	sbc.w	r5, r3, r9
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	00eb      	lsls	r3, r5, #3
 8002934:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002938:	00e2      	lsls	r2, r4, #3
 800293a:	4614      	mov	r4, r2
 800293c:	461d      	mov	r5, r3
 800293e:	eb14 030a 	adds.w	r3, r4, sl
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	eb45 030b 	adc.w	r3, r5, fp
 8002948:	607b      	str	r3, [r7, #4]
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002956:	4629      	mov	r1, r5
 8002958:	028b      	lsls	r3, r1, #10
 800295a:	4621      	mov	r1, r4
 800295c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002960:	4621      	mov	r1, r4
 8002962:	028a      	lsls	r2, r1, #10
 8002964:	4610      	mov	r0, r2
 8002966:	4619      	mov	r1, r3
 8002968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800296a:	2200      	movs	r2, #0
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	60fa      	str	r2, [r7, #12]
 8002970:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002974:	f7fd ff36 	bl	80007e4 <__aeabi_uldivmod>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4613      	mov	r3, r2
 800297e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	0c1b      	lsrs	r3, r3, #16
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	3301      	adds	r3, #1
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002990:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002994:	fbb2 f3f3 	udiv	r3, r2, r3
 8002998:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800299a:	e002      	b.n	80029a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800299e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3740      	adds	r7, #64	; 0x40
 80029a8:	46bd      	mov	sp, r7
 80029aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800
 80029b4:	00f42400 	.word	0x00f42400
 80029b8:	017d7840 	.word	0x017d7840

080029bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	20000008 	.word	0x20000008

080029d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029d8:	f7ff fff0 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 80029dc:	4602      	mov	r2, r0
 80029de:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	0a9b      	lsrs	r3, r3, #10
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	4903      	ldr	r1, [pc, #12]	; (80029f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ea:	5ccb      	ldrb	r3, [r1, r3]
 80029ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40023800 	.word	0x40023800
 80029f8:	08005340 	.word	0x08005340

080029fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a00:	f7ff ffdc 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 8002a04:	4602      	mov	r2, r0
 8002a06:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	0b5b      	lsrs	r3, r3, #13
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	4903      	ldr	r1, [pc, #12]	; (8002a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a12:	5ccb      	ldrb	r3, [r1, r3]
 8002a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	08005340 	.word	0x08005340

08002a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e041      	b.n	8002aba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7fe fde2 	bl	8001614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	4619      	mov	r1, r3
 8002a62:	4610      	mov	r0, r2
 8002a64:	f000 fac0 	bl	8002fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e041      	b.n	8002b58 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d106      	bne.n	8002aee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f839 	bl	8002b60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2202      	movs	r2, #2
 8002af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	4619      	mov	r1, r3
 8002b00:	4610      	mov	r0, r2
 8002b02:	f000 fa71 	bl	8002fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d109      	bne.n	8002b98 <HAL_TIM_PWM_Start+0x24>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	bf14      	ite	ne
 8002b90:	2301      	movne	r3, #1
 8002b92:	2300      	moveq	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	e022      	b.n	8002bde <HAL_TIM_PWM_Start+0x6a>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d109      	bne.n	8002bb2 <HAL_TIM_PWM_Start+0x3e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	bf14      	ite	ne
 8002baa:	2301      	movne	r3, #1
 8002bac:	2300      	moveq	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	e015      	b.n	8002bde <HAL_TIM_PWM_Start+0x6a>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d109      	bne.n	8002bcc <HAL_TIM_PWM_Start+0x58>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	bf14      	ite	ne
 8002bc4:	2301      	movne	r3, #1
 8002bc6:	2300      	moveq	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	e008      	b.n	8002bde <HAL_TIM_PWM_Start+0x6a>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	bf14      	ite	ne
 8002bd8:	2301      	movne	r3, #1
 8002bda:	2300      	moveq	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e068      	b.n	8002cb8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d104      	bne.n	8002bf6 <HAL_TIM_PWM_Start+0x82>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bf4:	e013      	b.n	8002c1e <HAL_TIM_PWM_Start+0xaa>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d104      	bne.n	8002c06 <HAL_TIM_PWM_Start+0x92>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c04:	e00b      	b.n	8002c1e <HAL_TIM_PWM_Start+0xaa>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d104      	bne.n	8002c16 <HAL_TIM_PWM_Start+0xa2>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c14:	e003      	b.n	8002c1e <HAL_TIM_PWM_Start+0xaa>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2201      	movs	r2, #1
 8002c24:	6839      	ldr	r1, [r7, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fc90 	bl	800354c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a23      	ldr	r2, [pc, #140]	; (8002cc0 <HAL_TIM_PWM_Start+0x14c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d107      	bne.n	8002c46 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a1d      	ldr	r2, [pc, #116]	; (8002cc0 <HAL_TIM_PWM_Start+0x14c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d018      	beq.n	8002c82 <HAL_TIM_PWM_Start+0x10e>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c58:	d013      	beq.n	8002c82 <HAL_TIM_PWM_Start+0x10e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a19      	ldr	r2, [pc, #100]	; (8002cc4 <HAL_TIM_PWM_Start+0x150>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d00e      	beq.n	8002c82 <HAL_TIM_PWM_Start+0x10e>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a17      	ldr	r2, [pc, #92]	; (8002cc8 <HAL_TIM_PWM_Start+0x154>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d009      	beq.n	8002c82 <HAL_TIM_PWM_Start+0x10e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a16      	ldr	r2, [pc, #88]	; (8002ccc <HAL_TIM_PWM_Start+0x158>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d004      	beq.n	8002c82 <HAL_TIM_PWM_Start+0x10e>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a14      	ldr	r2, [pc, #80]	; (8002cd0 <HAL_TIM_PWM_Start+0x15c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d111      	bne.n	8002ca6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2b06      	cmp	r3, #6
 8002c92:	d010      	beq.n	8002cb6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0201 	orr.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca4:	e007      	b.n	8002cb6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f042 0201 	orr.w	r2, r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40010000 	.word	0x40010000
 8002cc4:	40000400 	.word	0x40000400
 8002cc8:	40000800 	.word	0x40000800
 8002ccc:	40000c00 	.word	0x40000c00
 8002cd0:	40014000 	.word	0x40014000

08002cd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e0ae      	b.n	8002e50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b0c      	cmp	r3, #12
 8002cfe:	f200 809f 	bhi.w	8002e40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d02:	a201      	add	r2, pc, #4	; (adr r2, 8002d08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d08:	08002d3d 	.word	0x08002d3d
 8002d0c:	08002e41 	.word	0x08002e41
 8002d10:	08002e41 	.word	0x08002e41
 8002d14:	08002e41 	.word	0x08002e41
 8002d18:	08002d7d 	.word	0x08002d7d
 8002d1c:	08002e41 	.word	0x08002e41
 8002d20:	08002e41 	.word	0x08002e41
 8002d24:	08002e41 	.word	0x08002e41
 8002d28:	08002dbf 	.word	0x08002dbf
 8002d2c:	08002e41 	.word	0x08002e41
 8002d30:	08002e41 	.word	0x08002e41
 8002d34:	08002e41 	.word	0x08002e41
 8002d38:	08002dff 	.word	0x08002dff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 f9dc 	bl	8003100 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0208 	orr.w	r2, r2, #8
 8002d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0204 	bic.w	r2, r2, #4
 8002d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6999      	ldr	r1, [r3, #24]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	691a      	ldr	r2, [r3, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	619a      	str	r2, [r3, #24]
      break;
 8002d7a:	e064      	b.n	8002e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fa22 	bl	80031cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699a      	ldr	r2, [r3, #24]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699a      	ldr	r2, [r3, #24]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6999      	ldr	r1, [r3, #24]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	021a      	lsls	r2, r3, #8
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	619a      	str	r2, [r3, #24]
      break;
 8002dbc:	e043      	b.n	8002e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fa6d 	bl	80032a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	69da      	ldr	r2, [r3, #28]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 0208 	orr.w	r2, r2, #8
 8002dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	69da      	ldr	r2, [r3, #28]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0204 	bic.w	r2, r2, #4
 8002de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	69d9      	ldr	r1, [r3, #28]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	61da      	str	r2, [r3, #28]
      break;
 8002dfc:	e023      	b.n	8002e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fab7 	bl	8003378 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	69da      	ldr	r2, [r3, #28]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69da      	ldr	r2, [r3, #28]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69d9      	ldr	r1, [r3, #28]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	021a      	lsls	r2, r3, #8
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	61da      	str	r2, [r3, #28]
      break;
 8002e3e:	e002      	b.n	8002e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	75fb      	strb	r3, [r7, #23]
      break;
 8002e44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_TIM_ConfigClockSource+0x1c>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e0b4      	b.n	8002fde <HAL_TIM_ConfigClockSource+0x186>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eac:	d03e      	beq.n	8002f2c <HAL_TIM_ConfigClockSource+0xd4>
 8002eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb2:	f200 8087 	bhi.w	8002fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eba:	f000 8086 	beq.w	8002fca <HAL_TIM_ConfigClockSource+0x172>
 8002ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec2:	d87f      	bhi.n	8002fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec4:	2b70      	cmp	r3, #112	; 0x70
 8002ec6:	d01a      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0xa6>
 8002ec8:	2b70      	cmp	r3, #112	; 0x70
 8002eca:	d87b      	bhi.n	8002fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ecc:	2b60      	cmp	r3, #96	; 0x60
 8002ece:	d050      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0x11a>
 8002ed0:	2b60      	cmp	r3, #96	; 0x60
 8002ed2:	d877      	bhi.n	8002fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed4:	2b50      	cmp	r3, #80	; 0x50
 8002ed6:	d03c      	beq.n	8002f52 <HAL_TIM_ConfigClockSource+0xfa>
 8002ed8:	2b50      	cmp	r3, #80	; 0x50
 8002eda:	d873      	bhi.n	8002fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002edc:	2b40      	cmp	r3, #64	; 0x40
 8002ede:	d058      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0x13a>
 8002ee0:	2b40      	cmp	r3, #64	; 0x40
 8002ee2:	d86f      	bhi.n	8002fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee4:	2b30      	cmp	r3, #48	; 0x30
 8002ee6:	d064      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8002ee8:	2b30      	cmp	r3, #48	; 0x30
 8002eea:	d86b      	bhi.n	8002fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d060      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d867      	bhi.n	8002fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d05c      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8002ef8:	2b10      	cmp	r3, #16
 8002efa:	d05a      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8002efc:	e062      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f0e:	f000 fafd 	bl	800350c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	609a      	str	r2, [r3, #8]
      break;
 8002f2a:	e04f      	b.n	8002fcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f3c:	f000 fae6 	bl	800350c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f4e:	609a      	str	r2, [r3, #8]
      break;
 8002f50:	e03c      	b.n	8002fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f000 fa5a 	bl	8003418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2150      	movs	r1, #80	; 0x50
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fab3 	bl	80034d6 <TIM_ITRx_SetConfig>
      break;
 8002f70:	e02c      	b.n	8002fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f000 fa79 	bl	8003476 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2160      	movs	r1, #96	; 0x60
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 faa3 	bl	80034d6 <TIM_ITRx_SetConfig>
      break;
 8002f90:	e01c      	b.n	8002fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f000 fa3a 	bl	8003418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2140      	movs	r1, #64	; 0x40
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fa93 	bl	80034d6 <TIM_ITRx_SetConfig>
      break;
 8002fb0:	e00c      	b.n	8002fcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	f000 fa8a 	bl	80034d6 <TIM_ITRx_SetConfig>
      break;
 8002fc2:	e003      	b.n	8002fcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc8:	e000      	b.n	8002fcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a3a      	ldr	r2, [pc, #232]	; (80030e4 <TIM_Base_SetConfig+0xfc>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00f      	beq.n	8003020 <TIM_Base_SetConfig+0x38>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003006:	d00b      	beq.n	8003020 <TIM_Base_SetConfig+0x38>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a37      	ldr	r2, [pc, #220]	; (80030e8 <TIM_Base_SetConfig+0x100>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d007      	beq.n	8003020 <TIM_Base_SetConfig+0x38>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a36      	ldr	r2, [pc, #216]	; (80030ec <TIM_Base_SetConfig+0x104>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d003      	beq.n	8003020 <TIM_Base_SetConfig+0x38>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a35      	ldr	r2, [pc, #212]	; (80030f0 <TIM_Base_SetConfig+0x108>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d108      	bne.n	8003032 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a2b      	ldr	r2, [pc, #172]	; (80030e4 <TIM_Base_SetConfig+0xfc>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01b      	beq.n	8003072 <TIM_Base_SetConfig+0x8a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003040:	d017      	beq.n	8003072 <TIM_Base_SetConfig+0x8a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a28      	ldr	r2, [pc, #160]	; (80030e8 <TIM_Base_SetConfig+0x100>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d013      	beq.n	8003072 <TIM_Base_SetConfig+0x8a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a27      	ldr	r2, [pc, #156]	; (80030ec <TIM_Base_SetConfig+0x104>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00f      	beq.n	8003072 <TIM_Base_SetConfig+0x8a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a26      	ldr	r2, [pc, #152]	; (80030f0 <TIM_Base_SetConfig+0x108>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00b      	beq.n	8003072 <TIM_Base_SetConfig+0x8a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a25      	ldr	r2, [pc, #148]	; (80030f4 <TIM_Base_SetConfig+0x10c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d007      	beq.n	8003072 <TIM_Base_SetConfig+0x8a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a24      	ldr	r2, [pc, #144]	; (80030f8 <TIM_Base_SetConfig+0x110>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d003      	beq.n	8003072 <TIM_Base_SetConfig+0x8a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a23      	ldr	r2, [pc, #140]	; (80030fc <TIM_Base_SetConfig+0x114>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d108      	bne.n	8003084 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4313      	orrs	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a0e      	ldr	r2, [pc, #56]	; (80030e4 <TIM_Base_SetConfig+0xfc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d103      	bne.n	80030b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	691a      	ldr	r2, [r3, #16]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d105      	bne.n	80030d6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f023 0201 	bic.w	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	611a      	str	r2, [r3, #16]
  }
}
 80030d6:	bf00      	nop
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40010000 	.word	0x40010000
 80030e8:	40000400 	.word	0x40000400
 80030ec:	40000800 	.word	0x40000800
 80030f0:	40000c00 	.word	0x40000c00
 80030f4:	40014000 	.word	0x40014000
 80030f8:	40014400 	.word	0x40014400
 80030fc:	40014800 	.word	0x40014800

08003100 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	f023 0201 	bic.w	r2, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0303 	bic.w	r3, r3, #3
 8003136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f023 0302 	bic.w	r3, r3, #2
 8003148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a1c      	ldr	r2, [pc, #112]	; (80031c8 <TIM_OC1_SetConfig+0xc8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d10c      	bne.n	8003176 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f023 0308 	bic.w	r3, r3, #8
 8003162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4313      	orrs	r3, r2
 800316c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f023 0304 	bic.w	r3, r3, #4
 8003174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a13      	ldr	r2, [pc, #76]	; (80031c8 <TIM_OC1_SetConfig+0xc8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d111      	bne.n	80031a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800318c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	621a      	str	r2, [r3, #32]
}
 80031bc:	bf00      	nop
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	40010000 	.word	0x40010000

080031cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	f023 0210 	bic.w	r2, r3, #16
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	021b      	lsls	r3, r3, #8
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f023 0320 	bic.w	r3, r3, #32
 8003216:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a1e      	ldr	r2, [pc, #120]	; (80032a0 <TIM_OC2_SetConfig+0xd4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d10d      	bne.n	8003248 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003246:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a15      	ldr	r2, [pc, #84]	; (80032a0 <TIM_OC2_SetConfig+0xd4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d113      	bne.n	8003278 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003256:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800325e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	621a      	str	r2, [r3, #32]
}
 8003292:	bf00      	nop
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40010000 	.word	0x40010000

080032a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0303 	bic.w	r3, r3, #3
 80032da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a1d      	ldr	r2, [pc, #116]	; (8003374 <TIM_OC3_SetConfig+0xd0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d10d      	bne.n	800331e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003308:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4313      	orrs	r3, r2
 8003314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800331c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a14      	ldr	r2, [pc, #80]	; (8003374 <TIM_OC3_SetConfig+0xd0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d113      	bne.n	800334e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800332c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	621a      	str	r2, [r3, #32]
}
 8003368:	bf00      	nop
 800336a:	371c      	adds	r7, #28
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40010000 	.word	0x40010000

08003378 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	031b      	lsls	r3, r3, #12
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a10      	ldr	r2, [pc, #64]	; (8003414 <TIM_OC4_SetConfig+0x9c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d109      	bne.n	80033ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	019b      	lsls	r3, r3, #6
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	621a      	str	r2, [r3, #32]
}
 8003406:	bf00      	nop
 8003408:	371c      	adds	r7, #28
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40010000 	.word	0x40010000

08003418 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	f023 0201 	bic.w	r2, r3, #1
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f023 030a 	bic.w	r3, r3, #10
 8003454:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4313      	orrs	r3, r2
 800345c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	621a      	str	r2, [r3, #32]
}
 800346a:	bf00      	nop
 800346c:	371c      	adds	r7, #28
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003476:	b480      	push	{r7}
 8003478:	b087      	sub	sp, #28
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	f023 0210 	bic.w	r2, r3, #16
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	031b      	lsls	r3, r3, #12
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	621a      	str	r2, [r3, #32]
}
 80034ca:	bf00      	nop
 80034cc:	371c      	adds	r7, #28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b085      	sub	sp, #20
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f043 0307 	orr.w	r3, r3, #7
 80034f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	609a      	str	r2, [r3, #8]
}
 8003500:	bf00      	nop
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	021a      	lsls	r2, r3, #8
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	431a      	orrs	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4313      	orrs	r3, r2
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	609a      	str	r2, [r3, #8]
}
 8003540:	bf00      	nop
 8003542:	371c      	adds	r7, #28
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f003 031f 	and.w	r3, r3, #31
 800355e:	2201      	movs	r2, #1
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a1a      	ldr	r2, [r3, #32]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	43db      	mvns	r3, r3
 800356e:	401a      	ands	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a1a      	ldr	r2, [r3, #32]
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f003 031f 	and.w	r3, r3, #31
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	fa01 f303 	lsl.w	r3, r1, r3
 8003584:	431a      	orrs	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	621a      	str	r2, [r3, #32]
}
 800358a:	bf00      	nop
 800358c:	371c      	adds	r7, #28
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e050      	b.n	8003652 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a1c      	ldr	r2, [pc, #112]	; (8003660 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d018      	beq.n	8003626 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035fc:	d013      	beq.n	8003626 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a18      	ldr	r2, [pc, #96]	; (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00e      	beq.n	8003626 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a16      	ldr	r2, [pc, #88]	; (8003668 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d009      	beq.n	8003626 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a15      	ldr	r2, [pc, #84]	; (800366c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d004      	beq.n	8003626 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a13      	ldr	r2, [pc, #76]	; (8003670 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d10c      	bne.n	8003640 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800362c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	4313      	orrs	r3, r2
 8003636:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40010000 	.word	0x40010000
 8003664:	40000400 	.word	0x40000400
 8003668:	40000800 	.word	0x40000800
 800366c:	40000c00 	.word	0x40000c00
 8003670:	40014000 	.word	0x40014000

08003674 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800368c:	2302      	movs	r3, #2
 800368e:	e03d      	b.n	800370c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e042      	b.n	80037b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fd ffc4 	bl	80016cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2224      	movs	r2, #36	; 0x24
 8003748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800375a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fd69 	bl	8004234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003770:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003780:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003790:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08a      	sub	sp, #40	; 0x28
 80037bc:	af02      	add	r7, sp, #8
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	4613      	mov	r3, r2
 80037c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b20      	cmp	r3, #32
 80037d6:	d175      	bne.n	80038c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <HAL_UART_Transmit+0x2c>
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e06e      	b.n	80038c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2221      	movs	r2, #33	; 0x21
 80037f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037f6:	f7fe f931 	bl	8001a5c <HAL_GetTick>
 80037fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	88fa      	ldrh	r2, [r7, #6]
 8003800:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	88fa      	ldrh	r2, [r7, #6]
 8003806:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003810:	d108      	bne.n	8003824 <HAL_UART_Transmit+0x6c>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d104      	bne.n	8003824 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	61bb      	str	r3, [r7, #24]
 8003822:	e003      	b.n	800382c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003828:	2300      	movs	r3, #0
 800382a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800382c:	e02e      	b.n	800388c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2200      	movs	r2, #0
 8003836:	2180      	movs	r1, #128	; 0x80
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 fb05 	bl	8003e48 <UART_WaitOnFlagUntilTimeout>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e03a      	b.n	80038c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10b      	bne.n	800386e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	461a      	mov	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003864:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	3302      	adds	r3, #2
 800386a:	61bb      	str	r3, [r7, #24]
 800386c:	e007      	b.n	800387e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	781a      	ldrb	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	3301      	adds	r3, #1
 800387c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003882:	b29b      	uxth	r3, r3
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1cb      	bne.n	800382e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2200      	movs	r2, #0
 800389e:	2140      	movs	r1, #64	; 0x40
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 fad1 	bl	8003e48 <UART_WaitOnFlagUntilTimeout>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e006      	b.n	80038c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	e000      	b.n	80038c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80038c4:	2302      	movs	r3, #2
  }
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3720      	adds	r7, #32
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b0ba      	sub	sp, #232	; 0xe8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800390e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10f      	bne.n	8003936 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b00      	cmp	r3, #0
 8003920:	d009      	beq.n	8003936 <HAL_UART_IRQHandler+0x66>
 8003922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fbc2 	bl	80040b8 <UART_Receive_IT>
      return;
 8003934:	e25b      	b.n	8003dee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003936:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80de 	beq.w	8003afc <HAL_UART_IRQHandler+0x22c>
 8003940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d106      	bne.n	800395a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800394c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003950:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80d1 	beq.w	8003afc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800395a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00b      	beq.n	800397e <HAL_UART_IRQHandler+0xae>
 8003966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800396a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396e:	2b00      	cmp	r3, #0
 8003970:	d005      	beq.n	800397e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003976:	f043 0201 	orr.w	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800397e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00b      	beq.n	80039a2 <HAL_UART_IRQHandler+0xd2>
 800398a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d005      	beq.n	80039a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	f043 0202 	orr.w	r2, r3, #2
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00b      	beq.n	80039c6 <HAL_UART_IRQHandler+0xf6>
 80039ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039be:	f043 0204 	orr.w	r2, r3, #4
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d011      	beq.n	80039f6 <HAL_UART_IRQHandler+0x126>
 80039d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d105      	bne.n	80039ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	f043 0208 	orr.w	r2, r3, #8
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 81f2 	beq.w	8003de4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <HAL_UART_IRQHandler+0x14e>
 8003a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 fb4d 	bl	80040b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	bf0c      	ite	eq
 8003a2c:	2301      	moveq	r3, #1
 8003a2e:	2300      	movne	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d103      	bne.n	8003a4a <HAL_UART_IRQHandler+0x17a>
 8003a42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d04f      	beq.n	8003aea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fa55 	bl	8003efa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5a:	2b40      	cmp	r3, #64	; 0x40
 8003a5c:	d141      	bne.n	8003ae2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3314      	adds	r3, #20
 8003a64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3314      	adds	r3, #20
 8003a86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a9a:	e841 2300 	strex	r3, r2, [r1]
 8003a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003aa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1d9      	bne.n	8003a5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d013      	beq.n	8003ada <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab6:	4a7e      	ldr	r2, [pc, #504]	; (8003cb0 <HAL_UART_IRQHandler+0x3e0>)
 8003ab8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fe f97d 	bl	8001dbe <HAL_DMA_Abort_IT>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d016      	beq.n	8003af8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad8:	e00e      	b.n	8003af8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f99e 	bl	8003e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae0:	e00a      	b.n	8003af8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f99a 	bl	8003e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae8:	e006      	b.n	8003af8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f996 	bl	8003e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003af6:	e175      	b.n	8003de4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af8:	bf00      	nop
    return;
 8003afa:	e173      	b.n	8003de4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	f040 814f 	bne.w	8003da4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 8148 	beq.w	8003da4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 8141 	beq.w	8003da4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b22:	2300      	movs	r3, #0
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	60bb      	str	r3, [r7, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b42:	2b40      	cmp	r3, #64	; 0x40
 8003b44:	f040 80b6 	bne.w	8003cb4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 8145 	beq.w	8003de8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b66:	429a      	cmp	r2, r3
 8003b68:	f080 813e 	bcs.w	8003de8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b7e:	f000 8088 	beq.w	8003c92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	330c      	adds	r3, #12
 8003b88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b90:	e853 3f00 	ldrex	r3, [r3]
 8003b94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	330c      	adds	r3, #12
 8003baa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003bae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003bba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003bbe:	e841 2300 	strex	r3, r2, [r1]
 8003bc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1d9      	bne.n	8003b82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3314      	adds	r3, #20
 8003bd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bd8:	e853 3f00 	ldrex	r3, [r3]
 8003bdc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003bde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003be0:	f023 0301 	bic.w	r3, r3, #1
 8003be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3314      	adds	r3, #20
 8003bee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bf2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003bf6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003bfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bfe:	e841 2300 	strex	r3, r2, [r1]
 8003c02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1e1      	bne.n	8003bce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3314      	adds	r3, #20
 8003c10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3314      	adds	r3, #20
 8003c2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e3      	bne.n	8003c0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	330c      	adds	r3, #12
 8003c56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c5a:	e853 3f00 	ldrex	r3, [r3]
 8003c5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c62:	f023 0310 	bic.w	r3, r3, #16
 8003c66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	330c      	adds	r3, #12
 8003c70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c74:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c7c:	e841 2300 	strex	r3, r2, [r1]
 8003c80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e3      	bne.n	8003c50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fe f826 	bl	8001cde <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2202      	movs	r2, #2
 8003c96:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f8c1 	bl	8003e30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cae:	e09b      	b.n	8003de8 <HAL_UART_IRQHandler+0x518>
 8003cb0:	08003fc1 	.word	0x08003fc1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 808e 	beq.w	8003dec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003cd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 8089 	beq.w	8003dec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	330c      	adds	r3, #12
 8003ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cf0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	330c      	adds	r3, #12
 8003cfa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003cfe:	647a      	str	r2, [r7, #68]	; 0x44
 8003d00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d06:	e841 2300 	strex	r3, r2, [r1]
 8003d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1e3      	bne.n	8003cda <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3314      	adds	r3, #20
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	e853 3f00 	ldrex	r3, [r3]
 8003d20:	623b      	str	r3, [r7, #32]
   return(result);
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3314      	adds	r3, #20
 8003d32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d36:	633a      	str	r2, [r7, #48]	; 0x30
 8003d38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e3      	bne.n	8003d12 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	330c      	adds	r3, #12
 8003d5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0310 	bic.w	r3, r3, #16
 8003d6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	330c      	adds	r3, #12
 8003d78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d7c:	61fa      	str	r2, [r7, #28]
 8003d7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d80:	69b9      	ldr	r1, [r7, #24]
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	617b      	str	r3, [r7, #20]
   return(result);
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e3      	bne.n	8003d58 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f847 	bl	8003e30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003da2:	e023      	b.n	8003dec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d009      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x4f4>
 8003db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f913 	bl	8003fe8 <UART_Transmit_IT>
    return;
 8003dc2:	e014      	b.n	8003dee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00e      	beq.n	8003dee <HAL_UART_IRQHandler+0x51e>
 8003dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f953 	bl	8004088 <UART_EndTransmit_IT>
    return;
 8003de2:	e004      	b.n	8003dee <HAL_UART_IRQHandler+0x51e>
    return;
 8003de4:	bf00      	nop
 8003de6:	e002      	b.n	8003dee <HAL_UART_IRQHandler+0x51e>
      return;
 8003de8:	bf00      	nop
 8003dea:	e000      	b.n	8003dee <HAL_UART_IRQHandler+0x51e>
      return;
 8003dec:	bf00      	nop
  }
}
 8003dee:	37e8      	adds	r7, #232	; 0xe8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	4613      	mov	r3, r2
 8003e56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e58:	e03b      	b.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e60:	d037      	beq.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e62:	f7fd fdfb 	bl	8001a5c <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	6a3a      	ldr	r2, [r7, #32]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d302      	bcc.n	8003e78 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e03a      	b.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d023      	beq.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2b80      	cmp	r3, #128	; 0x80
 8003e8e:	d020      	beq.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b40      	cmp	r3, #64	; 0x40
 8003e94:	d01d      	beq.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d116      	bne.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 f81d 	bl	8003efa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2208      	movs	r2, #8
 8003ec4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e00f      	b.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4013      	ands	r3, r2
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	bf0c      	ite	eq
 8003ee2:	2301      	moveq	r3, #1
 8003ee4:	2300      	movne	r3, #0
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	461a      	mov	r2, r3
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d0b4      	beq.n	8003e5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b095      	sub	sp, #84	; 0x54
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	330c      	adds	r3, #12
 8003f08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0c:	e853 3f00 	ldrex	r3, [r3]
 8003f10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	330c      	adds	r3, #12
 8003f20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f22:	643a      	str	r2, [r7, #64]	; 0x40
 8003f24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f2a:	e841 2300 	strex	r3, r2, [r1]
 8003f2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1e5      	bne.n	8003f02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3314      	adds	r3, #20
 8003f3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	e853 3f00 	ldrex	r3, [r3]
 8003f44:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	f023 0301 	bic.w	r3, r3, #1
 8003f4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3314      	adds	r3, #20
 8003f54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f5e:	e841 2300 	strex	r3, r2, [r1]
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1e5      	bne.n	8003f36 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d119      	bne.n	8003fa6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	330c      	adds	r3, #12
 8003f78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
 8003f80:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f023 0310 	bic.w	r3, r3, #16
 8003f88:	647b      	str	r3, [r7, #68]	; 0x44
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	330c      	adds	r3, #12
 8003f90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f92:	61ba      	str	r2, [r7, #24]
 8003f94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	6979      	ldr	r1, [r7, #20]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e5      	bne.n	8003f72 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003fb4:	bf00      	nop
 8003fb6:	3754      	adds	r7, #84	; 0x54
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f7ff ff1e 	bl	8003e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fe0:	bf00      	nop
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b21      	cmp	r3, #33	; 0x21
 8003ffa:	d13e      	bne.n	800407a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004004:	d114      	bne.n	8004030 <UART_Transmit_IT+0x48>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d110      	bne.n	8004030 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	461a      	mov	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004022:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	1c9a      	adds	r2, r3, #2
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	621a      	str	r2, [r3, #32]
 800402e:	e008      	b.n	8004042 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	1c59      	adds	r1, r3, #1
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6211      	str	r1, [r2, #32]
 800403a:	781a      	ldrb	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29b      	uxth	r3, r3
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	4619      	mov	r1, r3
 8004050:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10f      	bne.n	8004076 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004064:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004074:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	e000      	b.n	800407c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800407a:	2302      	movs	r3, #2
  }
}
 800407c:	4618      	mov	r0, r3
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800409e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff fea3 	bl	8003df4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08c      	sub	sp, #48	; 0x30
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b22      	cmp	r3, #34	; 0x22
 80040ca:	f040 80ae 	bne.w	800422a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d6:	d117      	bne.n	8004108 <UART_Receive_IT+0x50>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d113      	bne.n	8004108 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040e0:	2300      	movs	r3, #0
 80040e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	1c9a      	adds	r2, r3, #2
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	629a      	str	r2, [r3, #40]	; 0x28
 8004106:	e026      	b.n	8004156 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800410e:	2300      	movs	r3, #0
 8004110:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800411a:	d007      	beq.n	800412c <UART_Receive_IT+0x74>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10a      	bne.n	800413a <UART_Receive_IT+0x82>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d106      	bne.n	800413a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	b2da      	uxtb	r2, r3
 8004134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	e008      	b.n	800414c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004146:	b2da      	uxtb	r2, r3
 8004148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29b      	uxth	r3, r3
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	4619      	mov	r1, r3
 8004164:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004166:	2b00      	cmp	r3, #0
 8004168:	d15d      	bne.n	8004226 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0220 	bic.w	r2, r2, #32
 8004178:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004188:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695a      	ldr	r2, [r3, #20]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0201 	bic.w	r2, r2, #1
 8004198:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d135      	bne.n	800421c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	330c      	adds	r3, #12
 80041bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	e853 3f00 	ldrex	r3, [r3]
 80041c4:	613b      	str	r3, [r7, #16]
   return(result);
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f023 0310 	bic.w	r3, r3, #16
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	330c      	adds	r3, #12
 80041d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d6:	623a      	str	r2, [r7, #32]
 80041d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041da:	69f9      	ldr	r1, [r7, #28]
 80041dc:	6a3a      	ldr	r2, [r7, #32]
 80041de:	e841 2300 	strex	r3, r2, [r1]
 80041e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1e5      	bne.n	80041b6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2b10      	cmp	r3, #16
 80041f6:	d10a      	bne.n	800420e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004212:	4619      	mov	r1, r3
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff fe0b 	bl	8003e30 <HAL_UARTEx_RxEventCallback>
 800421a:	e002      	b.n	8004222 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7ff fdf3 	bl	8003e08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	e002      	b.n	800422c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	e000      	b.n	800422c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800422a:	2302      	movs	r3, #2
  }
}
 800422c:	4618      	mov	r0, r3
 800422e:	3730      	adds	r7, #48	; 0x30
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004238:	b0c0      	sub	sp, #256	; 0x100
 800423a:	af00      	add	r7, sp, #0
 800423c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004250:	68d9      	ldr	r1, [r3, #12]
 8004252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	ea40 0301 	orr.w	r3, r0, r1
 800425c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800425e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	431a      	orrs	r2, r3
 800426c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	431a      	orrs	r2, r3
 8004274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800428c:	f021 010c 	bic.w	r1, r1, #12
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800429a:	430b      	orrs	r3, r1
 800429c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800429e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ae:	6999      	ldr	r1, [r3, #24]
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	ea40 0301 	orr.w	r3, r0, r1
 80042ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	4b8f      	ldr	r3, [pc, #572]	; (8004500 <UART_SetConfig+0x2cc>)
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d005      	beq.n	80042d4 <UART_SetConfig+0xa0>
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4b8d      	ldr	r3, [pc, #564]	; (8004504 <UART_SetConfig+0x2d0>)
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d104      	bne.n	80042de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042d4:	f7fe fb92 	bl	80029fc <HAL_RCC_GetPCLK2Freq>
 80042d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80042dc:	e003      	b.n	80042e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042de:	f7fe fb79 	bl	80029d4 <HAL_RCC_GetPCLK1Freq>
 80042e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042f0:	f040 810c 	bne.w	800450c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f8:	2200      	movs	r2, #0
 80042fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004302:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004306:	4622      	mov	r2, r4
 8004308:	462b      	mov	r3, r5
 800430a:	1891      	adds	r1, r2, r2
 800430c:	65b9      	str	r1, [r7, #88]	; 0x58
 800430e:	415b      	adcs	r3, r3
 8004310:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004312:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004316:	4621      	mov	r1, r4
 8004318:	eb12 0801 	adds.w	r8, r2, r1
 800431c:	4629      	mov	r1, r5
 800431e:	eb43 0901 	adc.w	r9, r3, r1
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	f04f 0300 	mov.w	r3, #0
 800432a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800432e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004332:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004336:	4690      	mov	r8, r2
 8004338:	4699      	mov	r9, r3
 800433a:	4623      	mov	r3, r4
 800433c:	eb18 0303 	adds.w	r3, r8, r3
 8004340:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004344:	462b      	mov	r3, r5
 8004346:	eb49 0303 	adc.w	r3, r9, r3
 800434a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800434e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800435a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800435e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004362:	460b      	mov	r3, r1
 8004364:	18db      	adds	r3, r3, r3
 8004366:	653b      	str	r3, [r7, #80]	; 0x50
 8004368:	4613      	mov	r3, r2
 800436a:	eb42 0303 	adc.w	r3, r2, r3
 800436e:	657b      	str	r3, [r7, #84]	; 0x54
 8004370:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004374:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004378:	f7fc fa34 	bl	80007e4 <__aeabi_uldivmod>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4b61      	ldr	r3, [pc, #388]	; (8004508 <UART_SetConfig+0x2d4>)
 8004382:	fba3 2302 	umull	r2, r3, r3, r2
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	011c      	lsls	r4, r3, #4
 800438a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800438e:	2200      	movs	r2, #0
 8004390:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004394:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004398:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800439c:	4642      	mov	r2, r8
 800439e:	464b      	mov	r3, r9
 80043a0:	1891      	adds	r1, r2, r2
 80043a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80043a4:	415b      	adcs	r3, r3
 80043a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043ac:	4641      	mov	r1, r8
 80043ae:	eb12 0a01 	adds.w	sl, r2, r1
 80043b2:	4649      	mov	r1, r9
 80043b4:	eb43 0b01 	adc.w	fp, r3, r1
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043cc:	4692      	mov	sl, r2
 80043ce:	469b      	mov	fp, r3
 80043d0:	4643      	mov	r3, r8
 80043d2:	eb1a 0303 	adds.w	r3, sl, r3
 80043d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043da:	464b      	mov	r3, r9
 80043dc:	eb4b 0303 	adc.w	r3, fp, r3
 80043e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80043f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80043f8:	460b      	mov	r3, r1
 80043fa:	18db      	adds	r3, r3, r3
 80043fc:	643b      	str	r3, [r7, #64]	; 0x40
 80043fe:	4613      	mov	r3, r2
 8004400:	eb42 0303 	adc.w	r3, r2, r3
 8004404:	647b      	str	r3, [r7, #68]	; 0x44
 8004406:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800440a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800440e:	f7fc f9e9 	bl	80007e4 <__aeabi_uldivmod>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4611      	mov	r1, r2
 8004418:	4b3b      	ldr	r3, [pc, #236]	; (8004508 <UART_SetConfig+0x2d4>)
 800441a:	fba3 2301 	umull	r2, r3, r3, r1
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	2264      	movs	r2, #100	; 0x64
 8004422:	fb02 f303 	mul.w	r3, r2, r3
 8004426:	1acb      	subs	r3, r1, r3
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800442e:	4b36      	ldr	r3, [pc, #216]	; (8004508 <UART_SetConfig+0x2d4>)
 8004430:	fba3 2302 	umull	r2, r3, r3, r2
 8004434:	095b      	lsrs	r3, r3, #5
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800443c:	441c      	add	r4, r3
 800443e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004442:	2200      	movs	r2, #0
 8004444:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004448:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800444c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004450:	4642      	mov	r2, r8
 8004452:	464b      	mov	r3, r9
 8004454:	1891      	adds	r1, r2, r2
 8004456:	63b9      	str	r1, [r7, #56]	; 0x38
 8004458:	415b      	adcs	r3, r3
 800445a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800445c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004460:	4641      	mov	r1, r8
 8004462:	1851      	adds	r1, r2, r1
 8004464:	6339      	str	r1, [r7, #48]	; 0x30
 8004466:	4649      	mov	r1, r9
 8004468:	414b      	adcs	r3, r1
 800446a:	637b      	str	r3, [r7, #52]	; 0x34
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004478:	4659      	mov	r1, fp
 800447a:	00cb      	lsls	r3, r1, #3
 800447c:	4651      	mov	r1, sl
 800447e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004482:	4651      	mov	r1, sl
 8004484:	00ca      	lsls	r2, r1, #3
 8004486:	4610      	mov	r0, r2
 8004488:	4619      	mov	r1, r3
 800448a:	4603      	mov	r3, r0
 800448c:	4642      	mov	r2, r8
 800448e:	189b      	adds	r3, r3, r2
 8004490:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004494:	464b      	mov	r3, r9
 8004496:	460a      	mov	r2, r1
 8004498:	eb42 0303 	adc.w	r3, r2, r3
 800449c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80044b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044b4:	460b      	mov	r3, r1
 80044b6:	18db      	adds	r3, r3, r3
 80044b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ba:	4613      	mov	r3, r2
 80044bc:	eb42 0303 	adc.w	r3, r2, r3
 80044c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80044ca:	f7fc f98b 	bl	80007e4 <__aeabi_uldivmod>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4b0d      	ldr	r3, [pc, #52]	; (8004508 <UART_SetConfig+0x2d4>)
 80044d4:	fba3 1302 	umull	r1, r3, r3, r2
 80044d8:	095b      	lsrs	r3, r3, #5
 80044da:	2164      	movs	r1, #100	; 0x64
 80044dc:	fb01 f303 	mul.w	r3, r1, r3
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	3332      	adds	r3, #50	; 0x32
 80044e6:	4a08      	ldr	r2, [pc, #32]	; (8004508 <UART_SetConfig+0x2d4>)
 80044e8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ec:	095b      	lsrs	r3, r3, #5
 80044ee:	f003 0207 	and.w	r2, r3, #7
 80044f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4422      	add	r2, r4
 80044fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044fc:	e106      	b.n	800470c <UART_SetConfig+0x4d8>
 80044fe:	bf00      	nop
 8004500:	40011000 	.word	0x40011000
 8004504:	40011400 	.word	0x40011400
 8004508:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800450c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004510:	2200      	movs	r2, #0
 8004512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004516:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800451a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800451e:	4642      	mov	r2, r8
 8004520:	464b      	mov	r3, r9
 8004522:	1891      	adds	r1, r2, r2
 8004524:	6239      	str	r1, [r7, #32]
 8004526:	415b      	adcs	r3, r3
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
 800452a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800452e:	4641      	mov	r1, r8
 8004530:	1854      	adds	r4, r2, r1
 8004532:	4649      	mov	r1, r9
 8004534:	eb43 0501 	adc.w	r5, r3, r1
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	00eb      	lsls	r3, r5, #3
 8004542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004546:	00e2      	lsls	r2, r4, #3
 8004548:	4614      	mov	r4, r2
 800454a:	461d      	mov	r5, r3
 800454c:	4643      	mov	r3, r8
 800454e:	18e3      	adds	r3, r4, r3
 8004550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004554:	464b      	mov	r3, r9
 8004556:	eb45 0303 	adc.w	r3, r5, r3
 800455a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800455e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800456a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800457a:	4629      	mov	r1, r5
 800457c:	008b      	lsls	r3, r1, #2
 800457e:	4621      	mov	r1, r4
 8004580:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004584:	4621      	mov	r1, r4
 8004586:	008a      	lsls	r2, r1, #2
 8004588:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800458c:	f7fc f92a 	bl	80007e4 <__aeabi_uldivmod>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4b60      	ldr	r3, [pc, #384]	; (8004718 <UART_SetConfig+0x4e4>)
 8004596:	fba3 2302 	umull	r2, r3, r3, r2
 800459a:	095b      	lsrs	r3, r3, #5
 800459c:	011c      	lsls	r4, r3, #4
 800459e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045a2:	2200      	movs	r2, #0
 80045a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80045b0:	4642      	mov	r2, r8
 80045b2:	464b      	mov	r3, r9
 80045b4:	1891      	adds	r1, r2, r2
 80045b6:	61b9      	str	r1, [r7, #24]
 80045b8:	415b      	adcs	r3, r3
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045c0:	4641      	mov	r1, r8
 80045c2:	1851      	adds	r1, r2, r1
 80045c4:	6139      	str	r1, [r7, #16]
 80045c6:	4649      	mov	r1, r9
 80045c8:	414b      	adcs	r3, r1
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045d8:	4659      	mov	r1, fp
 80045da:	00cb      	lsls	r3, r1, #3
 80045dc:	4651      	mov	r1, sl
 80045de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045e2:	4651      	mov	r1, sl
 80045e4:	00ca      	lsls	r2, r1, #3
 80045e6:	4610      	mov	r0, r2
 80045e8:	4619      	mov	r1, r3
 80045ea:	4603      	mov	r3, r0
 80045ec:	4642      	mov	r2, r8
 80045ee:	189b      	adds	r3, r3, r2
 80045f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045f4:	464b      	mov	r3, r9
 80045f6:	460a      	mov	r2, r1
 80045f8:	eb42 0303 	adc.w	r3, r2, r3
 80045fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	67bb      	str	r3, [r7, #120]	; 0x78
 800460a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004618:	4649      	mov	r1, r9
 800461a:	008b      	lsls	r3, r1, #2
 800461c:	4641      	mov	r1, r8
 800461e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004622:	4641      	mov	r1, r8
 8004624:	008a      	lsls	r2, r1, #2
 8004626:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800462a:	f7fc f8db 	bl	80007e4 <__aeabi_uldivmod>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4611      	mov	r1, r2
 8004634:	4b38      	ldr	r3, [pc, #224]	; (8004718 <UART_SetConfig+0x4e4>)
 8004636:	fba3 2301 	umull	r2, r3, r3, r1
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	2264      	movs	r2, #100	; 0x64
 800463e:	fb02 f303 	mul.w	r3, r2, r3
 8004642:	1acb      	subs	r3, r1, r3
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	3332      	adds	r3, #50	; 0x32
 8004648:	4a33      	ldr	r2, [pc, #204]	; (8004718 <UART_SetConfig+0x4e4>)
 800464a:	fba2 2303 	umull	r2, r3, r2, r3
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004654:	441c      	add	r4, r3
 8004656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800465a:	2200      	movs	r2, #0
 800465c:	673b      	str	r3, [r7, #112]	; 0x70
 800465e:	677a      	str	r2, [r7, #116]	; 0x74
 8004660:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004664:	4642      	mov	r2, r8
 8004666:	464b      	mov	r3, r9
 8004668:	1891      	adds	r1, r2, r2
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	415b      	adcs	r3, r3
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004674:	4641      	mov	r1, r8
 8004676:	1851      	adds	r1, r2, r1
 8004678:	6039      	str	r1, [r7, #0]
 800467a:	4649      	mov	r1, r9
 800467c:	414b      	adcs	r3, r1
 800467e:	607b      	str	r3, [r7, #4]
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	f04f 0300 	mov.w	r3, #0
 8004688:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800468c:	4659      	mov	r1, fp
 800468e:	00cb      	lsls	r3, r1, #3
 8004690:	4651      	mov	r1, sl
 8004692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004696:	4651      	mov	r1, sl
 8004698:	00ca      	lsls	r2, r1, #3
 800469a:	4610      	mov	r0, r2
 800469c:	4619      	mov	r1, r3
 800469e:	4603      	mov	r3, r0
 80046a0:	4642      	mov	r2, r8
 80046a2:	189b      	adds	r3, r3, r2
 80046a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80046a6:	464b      	mov	r3, r9
 80046a8:	460a      	mov	r2, r1
 80046aa:	eb42 0303 	adc.w	r3, r2, r3
 80046ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	663b      	str	r3, [r7, #96]	; 0x60
 80046ba:	667a      	str	r2, [r7, #100]	; 0x64
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80046c8:	4649      	mov	r1, r9
 80046ca:	008b      	lsls	r3, r1, #2
 80046cc:	4641      	mov	r1, r8
 80046ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046d2:	4641      	mov	r1, r8
 80046d4:	008a      	lsls	r2, r1, #2
 80046d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80046da:	f7fc f883 	bl	80007e4 <__aeabi_uldivmod>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4b0d      	ldr	r3, [pc, #52]	; (8004718 <UART_SetConfig+0x4e4>)
 80046e4:	fba3 1302 	umull	r1, r3, r3, r2
 80046e8:	095b      	lsrs	r3, r3, #5
 80046ea:	2164      	movs	r1, #100	; 0x64
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	3332      	adds	r3, #50	; 0x32
 80046f6:	4a08      	ldr	r2, [pc, #32]	; (8004718 <UART_SetConfig+0x4e4>)
 80046f8:	fba2 2303 	umull	r2, r3, r2, r3
 80046fc:	095b      	lsrs	r3, r3, #5
 80046fe:	f003 020f 	and.w	r2, r3, #15
 8004702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4422      	add	r2, r4
 800470a:	609a      	str	r2, [r3, #8]
}
 800470c:	bf00      	nop
 800470e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004712:	46bd      	mov	sp, r7
 8004714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004718:	51eb851f 	.word	0x51eb851f

0800471c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800471c:	b480      	push	{r7}
 800471e:	b08b      	sub	sp, #44	; 0x2c
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	fa93 f3a3 	rbit	r3, r3
 8004736:	613b      	str	r3, [r7, #16]
  return result;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8004742:	2320      	movs	r3, #32
 8004744:	e003      	b.n	800474e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	fab3 f383 	clz	r3, r3
 800474c:	b2db      	uxtb	r3, r3
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	2103      	movs	r1, #3
 8004752:	fa01 f303 	lsl.w	r3, r1, r3
 8004756:	43db      	mvns	r3, r3
 8004758:	401a      	ands	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	fa93 f3a3 	rbit	r3, r3
 8004764:	61fb      	str	r3, [r7, #28]
  return result;
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8004770:	2320      	movs	r3, #32
 8004772:	e003      	b.n	800477c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	fab3 f383 	clz	r3, r3
 800477a:	b2db      	uxtb	r3, r3
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	fa01 f303 	lsl.w	r3, r1, r3
 8004784:	431a      	orrs	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	601a      	str	r2, [r3, #0]
}
 800478a:	bf00      	nop
 800478c:	372c      	adds	r7, #44	; 0x2c
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004796:	b480      	push	{r7}
 8004798:	b085      	sub	sp, #20
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	43db      	mvns	r3, r3
 80047aa:	401a      	ands	r2, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	fb01 f303 	mul.w	r3, r1, r3
 80047b4:	431a      	orrs	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	605a      	str	r2, [r3, #4]
}
 80047ba:	bf00      	nop
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b08b      	sub	sp, #44	; 0x2c
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	fa93 f3a3 	rbit	r3, r3
 80047e0:	613b      	str	r3, [r7, #16]
  return result;
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80047ec:	2320      	movs	r3, #32
 80047ee:	e003      	b.n	80047f8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	fab3 f383 	clz	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	2103      	movs	r1, #3
 80047fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004800:	43db      	mvns	r3, r3
 8004802:	401a      	ands	r2, r3
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	fa93 f3a3 	rbit	r3, r3
 800480e:	61fb      	str	r3, [r7, #28]
  return result;
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800481a:	2320      	movs	r3, #32
 800481c:	e003      	b.n	8004826 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	fab3 f383 	clz	r3, r3
 8004824:	b2db      	uxtb	r3, r3
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	fa01 f303 	lsl.w	r3, r1, r3
 800482e:	431a      	orrs	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8004834:	bf00      	nop
 8004836:	372c      	adds	r7, #44	; 0x2c
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004840:	b480      	push	{r7}
 8004842:	b08b      	sub	sp, #44	; 0x2c
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	fa93 f3a3 	rbit	r3, r3
 800485a:	613b      	str	r3, [r7, #16]
  return result;
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004866:	2320      	movs	r3, #32
 8004868:	e003      	b.n	8004872 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	fab3 f383 	clz	r3, r3
 8004870:	b2db      	uxtb	r3, r3
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	2103      	movs	r1, #3
 8004876:	fa01 f303 	lsl.w	r3, r1, r3
 800487a:	43db      	mvns	r3, r3
 800487c:	401a      	ands	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	fa93 f3a3 	rbit	r3, r3
 8004888:	61fb      	str	r3, [r7, #28]
  return result;
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004894:	2320      	movs	r3, #32
 8004896:	e003      	b.n	80048a0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	fab3 f383 	clz	r3, r3
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	fa01 f303 	lsl.w	r3, r1, r3
 80048a8:	431a      	orrs	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	60da      	str	r2, [r3, #12]
}
 80048ae:	bf00      	nop
 80048b0:	372c      	adds	r7, #44	; 0x2c
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b08b      	sub	sp, #44	; 0x2c
 80048be:	af00      	add	r7, sp, #0
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a1a      	ldr	r2, [r3, #32]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	fa93 f3a3 	rbit	r3, r3
 80048d4:	613b      	str	r3, [r7, #16]
  return result;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80048e0:	2320      	movs	r3, #32
 80048e2:	e003      	b.n	80048ec <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	fab3 f383 	clz	r3, r3
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	210f      	movs	r1, #15
 80048f0:	fa01 f303 	lsl.w	r3, r1, r3
 80048f4:	43db      	mvns	r3, r3
 80048f6:	401a      	ands	r2, r3
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	fa93 f3a3 	rbit	r3, r3
 8004902:	61fb      	str	r3, [r7, #28]
  return result;
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800490e:	2320      	movs	r3, #32
 8004910:	e003      	b.n	800491a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	fab3 f383 	clz	r3, r3
 8004918:	b2db      	uxtb	r3, r3
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	fa01 f303 	lsl.w	r3, r1, r3
 8004922:	431a      	orrs	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8004928:	bf00      	nop
 800492a:	372c      	adds	r7, #44	; 0x2c
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004934:	b480      	push	{r7}
 8004936:	b08b      	sub	sp, #44	; 0x2c
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	0a1b      	lsrs	r3, r3, #8
 8004948:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	fa93 f3a3 	rbit	r3, r3
 8004950:	613b      	str	r3, [r7, #16]
  return result;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800495c:	2320      	movs	r3, #32
 800495e:	e003      	b.n	8004968 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	fab3 f383 	clz	r3, r3
 8004966:	b2db      	uxtb	r3, r3
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	210f      	movs	r1, #15
 800496c:	fa01 f303 	lsl.w	r3, r1, r3
 8004970:	43db      	mvns	r3, r3
 8004972:	401a      	ands	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	0a1b      	lsrs	r3, r3, #8
 8004978:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	fa93 f3a3 	rbit	r3, r3
 8004980:	61fb      	str	r3, [r7, #28]
  return result;
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800498c:	2320      	movs	r3, #32
 800498e:	e003      	b.n	8004998 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	fab3 f383 	clz	r3, r3
 8004996:	b2db      	uxtb	r3, r3
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	fa01 f303 	lsl.w	r3, r1, r3
 80049a0:	431a      	orrs	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80049a6:	bf00      	nop
 80049a8:	372c      	adds	r7, #44	; 0x2c
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b08a      	sub	sp, #40	; 0x28
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80049bc:	2300      	movs	r3, #0
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	fa93 f3a3 	rbit	r3, r3
 80049d0:	617b      	str	r3, [r7, #20]
  return result;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <LL_GPIO_Init+0x2e>
    return 32U;
 80049dc:	2320      	movs	r3, #32
 80049de:	e003      	b.n	80049e8 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	fab3 f383 	clz	r3, r3
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80049ea:	e057      	b.n	8004a9c <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	2101      	movs	r1, #1
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	fa01 f303 	lsl.w	r3, r1, r3
 80049f8:	4013      	ands	r3, r2
 80049fa:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d049      	beq.n	8004a96 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d003      	beq.n	8004a12 <LL_GPIO_Init+0x60>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d10d      	bne.n	8004a2e <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	461a      	mov	r2, r3
 8004a18:	6a39      	ldr	r1, [r7, #32]
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7ff fed3 	bl	80047c6 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	461a      	mov	r2, r3
 8004a26:	6a39      	ldr	r1, [r7, #32]
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7ff feb4 	bl	8004796 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	461a      	mov	r2, r3
 8004a34:	6a39      	ldr	r1, [r7, #32]
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7ff ff02 	bl	8004840 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d121      	bne.n	8004a88 <LL_GPIO_Init+0xd6>
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	fa93 f3a3 	rbit	r3, r3
 8004a4e:	60bb      	str	r3, [r7, #8]
  return result;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <LL_GPIO_Init+0xac>
    return 32U;
 8004a5a:	2320      	movs	r3, #32
 8004a5c:	e003      	b.n	8004a66 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	fab3 f383 	clz	r3, r3
 8004a64:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004a66:	2b07      	cmp	r3, #7
 8004a68:	d807      	bhi.n	8004a7a <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	6a39      	ldr	r1, [r7, #32]
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7ff ff21 	bl	80048ba <LL_GPIO_SetAFPin_0_7>
 8004a78:	e006      	b.n	8004a88 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	6a39      	ldr	r1, [r7, #32]
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff ff56 	bl	8004934 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	6a39      	ldr	r1, [r7, #32]
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff fe43 	bl	800471c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	3301      	adds	r3, #1
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1a0      	bne.n	80049ec <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3728      	adds	r7, #40	; 0x28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004ab8:	4b04      	ldr	r3, [pc, #16]	; (8004acc <LL_RCC_GetSysClkSource+0x18>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 030c 	and.w	r3, r3, #12
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40023800 	.word	0x40023800

08004ad0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004ad4:	4b04      	ldr	r3, [pc, #16]	; (8004ae8 <LL_RCC_GetAHBPrescaler+0x18>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40023800 	.word	0x40023800

08004aec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004af0:	4b04      	ldr	r3, [pc, #16]	; (8004b04 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40023800 	.word	0x40023800

08004b08 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004b0c:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40023800 	.word	0x40023800

08004b24 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004b28:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <LL_RCC_PLL_GetMainSource+0x18>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40023800 	.word	0x40023800

08004b40 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004b44:	4b04      	ldr	r3, [pc, #16]	; (8004b58 <LL_RCC_PLL_GetN+0x18>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	099b      	lsrs	r3, r3, #6
 8004b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	40023800 	.word	0x40023800

08004b5c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004b60:	4b04      	ldr	r3, [pc, #16]	; (8004b74 <LL_RCC_PLL_GetP+0x18>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40023800 	.word	0x40023800

08004b78 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004b7c:	4b04      	ldr	r3, [pc, #16]	; (8004b90 <LL_RCC_PLL_GetDivider+0x18>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	40023800 	.word	0x40023800

08004b94 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004b9c:	f000 f820 	bl	8004be0 <RCC_GetSystemClockFreq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 f840 	bl	8004c30 <RCC_GetHCLKClockFreq>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 f84e 	bl	8004c5c <RCC_GetPCLK1ClockFreq>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 f85a 	bl	8004c84 <RCC_GetPCLK2ClockFreq>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	60da      	str	r2, [r3, #12]
}
 8004bd6:	bf00      	nop
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
	...

08004be0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004bea:	f7ff ff63 	bl	8004ab4 <LL_RCC_GetSysClkSource>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d00c      	beq.n	8004c0e <RCC_GetSystemClockFreq+0x2e>
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d80f      	bhi.n	8004c18 <RCC_GetSystemClockFreq+0x38>
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <RCC_GetSystemClockFreq+0x22>
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d003      	beq.n	8004c08 <RCC_GetSystemClockFreq+0x28>
 8004c00:	e00a      	b.n	8004c18 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004c02:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <RCC_GetSystemClockFreq+0x48>)
 8004c04:	607b      	str	r3, [r7, #4]
      break;
 8004c06:	e00a      	b.n	8004c1e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004c08:	4b08      	ldr	r3, [pc, #32]	; (8004c2c <RCC_GetSystemClockFreq+0x4c>)
 8004c0a:	607b      	str	r3, [r7, #4]
      break;
 8004c0c:	e007      	b.n	8004c1e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8004c0e:	2008      	movs	r0, #8
 8004c10:	f000 f84c 	bl	8004cac <RCC_PLL_GetFreqDomain_SYS>
 8004c14:	6078      	str	r0, [r7, #4]
      break;
 8004c16:	e002      	b.n	8004c1e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004c18:	4b03      	ldr	r3, [pc, #12]	; (8004c28 <RCC_GetSystemClockFreq+0x48>)
 8004c1a:	607b      	str	r3, [r7, #4]
      break;
 8004c1c:	bf00      	nop
  }

  return frequency;
 8004c1e:	687b      	ldr	r3, [r7, #4]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	00f42400 	.word	0x00f42400
 8004c2c:	017d7840 	.word	0x017d7840

08004c30 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004c38:	f7ff ff4a 	bl	8004ad0 <LL_RCC_GetAHBPrescaler>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	091b      	lsrs	r3, r3, #4
 8004c40:	f003 030f 	and.w	r3, r3, #15
 8004c44:	4a04      	ldr	r2, [pc, #16]	; (8004c58 <RCC_GetHCLKClockFreq+0x28>)
 8004c46:	5cd3      	ldrb	r3, [r2, r3]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	40d3      	lsrs	r3, r2
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	08005330 	.word	0x08005330

08004c5c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004c64:	f7ff ff42 	bl	8004aec <LL_RCC_GetAPB1Prescaler>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	0a9b      	lsrs	r3, r3, #10
 8004c6c:	4a04      	ldr	r2, [pc, #16]	; (8004c80 <RCC_GetPCLK1ClockFreq+0x24>)
 8004c6e:	5cd3      	ldrb	r3, [r2, r3]
 8004c70:	461a      	mov	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	40d3      	lsrs	r3, r2
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	08005340 	.word	0x08005340

08004c84 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004c8c:	f7ff ff3c 	bl	8004b08 <LL_RCC_GetAPB2Prescaler>
 8004c90:	4603      	mov	r3, r0
 8004c92:	0b5b      	lsrs	r3, r3, #13
 8004c94:	4a04      	ldr	r2, [pc, #16]	; (8004ca8 <RCC_GetPCLK2ClockFreq+0x24>)
 8004c96:	5cd3      	ldrb	r3, [r2, r3]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	40d3      	lsrs	r3, r2
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	08005340 	.word	0x08005340

08004cac <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004cac:	b590      	push	{r4, r7, lr}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004cc0:	f7ff ff30 	bl	8004b24 <LL_RCC_PLL_GetMainSource>
 8004cc4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d004      	beq.n	8004cd6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cd2:	d003      	beq.n	8004cdc <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004cd4:	e005      	b.n	8004ce2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004cd6:	4b12      	ldr	r3, [pc, #72]	; (8004d20 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004cd8:	617b      	str	r3, [r7, #20]
      break;
 8004cda:	e005      	b.n	8004ce8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004cdc:	4b11      	ldr	r3, [pc, #68]	; (8004d24 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004cde:	617b      	str	r3, [r7, #20]
      break;
 8004ce0:	e002      	b.n	8004ce8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004ce2:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004ce4:	617b      	str	r3, [r7, #20]
      break;
 8004ce6:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b08      	cmp	r3, #8
 8004cec:	d113      	bne.n	8004d16 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004cee:	f7ff ff43 	bl	8004b78 <LL_RCC_PLL_GetDivider>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	fbb3 f4f2 	udiv	r4, r3, r2
 8004cfa:	f7ff ff21 	bl	8004b40 <LL_RCC_PLL_GetN>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	fb03 f404 	mul.w	r4, r3, r4
 8004d04:	f7ff ff2a 	bl	8004b5c <LL_RCC_PLL_GetP>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	0c1b      	lsrs	r3, r3, #16
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	fbb4 f3f3 	udiv	r3, r4, r3
 8004d14:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004d16:	693b      	ldr	r3, [r7, #16]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	371c      	adds	r7, #28
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd90      	pop	{r4, r7, pc}
 8004d20:	00f42400 	.word	0x00f42400
 8004d24:	017d7840 	.word	0x017d7840

08004d28 <LL_USART_IsEnabled>:
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d3c:	bf0c      	ite	eq
 8004d3e:	2301      	moveq	r3, #1
 8004d40:	2300      	movne	r3, #0
 8004d42:	b2db      	uxtb	r3, r3
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <LL_USART_SetStopBitsLength>:
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	611a      	str	r2, [r3, #16]
}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <LL_USART_SetHWFlowCtrl>:
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	615a      	str	r2, [r3, #20]
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <LL_USART_SetBaudRate>:
{
 8004d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004da0:	b0c0      	sub	sp, #256	; 0x100
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004da8:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004dac:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004db0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dbc:	f040 810c 	bne.w	8004fd8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004dc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004dca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004dce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004dd2:	4622      	mov	r2, r4
 8004dd4:	462b      	mov	r3, r5
 8004dd6:	1891      	adds	r1, r2, r2
 8004dd8:	6639      	str	r1, [r7, #96]	; 0x60
 8004dda:	415b      	adcs	r3, r3
 8004ddc:	667b      	str	r3, [r7, #100]	; 0x64
 8004dde:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004de2:	4621      	mov	r1, r4
 8004de4:	eb12 0801 	adds.w	r8, r2, r1
 8004de8:	4629      	mov	r1, r5
 8004dea:	eb43 0901 	adc.w	r9, r3, r1
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e02:	4690      	mov	r8, r2
 8004e04:	4699      	mov	r9, r3
 8004e06:	4623      	mov	r3, r4
 8004e08:	eb18 0303 	adds.w	r3, r8, r3
 8004e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e10:	462b      	mov	r3, r5
 8004e12:	eb49 0303 	adc.w	r3, r9, r3
 8004e16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e1a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e1e:	2200      	movs	r2, #0
 8004e20:	469a      	mov	sl, r3
 8004e22:	4693      	mov	fp, r2
 8004e24:	eb1a 030a 	adds.w	r3, sl, sl
 8004e28:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e2a:	eb4b 030b 	adc.w	r3, fp, fp
 8004e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e30:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e38:	f7fb fcd4 	bl	80007e4 <__aeabi_uldivmod>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4b64      	ldr	r3, [pc, #400]	; (8004fd4 <LL_USART_SetBaudRate+0x238>)
 8004e42:	fba3 2302 	umull	r2, r3, r3, r2
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	b29c      	uxth	r4, r3
 8004e4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e52:	2200      	movs	r2, #0
 8004e54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e58:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e5c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004e60:	4642      	mov	r2, r8
 8004e62:	464b      	mov	r3, r9
 8004e64:	1891      	adds	r1, r2, r2
 8004e66:	6539      	str	r1, [r7, #80]	; 0x50
 8004e68:	415b      	adcs	r3, r3
 8004e6a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e70:	4641      	mov	r1, r8
 8004e72:	1851      	adds	r1, r2, r1
 8004e74:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e76:	4649      	mov	r1, r9
 8004e78:	414b      	adcs	r3, r1
 8004e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	f04f 0300 	mov.w	r3, #0
 8004e84:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8004e88:	4659      	mov	r1, fp
 8004e8a:	00cb      	lsls	r3, r1, #3
 8004e8c:	4651      	mov	r1, sl
 8004e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e92:	4651      	mov	r1, sl
 8004e94:	00ca      	lsls	r2, r1, #3
 8004e96:	4610      	mov	r0, r2
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	4642      	mov	r2, r8
 8004e9e:	189b      	adds	r3, r3, r2
 8004ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ea4:	464b      	mov	r3, r9
 8004ea6:	460a      	mov	r2, r1
 8004ea8:	eb42 0303 	adc.w	r3, r2, r3
 8004eac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004eb0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004eba:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004ebe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	18db      	adds	r3, r3, r3
 8004ec6:	643b      	str	r3, [r7, #64]	; 0x40
 8004ec8:	4613      	mov	r3, r2
 8004eca:	eb42 0303 	adc.w	r3, r2, r3
 8004ece:	647b      	str	r3, [r7, #68]	; 0x44
 8004ed0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ed4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004ed8:	f7fb fc84 	bl	80007e4 <__aeabi_uldivmod>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	4b3c      	ldr	r3, [pc, #240]	; (8004fd4 <LL_USART_SetBaudRate+0x238>)
 8004ee4:	fba3 2301 	umull	r2, r3, r3, r1
 8004ee8:	095b      	lsrs	r3, r3, #5
 8004eea:	2264      	movs	r2, #100	; 0x64
 8004eec:	fb02 f303 	mul.w	r3, r2, r3
 8004ef0:	1acb      	subs	r3, r1, r3
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ef8:	4b36      	ldr	r3, [pc, #216]	; (8004fd4 <LL_USART_SetBaudRate+0x238>)
 8004efa:	fba3 2302 	umull	r2, r3, r3, r2
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	4423      	add	r3, r4
 8004f0e:	b29c      	uxth	r4, r3
 8004f10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f14:	2200      	movs	r2, #0
 8004f16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f1a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f1e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8004f22:	4642      	mov	r2, r8
 8004f24:	464b      	mov	r3, r9
 8004f26:	1891      	adds	r1, r2, r2
 8004f28:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f2a:	415b      	adcs	r3, r3
 8004f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f2e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f32:	4641      	mov	r1, r8
 8004f34:	1851      	adds	r1, r2, r1
 8004f36:	6339      	str	r1, [r7, #48]	; 0x30
 8004f38:	4649      	mov	r1, r9
 8004f3a:	414b      	adcs	r3, r1
 8004f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f4a:	4659      	mov	r1, fp
 8004f4c:	00cb      	lsls	r3, r1, #3
 8004f4e:	4651      	mov	r1, sl
 8004f50:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f54:	4651      	mov	r1, sl
 8004f56:	00ca      	lsls	r2, r1, #3
 8004f58:	4610      	mov	r0, r2
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	4642      	mov	r2, r8
 8004f60:	189b      	adds	r3, r3, r2
 8004f62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f66:	464b      	mov	r3, r9
 8004f68:	460a      	mov	r2, r1
 8004f6a:	eb42 0303 	adc.w	r3, r2, r3
 8004f6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004f72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f76:	2200      	movs	r2, #0
 8004f78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f7c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004f80:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004f84:	460b      	mov	r3, r1
 8004f86:	18db      	adds	r3, r3, r3
 8004f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	eb42 0303 	adc.w	r3, r2, r3
 8004f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f96:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004f9a:	f7fb fc23 	bl	80007e4 <__aeabi_uldivmod>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <LL_USART_SetBaudRate+0x238>)
 8004fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fa8:	095b      	lsrs	r3, r3, #5
 8004faa:	2164      	movs	r1, #100	; 0x64
 8004fac:	fb01 f303 	mul.w	r3, r1, r3
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	3332      	adds	r3, #50	; 0x32
 8004fb6:	4a07      	ldr	r2, [pc, #28]	; (8004fd4 <LL_USART_SetBaudRate+0x238>)
 8004fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fbc:	095b      	lsrs	r3, r3, #5
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	4423      	add	r3, r4
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fd0:	609a      	str	r2, [r3, #8]
}
 8004fd2:	e108      	b.n	80051e6 <LL_USART_SetBaudRate+0x44a>
 8004fd4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004fd8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004fe2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004fe6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8004fea:	4642      	mov	r2, r8
 8004fec:	464b      	mov	r3, r9
 8004fee:	1891      	adds	r1, r2, r2
 8004ff0:	6239      	str	r1, [r7, #32]
 8004ff2:	415b      	adcs	r3, r3
 8004ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ffa:	4641      	mov	r1, r8
 8004ffc:	1854      	adds	r4, r2, r1
 8004ffe:	4649      	mov	r1, r9
 8005000:	eb43 0501 	adc.w	r5, r3, r1
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	f04f 0300 	mov.w	r3, #0
 800500c:	00eb      	lsls	r3, r5, #3
 800500e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005012:	00e2      	lsls	r2, r4, #3
 8005014:	4614      	mov	r4, r2
 8005016:	461d      	mov	r5, r3
 8005018:	4643      	mov	r3, r8
 800501a:	18e3      	adds	r3, r4, r3
 800501c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005020:	464b      	mov	r3, r9
 8005022:	eb45 0303 	adc.w	r3, r5, r3
 8005026:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800502a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800502e:	2200      	movs	r2, #0
 8005030:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005034:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	f04f 0300 	mov.w	r3, #0
 8005040:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8005044:	4629      	mov	r1, r5
 8005046:	008b      	lsls	r3, r1, #2
 8005048:	4621      	mov	r1, r4
 800504a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800504e:	4621      	mov	r1, r4
 8005050:	008a      	lsls	r2, r1, #2
 8005052:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005056:	f7fb fbc5 	bl	80007e4 <__aeabi_uldivmod>
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	4b65      	ldr	r3, [pc, #404]	; (80051f4 <LL_USART_SetBaudRate+0x458>)
 8005060:	fba3 2302 	umull	r2, r3, r3, r2
 8005064:	095b      	lsrs	r3, r3, #5
 8005066:	b29b      	uxth	r3, r3
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	b29c      	uxth	r4, r3
 800506c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005070:	2200      	movs	r2, #0
 8005072:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005076:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800507a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800507e:	4642      	mov	r2, r8
 8005080:	464b      	mov	r3, r9
 8005082:	1891      	adds	r1, r2, r2
 8005084:	61b9      	str	r1, [r7, #24]
 8005086:	415b      	adcs	r3, r3
 8005088:	61fb      	str	r3, [r7, #28]
 800508a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800508e:	4641      	mov	r1, r8
 8005090:	1851      	adds	r1, r2, r1
 8005092:	6139      	str	r1, [r7, #16]
 8005094:	4649      	mov	r1, r9
 8005096:	414b      	adcs	r3, r1
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	f04f 0300 	mov.w	r3, #0
 80050a2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050a6:	4659      	mov	r1, fp
 80050a8:	00cb      	lsls	r3, r1, #3
 80050aa:	4651      	mov	r1, sl
 80050ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050b0:	4651      	mov	r1, sl
 80050b2:	00ca      	lsls	r2, r1, #3
 80050b4:	4610      	mov	r0, r2
 80050b6:	4619      	mov	r1, r3
 80050b8:	4603      	mov	r3, r0
 80050ba:	4642      	mov	r2, r8
 80050bc:	189b      	adds	r3, r3, r2
 80050be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050c2:	464b      	mov	r3, r9
 80050c4:	460a      	mov	r2, r1
 80050c6:	eb42 0303 	adc.w	r3, r2, r3
 80050ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80050ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050d2:	2200      	movs	r2, #0
 80050d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050d8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	f04f 0300 	mov.w	r3, #0
 80050e4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80050e8:	4649      	mov	r1, r9
 80050ea:	008b      	lsls	r3, r1, #2
 80050ec:	4641      	mov	r1, r8
 80050ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050f2:	4641      	mov	r1, r8
 80050f4:	008a      	lsls	r2, r1, #2
 80050f6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80050fa:	f7fb fb73 	bl	80007e4 <__aeabi_uldivmod>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	4611      	mov	r1, r2
 8005104:	4b3b      	ldr	r3, [pc, #236]	; (80051f4 <LL_USART_SetBaudRate+0x458>)
 8005106:	fba3 2301 	umull	r2, r3, r3, r1
 800510a:	095b      	lsrs	r3, r3, #5
 800510c:	2264      	movs	r2, #100	; 0x64
 800510e:	fb02 f303 	mul.w	r3, r2, r3
 8005112:	1acb      	subs	r3, r1, r3
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	3332      	adds	r3, #50	; 0x32
 8005118:	4a36      	ldr	r2, [pc, #216]	; (80051f4 <LL_USART_SetBaudRate+0x458>)
 800511a:	fba2 2303 	umull	r2, r3, r2, r3
 800511e:	095b      	lsrs	r3, r3, #5
 8005120:	b29b      	uxth	r3, r3
 8005122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005126:	b29b      	uxth	r3, r3
 8005128:	4423      	add	r3, r4
 800512a:	b29c      	uxth	r4, r3
 800512c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005130:	2200      	movs	r2, #0
 8005132:	67bb      	str	r3, [r7, #120]	; 0x78
 8005134:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005136:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800513a:	4642      	mov	r2, r8
 800513c:	464b      	mov	r3, r9
 800513e:	1891      	adds	r1, r2, r2
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	415b      	adcs	r3, r3
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800514a:	4641      	mov	r1, r8
 800514c:	1851      	adds	r1, r2, r1
 800514e:	6039      	str	r1, [r7, #0]
 8005150:	4649      	mov	r1, r9
 8005152:	414b      	adcs	r3, r1
 8005154:	607b      	str	r3, [r7, #4]
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005162:	4659      	mov	r1, fp
 8005164:	00cb      	lsls	r3, r1, #3
 8005166:	4651      	mov	r1, sl
 8005168:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800516c:	4651      	mov	r1, sl
 800516e:	00ca      	lsls	r2, r1, #3
 8005170:	4610      	mov	r0, r2
 8005172:	4619      	mov	r1, r3
 8005174:	4603      	mov	r3, r0
 8005176:	4642      	mov	r2, r8
 8005178:	189b      	adds	r3, r3, r2
 800517a:	673b      	str	r3, [r7, #112]	; 0x70
 800517c:	464b      	mov	r3, r9
 800517e:	460a      	mov	r2, r1
 8005180:	eb42 0303 	adc.w	r3, r2, r3
 8005184:	677b      	str	r3, [r7, #116]	; 0x74
 8005186:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800518a:	2200      	movs	r2, #0
 800518c:	66bb      	str	r3, [r7, #104]	; 0x68
 800518e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800519c:	4649      	mov	r1, r9
 800519e:	008b      	lsls	r3, r1, #2
 80051a0:	4641      	mov	r1, r8
 80051a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051a6:	4641      	mov	r1, r8
 80051a8:	008a      	lsls	r2, r1, #2
 80051aa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80051ae:	f7fb fb19 	bl	80007e4 <__aeabi_uldivmod>
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	4b0f      	ldr	r3, [pc, #60]	; (80051f4 <LL_USART_SetBaudRate+0x458>)
 80051b8:	fba3 1302 	umull	r1, r3, r3, r2
 80051bc:	095b      	lsrs	r3, r3, #5
 80051be:	2164      	movs	r1, #100	; 0x64
 80051c0:	fb01 f303 	mul.w	r3, r1, r3
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	3332      	adds	r3, #50	; 0x32
 80051ca:	4a0a      	ldr	r2, [pc, #40]	; (80051f4 <LL_USART_SetBaudRate+0x458>)
 80051cc:	fba2 2303 	umull	r2, r3, r2, r3
 80051d0:	095b      	lsrs	r3, r3, #5
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	f003 030f 	and.w	r3, r3, #15
 80051d8:	b29b      	uxth	r3, r3
 80051da:	4423      	add	r3, r4
 80051dc:	b29b      	uxth	r3, r3
 80051de:	461a      	mov	r2, r3
 80051e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051e4:	609a      	str	r2, [r3, #8]
}
 80051e6:	bf00      	nop
 80051e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051ec:	46bd      	mov	sp, r7
 80051ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051f2:	bf00      	nop
 80051f4:	51eb851f 	.word	0x51eb851f

080051f8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005206:	2300      	movs	r3, #0
 8005208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff fd8c 	bl	8004d28 <LL_USART_IsEnabled>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d149      	bne.n	80052aa <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800521e:	f023 030c 	bic.w	r3, r3, #12
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	6851      	ldr	r1, [r2, #4]
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	68d2      	ldr	r2, [r2, #12]
 800522a:	4311      	orrs	r1, r2
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	6912      	ldr	r2, [r2, #16]
 8005230:	4311      	orrs	r1, r2
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	6992      	ldr	r2, [r2, #24]
 8005236:	430a      	orrs	r2, r1
 8005238:	431a      	orrs	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	4619      	mov	r1, r3
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff fd83 	bl	8004d50 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	4619      	mov	r1, r3
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7ff fd90 	bl	8004d76 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005256:	f107 0308 	add.w	r3, r7, #8
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff fc9a 	bl	8004b94 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a14      	ldr	r2, [pc, #80]	; (80052b4 <LL_USART_Init+0xbc>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d102      	bne.n	800526e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	e00c      	b.n	8005288 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a11      	ldr	r2, [pc, #68]	; (80052b8 <LL_USART_Init+0xc0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d102      	bne.n	800527c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	61bb      	str	r3, [r7, #24]
 800527a:	e005      	b.n	8005288 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a0f      	ldr	r2, [pc, #60]	; (80052bc <LL_USART_Init+0xc4>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d101      	bne.n	8005288 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00d      	beq.n	80052aa <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d009      	beq.n	80052aa <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8005296:	2300      	movs	r3, #0
 8005298:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80052a2:	69b9      	ldr	r1, [r7, #24]
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7ff fd79 	bl	8004d9c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80052aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3720      	adds	r7, #32
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40011000 	.word	0x40011000
 80052b8:	40004400 	.word	0x40004400
 80052bc:	40011400 	.word	0x40011400

080052c0 <memset>:
 80052c0:	4402      	add	r2, r0
 80052c2:	4603      	mov	r3, r0
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d100      	bne.n	80052ca <memset+0xa>
 80052c8:	4770      	bx	lr
 80052ca:	f803 1b01 	strb.w	r1, [r3], #1
 80052ce:	e7f9      	b.n	80052c4 <memset+0x4>

080052d0 <__libc_init_array>:
 80052d0:	b570      	push	{r4, r5, r6, lr}
 80052d2:	4d0d      	ldr	r5, [pc, #52]	; (8005308 <__libc_init_array+0x38>)
 80052d4:	4c0d      	ldr	r4, [pc, #52]	; (800530c <__libc_init_array+0x3c>)
 80052d6:	1b64      	subs	r4, r4, r5
 80052d8:	10a4      	asrs	r4, r4, #2
 80052da:	2600      	movs	r6, #0
 80052dc:	42a6      	cmp	r6, r4
 80052de:	d109      	bne.n	80052f4 <__libc_init_array+0x24>
 80052e0:	4d0b      	ldr	r5, [pc, #44]	; (8005310 <__libc_init_array+0x40>)
 80052e2:	4c0c      	ldr	r4, [pc, #48]	; (8005314 <__libc_init_array+0x44>)
 80052e4:	f000 f818 	bl	8005318 <_init>
 80052e8:	1b64      	subs	r4, r4, r5
 80052ea:	10a4      	asrs	r4, r4, #2
 80052ec:	2600      	movs	r6, #0
 80052ee:	42a6      	cmp	r6, r4
 80052f0:	d105      	bne.n	80052fe <__libc_init_array+0x2e>
 80052f2:	bd70      	pop	{r4, r5, r6, pc}
 80052f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052f8:	4798      	blx	r3
 80052fa:	3601      	adds	r6, #1
 80052fc:	e7ee      	b.n	80052dc <__libc_init_array+0xc>
 80052fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005302:	4798      	blx	r3
 8005304:	3601      	adds	r6, #1
 8005306:	e7f2      	b.n	80052ee <__libc_init_array+0x1e>
 8005308:	08005350 	.word	0x08005350
 800530c:	08005350 	.word	0x08005350
 8005310:	08005350 	.word	0x08005350
 8005314:	08005354 	.word	0x08005354

08005318 <_init>:
 8005318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531a:	bf00      	nop
 800531c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800531e:	bc08      	pop	{r3}
 8005320:	469e      	mov	lr, r3
 8005322:	4770      	bx	lr

08005324 <_fini>:
 8005324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005326:	bf00      	nop
 8005328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532a:	bc08      	pop	{r3}
 800532c:	469e      	mov	lr, r3
 800532e:	4770      	bx	lr
